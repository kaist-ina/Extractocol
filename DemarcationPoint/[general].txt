%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
%<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
%<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
%<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
%<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
%<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
%<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
%<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_
%<retrofit.RestAdapter$Builder: retrofit.RestAdapter build()> -> _SOURCE_
<java.net.HttpURLConnection: java.io.InputStream getInputStream()> -> _SOURCE_
<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()> -> _SOURCE_
%<com.insthub.fivemiles.Protocol.a: void updateApis()> -> _SOURCE_

<com.BeeFramework.b.a: com.external.androidquery.a ajaxProgress(com.external.androidquery.b.d)> -> _SOURCE_
<com.BeeFramework.b.f: com.external.androidquery.a ajax(com.external.androidquery.b.d)> -> _SOURCE_
<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder a(java.lang.String,java.lang.String)> -> _SOURCE_



%<com.thirdrock.repository.impl.ReviewRepositoryImpl: rx.a getReview(java.lang.String,java.lang.String)> -> _SOURCE_
%<com.thirdrock.repository.impl.ReviewRepositoryImpl: rx.a getUserReputation(java.lang.String)> -> _SOURCE_
%<com.thirdrock.repository.impl.SystemRepositoryImpl: rx.a getPromoTextResource()> -> _SOURCE_
%<com.thirdrock.repository.impl.MessageRepositoryImpl: rx.a getMoreSysMessages()> -> _SOURCE_
%<com.thirdrock.repository.impl.MessageRepositoryImpl: rx.a getSysMessages()> -> _SOURCE_
%<com.thirdrock.repository.impl.MessageRepositoryImpl: rx.a getMessages(java.lang.String)> -> _SOURCE_
%<com.thirdrock.repository.impl.MessageRepositoryImpl: rx.a getMoreMessages(java.lang.String)> -> _SOURCE_
%<com.thirdrock.repository.impl.AddressRepositoryImpl: rx.a getAddressByZipCode(java.lang.String)> -> _SOURCE_
%<com.thirdrock.repository.impl.AppointmentRepositoryImpl: rx.a getAppointmentDetail(int)> -> _SOURCE_
%<com.thirdrock.repository.impl.AppointmentRepositoryImpl: rx.a getAppointmentDetail(java.lang.String,java.lang.String)> -> _SOURCE_
%<com.thirdrock.repository.impl.GoogleMapsApiImpl: rx.a getAddressByLatLng(double,double)> -> _SOURCE_
%<com.thirdrock.repository.impl.GoogleMapsApiImpl: rx.a getAddressByPlaceId(java.lang.String)> -> _SOURCE_
%<com.thirdrock.repository.impl.GoogleMapsApiImpl: rx.a getAddressByZipCode(java.lang.String)> -> _SOURCE_
%<com.thirdrock.repository.impl.ItemRepositoryImpl: rx.a doGetFollowingItemThumbs(double,double,boolean)> -> _SOURCE_
%<com.thirdrock.repository.impl.ItemRepositoryImpl: rx.a getNearbyItemThumbs(double,double,boolean)> -> _SOURCE_
%<com.thirdrock.repository.impl.ItemRepositoryImpl: rx.a getCampaigns(com.thirdrock.domain.EnumCampaignType)> -> _SOURCE_
%<com.thirdrock.repository.impl.ItemRepositoryImpl: rx.a getFeaturedCollection(java.lang.String)> -> _SOURCE_
%<com.thirdrock.repository.impl.ItemRepositoryImpl: rx.a getItemById(java.lang.String)> -> _SOURCE_
%<com.thirdrock.repository.impl.ItemRepositoryImpl: rx.a getItemById(java.lang.String,java.util.Map)> -> _SOURCE_
%<com.thirdrock.repository.impl.ItemRepositoryImpl: rx.a getLikers(java.lang.String)> -> _SOURCE_
%<com.thirdrock.repository.impl.ItemRepositoryImpl: rx.a getUserItems(java.lang.String)> -> _SOURCE_
%<com.thirdrock.repository.impl.ItemRepositoryImpl: rx.a getUserSold(java.lang.String)> -> _SOURCE_
%<com.thirdrock.repository.impl.ItemRepositoryImpl: rx.a getUserSoldMore(java.lang.String,java.lang.String)> -> _SOURCE_
%<com.thirdrock.repository.impl.ItemRepositoryImpl: rx.a shortenItemLink(java.lang.String)> -> _SOURCE_
%<com.thirdrock.repository.impl.ItemRepositoryImpl: rx.a suggestByItem(java.lang.String,double,double)> -> _SOURCE_
%<com.thirdrock.repository.impl.ItemRepositoryImpl: rx.a suggestCategory(java.lang.String)> -> _SOURCE_
%<com.thirdrock.repository.impl.FriendsRepositoryImpl: rx.a getFriendsList(java.lang.String)> -> _SOURCE_
%<com.thirdrock.repository.impl.FriendsRepositoryImpl: rx.a getMoreFriendsList(java.lang.String)> -> _SOURCE_
%<com.thirdrock.repository.impl.OfferRepositoryImpl: rx.a getOfferLineDetail(int)>  -> _SOURCE_
%<com.thirdrock.repository.impl.OfferRepositoryImpl: rx.a getOfferLineUpdates(int,long)> -> _SOURCE_
%<com.thirdrock.repository.impl.UserRepositoryImpl: rx.a getUserDetail(java.lang.String)> -> _SOURCE_
%<com.thirdrock.repository.impl.UserRepositoryImpl: rx.a getUsersNearbyNewResp(double,double)> -> _SOURCE_
%<com.thirdrock.repository.impl.UserRepositoryImpl: rx.a resetPasswordWithEmail(java.lang.String)> -> _SOURCE_
%<com.thirdrock.repository.impl.UserRepositoryImpl: rx.a resetPasswordWithPhone(java.lang.String,java.lang.String)> -> _SOURCE_
%<com.thirdrock.repository.impl.UserRepositoryImpl: rx.a searchUser(java.lang.String,double,double)> -> _SOURCE_
%<com.thirdrock.repository.impl.UserRepositoryImpl: rx.a searchUserMore(java.lang.String,double,double,java.lang.String)> -> _SOURCE_
%<com.thirdrock.repository.impl.UserRepositoryImpl: rx.a validateShopName(java.lang.String)> -> _SOURCE_

%allinone
<java.net.HttpURLConnection: java.io.InputStream getInputStream()> -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
%<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
%<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
%<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
%<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
%<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
%<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_

<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_

%all in one
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_


<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_

%for dubsmash
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.mobilemotion.dubsmash.services.Backend: void createSoundBoard(java.lang.String,java.lang.String,java.lang.String,com.mobilemotion.dubsmash.services.Backend$BackendErrorListener,com.mobilemotion.dubsmash.events.BackendEvent)> -> _SOURCE_
<com.mobilemotion.dubsmash.services.UserProvider: com.mobilemotion.dubsmash.events.PropertyCheckedEvent checkEmail(java.lang.String)> -> _SOURCE_

%pinterest
%<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_

%for Wikipedia
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence,java.util.Map,boolean)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest form(java.util.Map)> -> _SOURCE_

%<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_

%<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()> -> _SOURCE_
%<org.apache.http.impl.client.BasicResponseHandler: java.lang.String handleResponse(org.apache.http.HttpResponse)> -> _SOURCE_

%<java.net.HttpURLConnection: java.io.InputStream getInputStream()> -> _SOURCE_
%<android.net.http.AndroidHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)> -> _SOURCE_

%<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
%<java.net.URL: java.io.InputStream openStream()> -> _SOURCE_
%<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriReFinish write jimplequest)> -> _SOURCE_
%<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_

%<com.squareup.okhttp.Request$Builder: com.squareup.okhttp.Request$Builder url(java.net.URL)> -> _SOURCE_
%<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
%<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)> -> _SOURCE_
%<java.net.HttpURLConnection: void connect()> -> _SOURCE_

%<java.net.URL: void <init>(java.lang.String)> -> _SOURCE_
%<org.apache.http.client.methods.HttpGet: void <init>(java.lang.String)> -> _SOURCE_
%<org.apache.http.client.methods.HttpPost: void <init>(java.lang.String)> -> _SOURCE_

%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: java.lang.String body()> -> _SOURCE_



% for accuweather / espn
%<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
%<java.net.HttpURLConnection: java.io.InputStream getInputStream()> -> _SOURCE_
%<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
%<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_

% for aol
%<com.aol.mobile.aolapp.util.Utils: java.lang.String readDataFromServer(java.lang.String)> -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_<com.askfm.network.utils.BaseNetworkProvider: java.lang.Boolean addToRequestQueue(com.android.volley.Request)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
%<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
%<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
%<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
%<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
%<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
%<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
%<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
%<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_
<android.content.Intent: void <init>(java.lang.String,android.net.Uri)> -> _SOURCE_
<com.loopj.android.http.AsyncHttpClient: com.loopj.android.http.RequestHandle sendRequest(org.apache.http.impl.client.DefaultHttpClient,org.apache.http.protocol.HttpContext,org.apache.http.client.methods.HttpUriRequest,java.lang.String,com.loopj.android.http.ResponseHandlerInterface,android.content.Context)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
%<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
%<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
%<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
%<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
%<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
%<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_

<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_
%allinone
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
%<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
%allinone
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_

%allinone
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
%<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
%<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
%<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
%<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
%<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
%<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_

<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
%<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
%<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
%<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
%<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
%<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
%<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
%<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_
%<retrofit.RestAdapter$Builder: retrofit.RestAdapter build()> -> _SOURCE_
<java.net.HttpURLConnection: java.io.InputStream getInputStream()> -> _SOURCE_
<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
%<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
%<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
%<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
%<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
%<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
%<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
%<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_
%<retrofit.RestAdapter$Builder: retrofit.RestAdapter build()> -> _SOURCE_
<java.net.HttpURLConnection: java.io.InputStream getInputStream()> -> _SOURCE_
<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()> -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
%<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
%<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
%<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
%<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
%<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
%<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
%<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_
%<retrofit.RestAdapter$Builder: retrofit.RestAdapter build()> -> _SOURCE_
<java.net.HttpURLConnection: java.io.InputStream getInputStream()> -> _SOURCE_
<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()> -> _SOURCE_<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_

%all in one
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
%<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
%<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
%<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
%<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
%<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_


%<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_

%for dubsmash
%<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
%<com.mobilemotion.dubsmash.services.Backend: void createSoundBoard(java.lang.String,java.lang.String,java.lang.String,com.mobilemotion.dubsmash.services.Backend$BackendErrorListener,com.mobilemotion.dubsmash.events.BackendEvent)> -> _SOURCE_
%<com.mobilemotion.dubsmash.services.UserProvider: com.mobilemotion.dubsmash.events.PropertyCheckedEvent checkEmail(java.lang.String)> -> _SOURCE_

%pinterest
%<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_

%for Wikipedia
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence,java.util.Map,boolean)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest form(java.util.Map)> -> _SOURCE_

%<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_

%<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()> -> _SOURCE_
%<org.apache.http.impl.client.BasicResponseHandler: java.lang.String handleResponse(org.apache.http.HttpResponse)> -> _SOURCE_

%<java.net.HttpURLConnection: java.io.InputStream getInputStream()> -> _SOURCE_
%<android.net.http.AndroidHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)> -> _SOURCE_

%<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
%<java.net.URL: java.io.InputStream openStream()> -> _SOURCE_
%<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriReFinish write jimplequest)> -> _SOURCE_
%<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_

%<com.squareup.okhttp.Request$Builder: com.squareup.okhttp.Request$Builder url(java.net.URL)> -> _SOURCE_
%<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
%<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)> -> _SOURCE_
%<java.net.HttpURLConnection: void connect()> -> _SOURCE_

%<java.net.URL: void <init>(java.lang.String)> -> _SOURCE_
%<org.apache.http.client.methods.HttpGet: void <init>(java.lang.String)> -> _SOURCE_
%<org.apache.http.client.methods.HttpPost: void <init>(java.lang.String)> -> _SOURCE_

%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: java.lang.String body()> -> _SOURCE_



% for accuweather / espn
%<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
%<java.net.HttpURLConnection: java.io.InputStream getInputStream()> -> _SOURCE_
%<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
%<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_

% for aol
%<com.aol.mobile.aolapp.util.Utils: java.lang.String readDataFromServer(java.lang.String)> -> _SOURCE_<android.net.Uri: android.net.Uri parse(java.lang.String)> -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
%allinone
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_


%spotify
%<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_

%for dubsmash
%<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
%<com.mobilemotion.dubsmash.services.Backend: void createSoundBoard(java.lang.String,java.lang.String,java.lang.String,com.mobilemotion.dubsmash.services.Backend$BackendErrorListener,com.mobilemotion.dubsmash.events.BackendEvent)> -> _SOURCE_
%<com.mobilemotion.dubsmash.services.UserProvider: com.mobilemotion.dubsmash.events.PropertyCheckedEvent checkEmail(java.lang.String)> -> _SOURCE_

%for iheartRadio
%<com.squareup.okhttp.OkHttpClient: com.squareup.okhttp.Call newCall(com.squareup.okhttp.Request)> -> _SOURCE_
%<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
%<com.clearchannel.iheartradio.http.OkRequest$Builder: com.clearchannel.iheartradio.http.OkRequest build()> -> _SOURCE_
%<com.clearchannel.iheartradio.http.rest.FavoriteService: com.clearchannel.iheartradio.utils.operations.Operation execute(com.clearchannel.iheartradio.http.OkRequest,com.clearchannel.iheartradio.api.connection.AsyncCallback)> -> _SOURCE_

%pinterest
%<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
%<com.pinterest.api.remote.BoardApi: void a(java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
%<com.pinterest.api.remote.BoardApi: void a(java.lang.String,boolean,com.pinterest.api.remote.BoardApi$BoardFollowApiResponse,java.lang.String)> -> _SOURCE_
%<com.pinterest.api.ApiHttpClient: com.android.volley.Request put(java.lang.String,com.pinterest.api.BaseApiResponseHandler,java.lang.String)> -> _SOURCE_
%<com.pinterest.api.ApiHttpClient: void signedCall(java.lang.String,java.lang.String,java.util.Map,com.pinterest.api.BaseApiResponseHandler,java.util.Map,java.lang.String)> -> _SOURCE_
%<com.pinterest.api.ApiHttpClient: com.android.volley.Request get(java.lang.String,com.pinterest.api.BaseApiResponseHandler,java.lang.String)> -> _SOURCE_
%<com.pinterest.api.ApiHttpClient: com.android.volley.Request post(java.lang.String,com.pinterest.api.RequestParams,com.pinterest.api.BaseApiResponseHandler,boolean,java.lang.String,com.google.gson.JsonElement)> -> _SOURCE_

%for Wikipedia
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence,java.util.Map,boolean)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest form(java.util.Map)> -> _SOURCE_

%<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_

%<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()> -> _SOURCE_
%<org.apache.http.impl.client.BasicResponseHandler: java.lang.String handleResponse(org.apache.http.HttpResponse)> -> _SOURCE_

%<java.net.HttpURLConnection: java.io.InputStream getInputStream()> -> _SOURCE_

%<android.net.http.AndroidHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)> -> _SOURCE_

%<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_

%<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_

%<java.net.URL: java.io.InputStream openStream()> -> _SOURCE_

%<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriReFinish write jimplequest)> -> _SOURCE_
%<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_

%<com.squareup.okhttp.Request$Builder: com.squareup.okhttp.Request$Builder url(java.net.URL)> -> _SOURCE_
%<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
%<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)> -> _SOURCE_
%<java.net.HttpURLConnection: void connect()> -> _SOURCE_

%<java.net.URL: void <init>(java.lang.String)> -> _SOURCE_
%<org.apache.http.client.methods.HttpGet: void <init>(java.lang.String)> -> _SOURCE_
%<org.apache.http.client.methods.HttpPost: void <init>(java.lang.String)> -> _SOURCE_

%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: java.lang.String body()> -> _SOURCE_



% for accuweather / espn
%<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
%<java.net.HttpURLConnection: java.io.InputStream getInputStream()> -> _SOURCE_
%<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
%<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_

% for aol
%<com.aol.mobile.aolapp.util.Utils: java.lang.String readDataFromServer(java.lang.String)> -> _SOURCE_
<com.android.volley.q: com.android.volley.Request a(com.android.volley.Request)> -> _SOURCE_<com.loopj.android.http.a: void a(android.content.Context,java.lang.String,org.apache.http.Header[],com.loopj.android.http.d,com.loopj.android.http.AsyncHttpResponseHandler,java.util.ArrayList)> -> _SOURCE_

<com.loopj.android.http.a: void b(android.content.Context,java.lang.String,com.loopj.android.http.d,com.loopj.android.http.AsyncHttpResponseHandler,java.util.ArrayList)> -> _SOURCE_
%<com.ebay.nautilus.kernel.net.Connector$Impl$RequestControllerHttpUrlConnection: void sendRequest(com.ebay.nautilus.kernel.content.EbayContext)> -> _SOURCE_
<com.ebay.nautilus.kernel.net.Connector: com.ebay.nautilus.kernel.net.Response sendRequest(com.ebay.nautilus.kernel.net.Request)> -> _SOURCE_

%<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)>  -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_<com.cheerfulinc.flipagram.api.flipagram.FlipagramService: rx.Observable getComments(java.lang.String,java.lang.String,java.lang.Integer)> -> _SOURCE_
% new one
<okhttp3.Call: okhttp3.Response b()> -> _SOURCE_

% old one
%<com.squareup.okhttp.OkHttpClient: com.squareup.okhttp.Call a(com.squareup.okhttp.Request)> -> _SOURCE_
%allinone



%spotify
%<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_

%for dubsmash
%<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
%<com.mobilemotion.dubsmash.services.Backend: void createSoundBoard(java.lang.String,java.lang.String,java.lang.String,com.mobilemotion.dubsmash.services.Backend$BackendErrorListener,com.mobilemotion.dubsmash.events.BackendEvent)> -> _SOURCE_
%<com.mobilemotion.dubsmash.services.UserProvider: com.mobilemotion.dubsmash.events.PropertyCheckedEvent checkEmail(java.lang.String)> -> _SOURCE_

%for iheartRadio
%<com.squareup.okhttp.OkHttpClient: com.squareup.okhttp.Call newCall(com.squareup.okhttp.Request)> -> _SOURCE_
%<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
%<com.clearchannel.iheartradio.http.OkRequest$Builder: com.clearchannel.iheartradio.http.OkRequest build()> -> _SOURCE_
%<com.clearchannel.iheartradio.http.rest.FavoriteService: com.clearchannel.iheartradio.utils.operations.Operation execute(com.clearchannel.iheartradio.http.OkRequest,com.clearchannel.iheartradio.api.connection.AsyncCallback)> -> _SOURCE_

%pinterest
%<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
%<com.pinterest.api.remote.BoardApi: void a(java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
%<com.pinterest.api.remote.BoardApi: void a(java.lang.String,boolean,com.pinterest.api.remote.BoardApi$BoardFollowApiResponse,java.lang.String)> -> _SOURCE_
%<com.pinterest.api.ApiHttpClient: com.android.volley.Request put(java.lang.String,com.pinterest.api.BaseApiResponseHandler,java.lang.String)> -> _SOURCE_
%<com.pinterest.api.ApiHttpClient: void signedCall(java.lang.String,java.lang.String,java.util.Map,com.pinterest.api.BaseApiResponseHandler,java.util.Map,java.lang.String)> -> _SOURCE_
%<com.pinterest.api.ApiHttpClient: com.android.volley.Request get(java.lang.String,com.pinterest.api.BaseApiResponseHandler,java.lang.String)> -> _SOURCE_
%<com.pinterest.api.ApiHttpClient: com.android.volley.Request post(java.lang.String,com.pinterest.api.RequestParams,com.pinterest.api.BaseApiResponseHandler,boolean,java.lang.String,com.google.gson.JsonElement)> -> _SOURCE_

%for Wikipedia
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence,java.util.Map,boolean)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest form(java.util.Map)> -> _SOURCE_

%<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_

%<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()> -> _SOURCE_
%<org.apache.http.impl.client.BasicResponseHandler: java.lang.String handleResponse(org.apache.http.HttpResponse)> -> _SOURCE_

%<java.net.HttpURLConnection: java.io.InputStream getInputStream()> -> _SOURCE_

%<android.net.http.AndroidHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)> -> _SOURCE_

%<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_

%<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_

%<java.net.URL: java.io.InputStream openStream()> -> _SOURCE_

%<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriReFinish write jimplequest)> -> _SOURCE_
%<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_

%<com.squareup.okhttp.Request$Builder: com.squareup.okhttp.Request$Builder url(java.net.URL)> -> _SOURCE_
%<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
%<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)> -> _SOURCE_
%<java.net.HttpURLConnection: void connect()> -> _SOURCE_

%<java.net.URL: void <init>(java.lang.String)> -> _SOURCE_
%<org.apache.http.client.methods.HttpGet: void <init>(java.lang.String)> -> _SOURCE_
%<org.apache.http.client.methods.HttpPost: void <init>(java.lang.String)> -> _SOURCE_

%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: java.lang.String body()> -> _SOURCE_



% for accuweather / espn
%<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
%<java.net.HttpURLConnection: java.io.InputStream getInputStream()> -> _SOURCE_
%<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
%<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_

% for aol
%<com.aol.mobile.aolapp.util.Utils: java.lang.String readDataFromServer(java.lang.String)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_
%<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.Future submit(java.lang.Runnable)> -> _SOURCE_

%<com.contextlogic.wish.api.core.WishApi: com.contextlogic.wish.api.core.WishApiRequest apiRequest(java.lang.String,com.contextlogic.wish.http.HttpRequestParams,boolean,com.contextlogic.wish.api.core.WishApiCallback)> -> _SOURCE_


%<com.contextlogic.wish.http.HttpRequest: void <init>(ch.boye.httpclientandroidlib.client.HttpClient,ch.boye.httpclientandroidlib.protocol.HttpContext,java.lang.String,com.contextlogic.wish.http.HttpRequest$RequestType,com.contextlogic.wish.http.HttpRequestParams,com.contextlogic.wish.http.HttpResponseHandler)> -> _SOURCE_
%<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<ch.boye.httpclientandroidlib.client.HttpClient: ch.boye.httpclientandroidlib.HttpResponse execute(ch.boye.httpclientandroidlib.client.methods.HttpUriRequest,ch.boye.httpclientandroidlib.protocol.HttpContext)> -> _SOURCE_
%New dp
%<com.contextlogic.wish.http.WishHttpClient: void request(com.contextlogic.wish.http.WishHttpClient$RequestPool,java.lang.Object,java.lang.String,com.contextlogic.wish.http.HttpRequest$RequestType,com.contextlogic.wish.http.HttpRequestParams,com.contextlogic.wish.http.HttpResponseHandler)> -> _SOURCE_
%<com.contextlogic.wish.http.HttpRequest: void <init>(ch.boye.httpclientandroidlib.client.HttpClient,ch.boye.httpclientandroidlib.protocol.HttpContext,java.lang.String,com.contextlogic.wish.http.HttpRequest$RequestType,com.contextlogic.wish.http.HttpRequestParams,com.contextlogic.wish.http.HttpResponseHandler)> -> _SOURCE_
%<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.Future submit(java.lang.Runnable)> -> _SOURCE_
%<com.contextlogic.wish.api.core.WishApi: com.contextlogic.wish.api.core.WishApiRequest apiRequest(java.lang.String,com.contextlogic.wish.http.HttpRequestParams,com.contextlogic.wish.api.core.WishApiCallback)> -> _SOURCE_
%<com.contextlogic.wish.http.WishHttpClient: void post(com.contextlogic.wish.http.WishHttpClient$RequestPool,java.lang.Object,java.lang.String,com.contextlogic.wish.http.HttpRequestParams,com.contextlogic.wish.http.HttpResponseHandler)> -> _SOURCE_
%<com.contextlogic.wish.http.WishHttpClient: void get(com.contextlogic.wish.http.WishHttpClient$RequestPool,java.lang.Object,java.lang.String,com.contextlogic.wish.http.HttpRequestParams,com.contextlogic.wish.http.HttpResponseHandler)> -> _SOURCE_


%Origin dp
<ch.boye.httpclientandroidlib.client.HttpClient: ch.boye.httpclientandroidlib.HttpResponse execute(ch.boye.httpclientandroidlib.client.methods.HttpUriRequest,ch.boye.httpclientandroidlib.protocol.HttpContext)> -> _SOURCE_
%<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.Future submit(java.lang.Runnable)> -> _SOURCE_

%For debugging
%<com.contextlogic.wish.ui.fragment.base.BaseContentFragment: void handleResume()> -> _SOURCE_
%<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.Future submit(java.lang.Runnable)> -> _SOURCE_

%<com.contextlogic.wish.api.core.WishApi: com.contextlogic.wish.api.core.WishApiRequest apiRequest(java.lang.String,com.contextlogic.wish.http.HttpRequestParams,boolean,com.contextlogic.wish.api.core.WishApiCallback)> -> _SOURCE_


<com.contextlogic.wish.http.HttpRequest: void <init>(ch.boye.httpclientandroidlib.client.HttpClient,ch.boye.httpclientandroidlib.protocol.HttpContext,java.lang.String,com.contextlogic.wish.http.HttpRequest$RequestType,com.contextlogic.wish.http.HttpRequestParams,com.contextlogic.wish.http.HttpResponseHandler)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
%allinone
<java.net.HttpURLConnection: java.io.InputStream getInputStream()> -> _SOURCE_<com.logitech.harmonyhub.sdk.imp.BluetoothManager: boolean sendRequest(java.lang.String)> -> _SOURCE_
%<java.net.HttpURLConnection: java.io.InputStream getInputStream()> -> _SOURCE_
%<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)> -> _SOURCE_
<com.bamnetworks.mobile.android.lib.bamnet_services.data.DataRequest: java.lang.Object fetchSync()>-> _SOURCE_
%allinone
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
%<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_


%spotify
%<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_

%for dubsmash
%<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
%<com.mobilemotion.dubsmash.services.Backend: void createSoundBoard(java.lang.String,java.lang.String,java.lang.String,com.mobilemotion.dubsmash.services.Backend$BackendErrorListener,com.mobilemotion.dubsmash.events.BackendEvent)> -> _SOURCE_
%<com.mobilemotion.dubsmash.services.UserProvider: com.mobilemotion.dubsmash.events.PropertyCheckedEvent checkEmail(java.lang.String)> -> _SOURCE_

%for iheartRadio
%<com.squareup.okhttp.OkHttpClient: com.squareup.okhttp.Call newCall(com.squareup.okhttp.Request)> -> _SOURCE_
%<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
%<com.clearchannel.iheartradio.http.OkRequest$Builder: com.clearchannel.iheartradio.http.OkRequest build()> -> _SOURCE_
%<com.clearchannel.iheartradio.http.rest.FavoriteService: com.clearchannel.iheartradio.utils.operations.Operation execute(com.clearchannel.iheartradio.http.OkRequest,com.clearchannel.iheartradio.api.connection.AsyncCallback)> -> _SOURCE_

%pinterest
%<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
%<com.pinterest.api.remote.BoardApi: void a(java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
%<com.pinterest.api.remote.BoardApi: void a(java.lang.String,boolean,com.pinterest.api.remote.BoardApi$BoardFollowApiResponse,java.lang.String)> -> _SOURCE_
%<com.pinterest.api.ApiHttpClient: com.android.volley.Request put(java.lang.String,com.pinterest.api.BaseApiResponseHandler,java.lang.String)> -> _SOURCE_
%<com.pinterest.api.ApiHttpClient: void signedCall(java.lang.String,java.lang.String,java.util.Map,com.pinterest.api.BaseApiResponseHandler,java.util.Map,java.lang.String)> -> _SOURCE_
%<com.pinterest.api.ApiHttpClient: com.android.volley.Request get(java.lang.String,com.pinterest.api.BaseApiResponseHandler,java.lang.String)> -> _SOURCE_
%<com.pinterest.api.ApiHttpClient: com.android.volley.Request post(java.lang.String,com.pinterest.api.RequestParams,com.pinterest.api.BaseApiResponseHandler,boolean,java.lang.String,com.google.gson.JsonElement)> -> _SOURCE_

%for Wikipedia
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence,java.util.Map,boolean)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest form(java.util.Map)> -> _SOURCE_

%<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_

%<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()> -> _SOURCE_
%<org.apache.http.impl.client.BasicResponseHandler: java.lang.String handleResponse(org.apache.http.HttpResponse)> -> _SOURCE_

%<java.net.HttpURLConnection: java.io.InputStream getInputStream()> -> _SOURCE_

%<android.net.http.AndroidHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)> -> _SOURCE_

%<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_

%<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_

%<java.net.URL: java.io.InputStream openStream()> -> _SOURCE_

%<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriReFinish write jimplequest)> -> _SOURCE_
%<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_

%<com.squareup.okhttp.Request$Builder: com.squareup.okhttp.Request$Builder url(java.net.URL)> -> _SOURCE_
%<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
%<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)> -> _SOURCE_
%<java.net.HttpURLConnection: void connect()> -> _SOURCE_

%<java.net.URL: void <init>(java.lang.String)> -> _SOURCE_
%<org.apache.http.client.methods.HttpGet: void <init>(java.lang.String)> -> _SOURCE_
%<org.apache.http.client.methods.HttpPost: void <init>(java.lang.String)> -> _SOURCE_

%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: java.lang.String body()> -> _SOURCE_



% for accuweather / espn
%<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
%<java.net.HttpURLConnection: java.io.InputStream getInputStream()> -> _SOURCE_
%<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
%<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_

% for aol
%<com.aol.mobile.aolapp.util.Utils: java.lang.String readDataFromServer(java.lang.String)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_<com.logitech.harmonyhub.sdk.imp.BluetootheManager: boolean sendRequest(java.lang.String)> -> _SOURCE_
%<com.hulu.thorn.services.site.q: void g()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_<com.hulu.thorn.services.g: com.hulu.thorn.services.g a(java.lang.String,java.lang.String)> -> _SOURCE_
<com.hulu.thorn.services.g: void i()> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_
<retrofit.RestAdapter$Builder: retrofit.RestAdapter build()> -> _SOURCE_<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: com.squareup.okhttp.Call newCall(com.squareup.okhttp.Request)> -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
%<ch.boye.httpclientandroidlib.impl.client.DefaultHttpClient: ch.boye.httpclientandroidlib.HttpResponse execute(ch.boye.httpclientandroidlib.client.methods.HttpUriRequest)> -> _SOURCE_


%<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%all in one
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
%for dubsmash
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.mobilemotion.dubsmash.services.Backend: void createSoundBoard(java.lang.String,java.lang.String,java.lang.String,com.mobilemotion.dubsmash.services.Backend$BackendErrorListener,com.mobilemotion.dubsmash.events.BackendEvent)> -> _SOURCE_
<com.mobilemotion.dubsmash.services.UserProvider: com.mobilemotion.dubsmash.events.PropertyCheckedEvent checkEmail(java.lang.String)> -> _SOURCE_
%pinterest
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
%for Wikipedia
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence,java.util.Map,boolean)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest form(java.util.Map)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()> -> _SOURCE_
<org.apache.http.impl.client.BasicResponseHandler: java.lang.String handleResponse(org.apache.http.HttpResponse)> -> _SOURCE_
<java.net.HttpURLConnection: java.io.InputStream getInputStream()> -> _SOURCE_
<android.net.http.AndroidHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.io.InputStream openStream()> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriReFinish write jimplequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<com.squareup.okhttp.Request$Builder: com.squareup.okhttp.Request$Builder url(java.net.URL)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)> -> _SOURCE_
<java.net.HttpURLConnection: void connect()> -> _SOURCE_
<java.net.URL: void <init>(java.lang.String)> -> _SOURCE_
<org.apache.http.client.methods.HttpGet: void <init>(java.lang.String)> -> _SOURCE_
<org.apache.http.client.methods.HttpPost: void <init>(java.lang.String)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: java.lang.String body()> -> _SOURCE_
% for accuweather / espn
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<java.net.HttpURLConnection: java.io.InputStream getInputStream()> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
% for aol
<com.aol.mobile.aolapp.util.Utils: java.lang.String readDataFromServer(java.lang.String)> -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_<android.webkit.WebView: void loadUrl(java.lang.String,java.util.Map)> -> _SOURCE_<com.android.volley.p: com.android.volley.n a(com.android.volley.n)> -> _SOURCE_
%<com.contextlogic.wish.http.WishHttpClient: void request(com.contextlogic.wish.http.WishHttpClient$RequestPool,java.lang.Object,java.lang.String,com.contextlogic.wish.http.HttpRequest$RequestType,com.contextlogic.wish.http.HttpRequestParams,com.contextlogic.wish.http.HttpResponseHandler)> -> _SOURCE_

<com.contextlogic.wish.http.HttpRequest: void <init>(ch.boye.httpclientandroidlib.client.HttpClient,ch.boye.httpclientandroidlib.protocol.HttpContext,java.lang.String,com.contextlogic.wish.http.HttpRequest$RequestType,com.contextlogic.wish.http.HttpRequestParams,com.contextlogic.wish.http.HttpResponseHandler)> -> _SOURCE_

%origin dp
%<ch.boye.httpclientandroidlib.client.HttpClient: ch.boye.httpclientandroidlib.HttpResponse execute(ch.boye.httpclientandroidlib.client.methods.HttpUriRequest,ch.boye.httpclientandroidlib.protocol.HttpContext)> -> _SOURCE_

%<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.Future submit(java.lang.Runnable)> -> _SOURCE_<com.abtnprojects.ambatana.data.datasource.network.endpoints.UserService: rx.Observable getBlockUsers(java.lang.String,java.util.Map)> -> _SOURCE_
% new one
<org.chromium.net.UrlRequest: void start()> -> _SOURCE_

%<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_

%all in one
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
%<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
%<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
%<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
%<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
%<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_


%<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_

%for dubsmash
%<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
%<com.mobilemotion.dubsmash.services.Backend: void createSoundBoard(java.lang.String,java.lang.String,java.lang.String,com.mobilemotion.dubsmash.services.Backend$BackendErrorListener,com.mobilemotion.dubsmash.events.BackendEvent)> -> _SOURCE_
%<com.mobilemotion.dubsmash.services.UserProvider: com.mobilemotion.dubsmash.events.PropertyCheckedEvent checkEmail(java.lang.String)> -> _SOURCE_

%pinterest
%<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_

%for Wikipedia
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence,java.util.Map,boolean)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest form(java.util.Map)> -> _SOURCE_

%<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_

%<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()> -> _SOURCE_
%<org.apache.http.impl.client.BasicResponseHandler: java.lang.String handleResponse(org.apache.http.HttpResponse)> -> _SOURCE_

%<java.net.HttpURLConnection: java.io.InputStream getInputStream()> -> _SOURCE_
%<android.net.http.AndroidHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)> -> _SOURCE_

%<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
%<java.net.URL: java.io.InputStream openStream()> -> _SOURCE_
%<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriReFinish write jimplequest)> -> _SOURCE_
%<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_

%<com.squareup.okhttp.Request$Builder: com.squareup.okhttp.Request$Builder url(java.net.URL)> -> _SOURCE_
%<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
%<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)> -> _SOURCE_
%<java.net.HttpURLConnection: void connect()> -> _SOURCE_

%<java.net.URL: void <init>(java.lang.String)> -> _SOURCE_
%<org.apache.http.client.methods.HttpGet: void <init>(java.lang.String)> -> _SOURCE_
%<org.apache.http.client.methods.HttpPost: void <init>(java.lang.String)> -> _SOURCE_

%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: java.lang.String body()> -> _SOURCE_



% for accuweather / espn
%<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
%<java.net.HttpURLConnection: java.io.InputStream getInputStream()> -> _SOURCE_
%<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
%<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_

% for aol
%<com.aol.mobile.aolapp.util.Utils: java.lang.String readDataFromServer(java.lang.String)> -> _SOURCE_<com.contextlogic.wishlocal.http.WishHttpClient: com.squareup.okhttp.Call startRequest(com.squareup.okhttp.Request,com.squareup.okhttp.Callback)> -> _SOURCE_
<com.contextlogic.wishlocal.api.service.ApiService: com.squareup.okhttp.Call startService(com.contextlogic.wishlocal.api.ApiRequest,com.contextlogic.wishlocal.api.service.ApiService$ApiCallback)> -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: com.squareup.okhttp.Call newCall(com.squareup.okhttp.Request)>-> _SOURCE_
<me.lyft.android.infrastructure.api.BaseApi$2: void <init>(me.lyft.android.infrastructure.api.BaseApi,com.squareup.okhttp.Request$Builder,java.lang.Class)> -> _SOURCE_
<me.lyft.android.infrastructure.api.BaseApi$2: void <init>(me.lyft.android.infrastructure.api.BaseApi,com.squareup.okhttp.Request$Builder,java.lang.Class)> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
%<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
%<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
%<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
%<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
%<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
%<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
%<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_
%<retrofit.RestAdapter$Builder: retrofit.RestAdapter build()> -> _SOURCE_
<java.net.HttpURLConnection: java.io.InputStream getInputStream()> -> _SOURCE_
<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()> -> _SOURCE_<java.net.URLConnection: java.io.InputStream getInputStream()> -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
%<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
%<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
%<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
%<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
%<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
%<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
%<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_
%<retrofit.RestAdapter$Builder: retrofit.RestAdapter build()> -> _SOURCE_
<java.net.HttpURLConnection: java.io.InputStream getInputStream()> -> _SOURCE_
<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()> -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_<com.offerup.android.network.PaymentService: void submitIdentity(java.util.Map,retrofit.Callback)> -> _SOURCE_
<com.offerup.android.network.SearchService: void doSearchWithCallBack(int,int,java.util.Map,retrofit.Callback)> -> _SOURCE_
<com.offerup.android.network.CategoryService: void get(retrofit.Callback)> -> _SOURCE_
%allinone
<java.net.HttpURLConnection: java.io.InputStream getInputStream()> -> _SOURCE_
%allinone
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
%<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_

<com.path.base.BaseWebServiceClient: java.lang.Object a(com.path.base.util.MyHttpRequest,java.lang.Object,boolean)> -> _SOURCE_
<com.path.base.BaseWebServiceClient: void a(com.path.base.util.MyHttpRequest)> -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
%<com.pinterest.api.MultipartRequest: void <init>(int,java.lang.String,com.pinterest.api.RequestParams,java.util.Map,com.pinterest.api.BaseApiResponseHandler)> -> _SOURCE_<android.net.Uri: android.net.Uri parse(java.lang.String)> -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_<android.app.DownloadManager: long enqueue(android.app.DownloadManager$Request)> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
%<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
%<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
%<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
%<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
%<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
%<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
%<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_
%<retrofit.RestAdapter$Builder: retrofit.RestAdapter build()> -> _SOURCE_
<java.net.HttpURLConnection: java.io.InputStream getInputStream()> -> _SOURCE_
<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()> -> _SOURCE_<com.squareup.okhttp.OkHttpClient: com.squareup.okhttp.Call newCall(com.squareup.okhttp.Request)> -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
%allinone
<java.net.HttpURLConnection: java.io.InputStream getInputStream()> -> _SOURCE_<com.amazon.now.web.NowWebFragment: void loadUrl(java.lang.String)> -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
%<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
%<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
%<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
%<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
%<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
%<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_

<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
%<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
%<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
%<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
%<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
%<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
%<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_

<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_<com.retailmenot.android.i.j: com.retailmenot.android.i.j a(com.android.volley.s)> -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
%<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
%<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
%<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
%<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
%<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
%<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
%<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_
%<retrofit.RestAdapter$Builder: retrofit.RestAdapter build()> -> _SOURCE_
<java.net.HttpURLConnection: java.io.InputStream getInputStream()> -> _SOURCE_
<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()> -> _SOURCE_
%<com.soundcloud.android.api.ApiRequest$Builder: com.soundcloud.android.api.ApiRequest build()> -> _SOURCE_
<com.c.a.e: com.c.a.ac execute()> -> _SOURCE_
%allinone
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
%<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
%<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
%<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
%<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
%<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_


%spotify
%<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_

%for dubsmash
%<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
%<com.mobilemotion.dubsmash.services.Backend: void createSoundBoard(java.lang.String,java.lang.String,java.lang.String,com.mobilemotion.dubsmash.services.Backend$BackendErrorListener,com.mobilemotion.dubsmash.events.BackendEvent)> -> _SOURCE_
%<com.mobilemotion.dubsmash.services.UserProvider: com.mobilemotion.dubsmash.events.PropertyCheckedEvent checkEmail(java.lang.String)> -> _SOURCE_

%for iheartRadio
%<com.squareup.okhttp.OkHttpClient: com.squareup.okhttp.Call newCall(com.squareup.okhttp.Request)> -> _SOURCE_
%<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
%<com.clearchannel.iheartradio.http.OkRequest$Builder: com.clearchannel.iheartradio.http.OkRequest build()> -> _SOURCE_
%<com.clearchannel.iheartradio.http.rest.FavoriteService: com.clearchannel.iheartradio.utils.operations.Operation execute(com.clearchannel.iheartradio.http.OkRequest,com.clearchannel.iheartradio.api.connection.AsyncCallback)> -> _SOURCE_

%pinterest
%<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
%<com.pinterest.api.remote.BoardApi: void a(java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
%<com.pinterest.api.remote.BoardApi: void a(java.lang.String,boolean,com.pinterest.api.remote.BoardApi$BoardFollowApiResponse,java.lang.String)> -> _SOURCE_
%<com.pinterest.api.ApiHttpClient: com.android.volley.Request put(java.lang.String,com.pinterest.api.BaseApiResponseHandler,java.lang.String)> -> _SOURCE_
%<com.pinterest.api.ApiHttpClient: void signedCall(java.lang.String,java.lang.String,java.util.Map,com.pinterest.api.BaseApiResponseHandler,java.util.Map,java.lang.String)> -> _SOURCE_
%<com.pinterest.api.ApiHttpClient: com.android.volley.Request get(java.lang.String,com.pinterest.api.BaseApiResponseHandler,java.lang.String)> -> _SOURCE_
%<com.pinterest.api.ApiHttpClient: com.android.volley.Request post(java.lang.String,com.pinterest.api.RequestParams,com.pinterest.api.BaseApiResponseHandler,boolean,java.lang.String,com.google.gson.JsonElement)> -> _SOURCE_

%for Wikipedia
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence,java.util.Map,boolean)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest form(java.util.Map)> -> _SOURCE_

%<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_

%<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()> -> _SOURCE_
%<org.apache.http.impl.client.BasicResponseHandler: java.lang.String handleResponse(org.apache.http.HttpResponse)> -> _SOURCE_

%<java.net.HttpURLConnection: java.io.InputStream getInputStream()> -> _SOURCE_

%<android.net.http.AndroidHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)> -> _SOURCE_

%<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_

%<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_

%<java.net.URL: java.io.InputStream openStream()> -> _SOURCE_

%<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriReFinish write jimplequest)> -> _SOURCE_
%<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_

%<com.squareup.okhttp.Request$Builder: com.squareup.okhttp.Request$Builder url(java.net.URL)> -> _SOURCE_
%<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
%<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)> -> _SOURCE_
%<java.net.HttpURLConnection: void connect()> -> _SOURCE_

%<java.net.URL: void <init>(java.lang.String)> -> _SOURCE_
%<org.apache.http.client.methods.HttpGet: void <init>(java.lang.String)> -> _SOURCE_
%<org.apache.http.client.methods.HttpPost: void <init>(java.lang.String)> -> _SOURCE_

%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: java.lang.String body()> -> _SOURCE_



% for accuweather / espn
%<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
%<java.net.HttpURLConnection: java.io.InputStream getInputStream()> -> _SOURCE_
%<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
%<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_

% for aol
%<com.aol.mobile.aolapp.util.Utils: java.lang.String readDataFromServer(java.lang.String)> -> _SOURCE_
<com.abtnprojects.ambatana.data.datasource.network.endpoints.UserService: rx.Observable getBlockUsers(java.lang.String,java.util.Map)>
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_
%allinone
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
%<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<java.net.HttpURLConnection: java.io.InputStream getInputStream()> -> _SOURCE_<com.example.administrator.test.car: boolean opendoor(java.lang.String)> -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.h: com.android.volley.Request a(com.android.volley.Request)> -> _SOURCE_<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<rx.Observable: rx.Observable b(rx.Scheduler)> -> _SOURCE_<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<rx.Observable: rx.Observable b(rx.Scheduler)> -> _SOURCE_<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
%<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
%<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
%<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
%<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
%<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
%<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
%<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_
%<retrofit.RestAdapter$Builder: retrofit.RestAdapter build()> -> _SOURCE_
<java.net.HttpURLConnection: java.io.InputStream getInputStream()> -> _SOURCE_
<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()> -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_
%<com.tumblr.network.VolleyRequestAssembler: com.tumblr.network.request.JsonOAuthRequest assemble(com.tumblr.network.request.ApiRequest,com.android.volley.Response$Listener,com.android.volley.Response$ErrorListener)> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
%<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<com.android.volley.toolbox.JsonObjectRequest: void <init>(int,java.lang.String,org.json.JSONObject,com.android.volley.Response$Listener,com.android.volley.Response$ErrorListener)> -> _SOURCE_
%<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)> -> _SOURCE_
<com.tumblr.network.VolleyRequestAssembler: com.tumblr.network.request.JsonOAuthRequest assemble(com.tumblr.network.request.ApiRequest,com.android.volley.Response$Listener,com.android.volley.Response$ErrorListener)> -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_<android.net.http.AndroidHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)> -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
%<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
%<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
%<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
%<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
%<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
%<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
%<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_
%<retrofit.RestAdapter$Builder: retrofit.RestAdapter build()> -> _SOURCE_
<java.net.HttpURLConnection: java.io.InputStream getInputStream()> -> _SOURCE_
<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()> -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
%<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)> -> _SOURCE_
%<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)> -> _SOURCE_

<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
%<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
%<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
%<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
%<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
%<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
%<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
%<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_
%<retrofit.RestAdapter$Builder: retrofit.RestAdapter build()> -> _SOURCE_
<java.net.HttpURLConnection: java.io.InputStream getInputStream()> -> _SOURCE_
<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()> -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_
%New dp
%<com.contextlogic.wish.http.WishHttpClient: void request(com.contextlogic.wish.http.WishHttpClient$RequestPool,java.lang.Object,java.lang.String,com.contextlogic.wish.http.HttpRequest$RequestType,com.contextlogic.wish.http.HttpRequestParams,com.contextlogic.wish.http.HttpResponseHandler)> -> _SOURCE_
%<com.contextlogic.wish.http.HttpRequest: void <init>(ch.boye.httpclientandroidlib.client.HttpClient,ch.boye.httpclientandroidlib.protocol.HttpContext,java.lang.String,com.contextlogic.wish.http.HttpRequest$RequestType,com.contextlogic.wish.http.HttpRequestParams,com.contextlogic.wish.http.HttpResponseHandler)> -> _SOURCE_
%<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.Future submit(java.lang.Runnable)> -> _SOURCE_
%<com.contextlogic.wish.api.core.WishApi: com.contextlogic.wish.api.core.WishApiRequest apiRequest(java.lang.String,com.contextlogic.wish.http.HttpRequestParams,com.contextlogic.wish.api.core.WishApiCallback)> -> _SOURCE_
%<com.contextlogic.wish.http.WishHttpClient: void post(com.contextlogic.wish.http.WishHttpClient$RequestPool,java.lang.Object,java.lang.String,com.contextlogic.wish.http.HttpRequestParams,com.contextlogic.wish.http.HttpResponseHandler)> -> _SOURCE_
%<com.contextlogic.wish.http.WishHttpClient: void get(com.contextlogic.wish.http.WishHttpClient$RequestPool,java.lang.Object,java.lang.String,com.contextlogic.wish.http.HttpRequestParams,com.contextlogic.wish.http.HttpResponseHandler)> -> _SOURCE_


%Origin dp
<ch.boye.httpclientandroidlib.client.HttpClient: ch.boye.httpclientandroidlib.HttpResponse execute(ch.boye.httpclientandroidlib.client.methods.HttpUriRequest,ch.boye.httpclientandroidlib.protocol.HttpContext)> -> _SOURCE_
%<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.Future submit(java.lang.Runnable)> -> _SOURCE_

%For debugging
%<com.contextlogic.wish.ui.fragment.base.BaseContentFragment: void handleResume()> -> _SOURCE_
%<com.google.gson.GsonBuilder: com.google.gson.GsonBuilder excludeFieldsWithoutExposeAnnotation()> -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
%<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
%<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
%<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
%<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
%<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)>
%<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_
<com.airbnb.android.net.retrofit.RetrofitUtils: retrofit.ObservableRequest newRequest(retrofit.Retrofit,com.airbnb.android.requests.base.AirRequest)> -> _SOURCE_
%<com.android.volley.toolbox.RequestFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SOURCE_
%<retrofit.RestAdapter$Builder: retrofit.RestAdapter build()> -> _SOURCE_
<java.net.HttpURLConnection: java.io.InputStream getInputStream()> -> _SOURCE_
<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()> -> _SOURCE_<android.net.Uri: android.net.Uri parse(java.lang.String)> -> _SOURCE_
%<ayd: ayg a()> -> _SOURCE_
%<net.zedge.android.api.request.BaseApiRequest: java.util.concurrent.Future runInBackground(net.zedge.android.api.request.ApiRequest$Callback,boolean)> -> _SOURCE_
<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)> -> _SOURCE_<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
