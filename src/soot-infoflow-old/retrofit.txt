package com.tophatter.network;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.tophatter.impressions.ImpressionObject;
import com.tophatter.model.alert.AlertList;
import com.tophatter.model.alert.GroupedAlertList;
import com.tophatter.model.catalog.Catalog;
import com.tophatter.model.slot.Slot;
import com.tophatter.model.slot.SlotsGroups;
import com.tophatter.models.AdvanceBidPlacementResult;
import com.tophatter.models.Auction;
import com.tophatter.models.AuctionsWithBanners;
import com.tophatter.models.Bid;
import com.tophatter.models.CatalogAlert;
import com.tophatter.models.CatalogDetail;
import com.tophatter.models.CatalogGeneral;
import com.tophatter.models.CatalogGroup;
import com.tophatter.models.CatalogListItem;
import com.tophatter.models.CreditCard;
import com.tophatter.models.HatShakeResult;
import com.tophatter.models.HatShakeStatus;
import com.tophatter.models.Invoice;
import com.tophatter.models.Lot;
import com.tophatter.models.MailingAddress;
import com.tophatter.models.PromoCode;
import com.tophatter.models.RelatedProducts;
import com.tophatter.models.SearchRefine;
import com.tophatter.models.SearchResultV2;
import com.tophatter.models.SettingsSection;
import com.tophatter.models.SupportCase;
import com.tophatter.models.TimeZone;
import com.tophatter.models.User;
import com.tophatter.models.UserDetails;
import com.tophatter.models.containers.AlertsContainer;
import com.tophatter.models.containers.PeekRollcallContainer;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import retrofit.Callback;
import retrofit.http.Body;
import retrofit.http.DELETE;
import retrofit.http.Field;
import retrofit.http.FormUrlEncoded;
import retrofit.http.GET;
import retrofit.http.POST;
import retrofit.http.PUT;
import retrofit.http.Path;
import retrofit.http.Query;
import retrofit.http.QueryMap;
import rx.Observable;

abstract interface TophatterRestApi$TophatterRestApiSecureService
{
  @FormUrlEncoded
  @POST("/credit_cards/create_with_billing_address.json")
  public abstract Observable<List<CreditCard>> addCreditCard(@Field ("address1") String paramString1, @Field("city") String paramString2, @Field("state") String paramString3, @Field("country") String paramString4, @Field("number") String paramString5, @Field("expiration") String paramString6, @Field("expiration_month") String paramString7, @Field("expiration_year") String paramString8, @Field("cvv") String paramString9, @Field("zip") String paramString10, @Field("validated") Integer paramInteger);
  
  @FormUrlEncoded
  @POST("/mailing_addresses.json")
  public abstract Observable<List<MailingAddress>> addMailingAddress(@Field("address1") String paramString1, @Field("city") String paramString2, @Field("country") String paramString3, @Field("name") String paramString4, @Field("state") String paramString5, @Field("zip") String paramString6, @Field("validated") int paramInt);
  
  @POST("/{impressionUrl}")
  public abstract JsonObject createImpression(@Path(encode=false, value="impressionUrl") String paramString);
  
  @DELETE("/advance_bids/{lot_id}.json")
  public abstract Map<String, String> deleteAdvanceBid(@Path("lot_id") String paramString);
  
  @DELETE("/credit_cards/{token}.json")
  public abstract Observable<List<CreditCard>> deleteCreditCard(@Path("token") String paramString);
  
  @DELETE("/mailing_addresses/{id}.json")
  public abstract Observable<List<MailingAddress>> deleteMailingAddress(@Path("id") String paramString);
  
  @DELETE("/mailing_addresses/{id}.json")
  public abstract void deleteMailingAddress(@Path("id") String paramString, Callback<List<MailingAddress>> paramCallback);
  
  @DELETE("/alerts/{lot_id}.json")
  public abstract CatalogAlert destroyLotAlert(@Path("lot_id") String paramString);
  
  @DELETE("/alerts/{lot_id}.json")
  public abstract void destroyLotAlert(@Path("lot_id") String paramString, Callback<CatalogAlert> paramCallback);
  
  @FormUrlEncoded
  @PUT("/mailing_addresses/{id}.json")
  public abstract Observable<MailingAddress> editMailingAddress(@Path("id") String paramString1, @Field("address1") String paramString2, @Field("city") String paramString3, @Field("country") String paramString4, @Field("name") String paramString5, @Field("state") String paramString6, @Field("zip") String paramString7, @Field("validated") int paramInt);
  
  @GET("/{paginationUrl}")
  public abstract List<Slot> fetchPaginationUrl(@Path(encode=false, value="paginationUrl") String paramString);
  
  @GET("/alerts.json")
  public abstract AlertList getAlerts(@Query("group") int paramInt1, @Query("page") int paramInt2, @Query("per_page") int paramInt3);
  
  @GET("/alerts.json")
  public abstract GroupedAlertList getAlerts(@Query("group") int paramInt1, @Query("per_page") int paramInt2);
  
  @GET("/alerts/paginate.json?per_page=50&with_total=1")
  public abstract void getAlerts(@Query("page") int paramInt, Callback<AlertsContainer> paramCallback);
  
  @GET("/assets.json")
  public abstract JsonObject getAssets();
  
  @GET("/assets/options.json")
  public abstract List<SettingsSection> getAssetsOptions();
  
  @GET("/auctions/{auctionId}.json")
  public abstract void getAuction(@Path("auctionId") String paramString, Callback<Auction> paramCallback);
  
  @GET("/auctions/auctions_with_banners.json")
  public abstract Observable<AuctionsWithBanners> getAuctionGroups();
  
  @GET("/auctions/auctions_with_banners.json?onboarding=true")
  public abstract AuctionsWithBanners getAuctionGroupsForFirsttimeUser();
  
  @GET("/auctions/{auction_id}/lots.json")
  public abstract List<Lot> getAuctionLots(@Path("auction_id") String paramString);
  
  @GET("/auctions/{auction_id}/lots.json")
  public abstract void getAuctionLots(@Path("auction_id") String paramString, Callback<List<Lot>> paramCallback);
  
  @GET("/auctions/auctions_with_banners.json")
  public abstract AuctionsWithBanners getAuctionWithBannersGroups();
  
  @GET("/auctions/auctions_with_banners.json")
  public abstract AuctionsWithBanners getAuctions();
  
  @GET("/badge_notifications.json")
  public abstract JsonElement getBadgeCount();
  
  @FormUrlEncoded
  @POST("/invoices/buy_now_paypal_url.json")
  public abstract HashMap<String, String> getBuyNowPaypalUrl(@Query("lot_id") String paramString1, @Field("note") String paramString2, @Field("variation_id") String paramString3, @Field("source") String paramString4);
  
  @GET("/catalogs/{catalog_id}.json")
  public abstract Catalog getCatalog(@Path("catalog_id") String paramString, @Query("as_hash") boolean paramBoolean, @Query("page") int paramInt);
  
  @GET("/catalogs/{catalog_id}.json")
  public abstract void getCatalogDetail(@Path("catalog_id") String paramString, @Query("page") int paramInt, Callback<List<CatalogDetail>> paramCallback);
  
  @GET("/catalogs/{catalog_id}.json")
  public abstract Observable<CatalogGeneral> getCatalogGeneral(@Path("catalog_id") String paramString, @Query("as_hash") boolean paramBoolean, @Query("page") int paramInt);
  
  @GET("/catalogs/groups.json")
  public abstract Observable<List<CatalogGroup>> getCatalogGroups();
  
  @GET("/catalogs.json?request_cache=90")
  public abstract void getCatalogs(Callback<List<CatalogListItem>> paramCallback);
  
  @GET("/credit_cards")
  public abstract Observable<List<CreditCard>> getCreditCards();
  
  @GET("/hat_shakes/latest.json")
  public abstract HatShakeStatus getHatShake();
  
  @FormUrlEncoded
  @POST("/invoices/{invoice_id}/paypal_url.json")
  public abstract HashMap<String, String> getInvoicePaypalUrl(@Path("invoice_id") String paramString1, @Field("note") String paramString2, @Field("variation_id") String paramString3, @Field("source") String paramString4);
  
  @GET("/lots/{lotId}.json")
  public abstract Lot getLot(@Path("lotId") String paramString1, @Query("source") String paramString2);
  
  @GET("/lots/{lotId}.json")
  public abstract void getLot(@Path("lotId") String paramString1, @Query("source") String paramString2, Callback<Lot> paramCallback);
  
  @GET("/mailing_addresses.json")
  public abstract void getMailingAddresses(Callback<List<MailingAddress>> paramCallback);
  
  @GET("/users/{seller_id}/storefront.json")
  public abstract ArrayList<Lot> getMoreLotsFromSeller(@Path("seller_id") String paramString);
  
  @GET("/catalogs/navigation.json")
  public abstract List<CatalogGroup> getNewCatalogGroups();
  
  @GET("/users/orders.json")
  public abstract Map<String, List<Lot>> getOrders(@Query("page") int paramInt1, @Query("per_page") int paramInt2);
  
  @GET("/auctions/{auctionId}/peek_rollcall.json")
  public abstract void getPeekRollcall(@Path("auctionId") String paramString, Callback<PeekRollcallContainer> paramCallback);
  
  @GET("/auctions/peek_rollcall.json")
  public abstract void getPeekRollcall(Callback<PeekRollcallContainer> paramCallback);
  
  @GET("/search/popular.json")
  public abstract HashMap<String, ArrayList<String>> getPopularSearches();
  
  @GET("/search/filters.json?free_form_brand=1")
  public abstract SearchRefine getRefine();
  
  @GET("/similarities/{id}/related_products")
  public abstract RelatedProducts getRelatedProducts(@Path("id") String paramString1, @Query("context") String paramString2);
  
  @GET("/reports/reasons.json")
  public abstract ArrayList<String> getReportReasons();
  
  @GET("/catalogs/search.json")
  public abstract List<CatalogDetail> getSearchResult(@Query("q") String paramString, @Query("request_cache") int paramInt);
  
  @GET("/search/auto_complete.json")
  public abstract ArrayList<HashMap<String, String>> getSearchSuggestions(@QueryMap Map<String, String> paramMap);
  
  @GET("/slots/groups.json")
  public abstract SlotsGroups getSlotsGroups();
  
  @GET("/slots/groups.json{refreshParameters}")
  public abstract SlotsGroups getSlotsGroups(@Path(encode=false, value="refreshParameters") String paramString);
  
  @GET("/timezones")
  public abstract List<TimeZone> getTimezones();
  
  @GET("/auctions/{auctionId}/upcoming_lots.json")
  public abstract List<Lot> getUpcomingLotsForAuction(@Path("auctionId") String paramString);
  
  @GET("/auctions/{auctionId}/upcoming_lots.json")
  public abstract void getUpcomingLotsForAuction(@Path("auctionId") String paramString, Callback<List<Lot>> paramCallback);
  
  @GET("/users/{user_id}.json")
  public abstract UserDetails getUserDetails(@Path(encode=false, value="user_id") String paramString);
  
  @GET("/variants.json")
  public abstract Observable<Map<String, Boolean>> getVariants();
  
  @POST("/users/merge_accounts")
  public abstract SupportCase mergeAccounts(@Body Map<String, String[]> paramMap);
  
  @FormUrlEncoded
  @POST("/advance_bids.json")
  public abstract AdvanceBidPlacementResult postAdvanceBid(@Field("advance_bid[lot_id]") String paramString, @Field("advance_bid[amount]") int paramInt);
  
  @FormUrlEncoded
  @POST("/bids.json")
  public abstract Bid postBid(@Field("bid[lot_id]") String paramString1, @Field("bid[amount_local]") String paramString2, @Field("bid[confirmed]") int paramInt, @Field("bid[country") String paramString3);
  
  @FormUrlEncoded
  @POST("/bids.json")
  public abstract Bid postBid(@Field("bid[lot_id]") String paramString1, @Field("bid[amount_local]") String paramString2, @Field("bid[country") String paramString3);
  
  @POST("/lots/{lotId}/buy_now.json")
  public abstract Invoice postBuyNowStepOne(@Path("lotId") String paramString1, @Query("source") String paramString2);
  
  @POST("/badge_notifications/clear.json")
  public abstract JsonElement postClearBadge();
  
  @FormUrlEncoded
  @POST("/badge_notifications/clear.json")
  public abstract JsonElement postClearBadge(@Field("identifier") String paramString);
  
  @POST("/hat_shakes.json")
  public abstract HatShakeResult postHatShake();
  
  @POST("/impressions/bulk_create.json")
  public abstract JsonElement postImpressions(@Body Map<String, List<ImpressionObject>> paramMap);
  
  @FormUrlEncoded
  @POST("/inbox_messages.json")
  public abstract void postInboxMessage(@Field("recipient_id") String paramString1, @Field("body") String paramString2, Callback<JsonObject> paramCallback);
  
  @FormUrlEncoded
  @POST("/users/authenticate.json")
  public abstract User postLoginWithEmail(@Field("email") String paramString1, @Field("password") String paramString2);
  
  @FormUrlEncoded
  @POST("/users/authenticate.json")
  public abstract User postLoginWithFacebookToken(@Field("access_token") String paramString1, @Field("user[time_zone]") String paramString2);
  
  @FormUrlEncoded
  @POST("/users/authenticate.json")
  public abstract User postLoginWithGoogleToken(@Field("code") String paramString1, @Field("user[time_zone]") String paramString2);
  
  @FormUrlEncoded
  @POST("/users/authenticate.json")
  public abstract User postLoginWithToken(@Field("access_token") String paramString);
  
  @FormUrlEncoded
  @POST("/users/authenticate.json")
  public abstract User postLoginWithTokenRefresh(@Field("access_token") String paramString1, @Field("refresh_token") String paramString2);
  
  @POST("/alerts.json")
  public abstract CatalogAlert postLotAlert(@QueryMap Map<String, String> paramMap);
  
  @POST("/alerts.json")
  public abstract void postLotAlert(@QueryMap Map<String, String> paramMap, Callback<CatalogAlert> paramCallback);
  
  @FormUrlEncoded
  @POST("/users/validate_promo_code")
  public abstract PromoCode postPromoCode(@Field("code") String paramString);
  
  @FormUrlEncoded
  @POST("/users/authenticate.json")
  public abstract User postReauthenticate(@Field("user_secret") String paramString);
  
  @FormUrlEncoded
  @POST("/users/sign_up.json")
  public abstract User postSigninWithEmail(@Field("user[name]") String paramString1, @Field("user[email]") String paramString2, @Field("user[password]") String paramString3, @Field("user[promo_code]") String paramString4, @Field("user[time_zone]") String paramString5, @Field("user[country") String paramString6);
  
  @GET("/lots/{lotId}/buy_now.json")
  public abstract Invoice refreshBuyNow(@Path("lotId") String paramString, @QueryMap(encodeValues=false) Map<String, String> paramMap);
  
  @GET("/invoices/{invoiceId}/refresh_data.json")
  public abstract Invoice refreshInvoice(@Path("invoiceId") String paramString, @QueryMap(encodeValues=false) Map<String, String> paramMap);
  
  @GET("/{refreshUrl}")
  public abstract JsonObject refreshSlot(@Path(encode=false, value="refreshUrl") String paramString);
  
  @POST("/reports.json")
  public abstract Map<String, Object> reportThisItem(@QueryMap Map<String, String> paramMap);
  
  @FormUrlEncoded
  @POST("/users/reset_password.json")
  public abstract JsonElement resetPassword(@Field("email") String paramString);
  
  @GET("/search.json")
  public abstract SearchResultV2 searchWithParameters(@QueryMap Map<String, String> paramMap);
  
  @GET("/search.json")
  public abstract Observable<SearchResultV2> searchWithParametersFromRx(@QueryMap Map<String, String> paramMap);
  
  @POST("/auctions/{auction_id}/rsvp.json")
  public abstract HashMap<String, Integer> setAuctionReminderButton(@Path("auction_id") String paramString);
  
  @POST("/users/update_profile.json")
  public abstract User updateProfile(@QueryMap Map<String, String> paramMap);
}



/* Location:           D:\new_extractocol\tools\dex2jar-2.0\dex2jar-2.0\classes-dex2jar.jar

 * Qualified Name:     com.tophatter.network.TophatterRestApi.TophatterRestApiSecureService

 * JD-Core Version:    0.7.0.1

 */