%allinone
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
%<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
%<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
%<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
%<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
%<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<retrofit.ObservableRequest$Builder: retrofit.ObservableRequest build()> -> _SOURCE_


%spotify
%<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_

%for dubsmash
%<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
%<com.mobilemotion.dubsmash.services.Backend: void createSoundBoard(java.lang.String,java.lang.String,java.lang.String,com.mobilemotion.dubsmash.services.Backend$BackendErrorListener,com.mobilemotion.dubsmash.events.BackendEvent)> -> _SOURCE_
%<com.mobilemotion.dubsmash.services.UserProvider: com.mobilemotion.dubsmash.events.PropertyCheckedEvent checkEmail(java.lang.String)> -> _SOURCE_

%for iheartRadio
%<com.squareup.okhttp.OkHttpClient: com.squareup.okhttp.Call newCall(com.squareup.okhttp.Request)> -> _SOURCE_
%<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback)> -> _SOURCE_
%<com.clearchannel.iheartradio.http.OkRequest$Builder: com.clearchannel.iheartradio.http.OkRequest build()> -> _SOURCE_
%<com.clearchannel.iheartradio.http.rest.FavoriteService: com.clearchannel.iheartradio.utils.operations.Operation execute(com.clearchannel.iheartradio.http.OkRequest,com.clearchannel.iheartradio.api.connection.AsyncCallback)> -> _SOURCE_

%pinterest
%<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SOURCE_
%<com.pinterest.api.remote.BoardApi: void a(java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
%<com.pinterest.api.remote.BoardApi: void a(java.lang.String,boolean,com.pinterest.api.remote.BoardApi$BoardFollowApiResponse,java.lang.String)> -> _SOURCE_
%<com.pinterest.api.ApiHttpClient: com.android.volley.Request put(java.lang.String,com.pinterest.api.BaseApiResponseHandler,java.lang.String)> -> _SOURCE_
%<com.pinterest.api.ApiHttpClient: void signedCall(java.lang.String,java.lang.String,java.util.Map,com.pinterest.api.BaseApiResponseHandler,java.util.Map,java.lang.String)> -> _SOURCE_
%<com.pinterest.api.ApiHttpClient: com.android.volley.Request get(java.lang.String,com.pinterest.api.BaseApiResponseHandler,java.lang.String)> -> _SOURCE_
%<com.pinterest.api.ApiHttpClient: com.android.volley.Request post(java.lang.String,com.pinterest.api.RequestParams,com.pinterest.api.BaseApiResponseHandler,boolean,java.lang.String,com.google.gson.JsonElement)> -> _SOURCE_

%for Wikipedia
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence,java.util.Map,boolean)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest form(java.util.Map)> -> _SOURCE_

%<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_

%<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()> -> _SOURCE_
%<org.apache.http.impl.client.BasicResponseHandler: java.lang.String handleResponse(org.apache.http.HttpResponse)> -> _SOURCE_

%<java.net.HttpURLConnection: java.io.InputStream getInputStream()> -> _SOURCE_

%<android.net.http.AndroidHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)> -> _SOURCE_

%<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_

%<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_

%<java.net.URL: java.io.InputStream openStream()> -> _SOURCE_

%<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriReFinish write jimplequest)> -> _SOURCE_
%<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SOURCE_

%<com.squareup.okhttp.Request$Builder: com.squareup.okhttp.Request$Builder url(java.net.URL)> -> _SOURCE_
%<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_
%<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)> -> _SOURCE_
%<java.net.HttpURLConnection: void connect()> -> _SOURCE_

%<java.net.URL: void <init>(java.lang.String)> -> _SOURCE_
%<org.apache.http.client.methods.HttpGet: void <init>(java.lang.String)> -> _SOURCE_
%<org.apache.http.client.methods.HttpPost: void <init>(java.lang.String)> -> _SOURCE_

%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest get(java.lang.CharSequence)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: com.github.kevinsawicki.http.HttpRequest post(java.lang.CharSequence)> -> _SOURCE_
%<com.github.kevinsawicki.http.HttpRequest: java.lang.String body()> -> _SOURCE_



% for accuweather / espn
%<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
%<java.net.HttpURLConnection: java.io.InputStream getInputStream()> -> _SOURCE_
%<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)> -> _SOURCE_
%<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_
%<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SOURCE_

% for aol
%<com.aol.mobile.aolapp.util.Utils: java.lang.String readDataFromServer(java.lang.String)> -> _SOURCE_
