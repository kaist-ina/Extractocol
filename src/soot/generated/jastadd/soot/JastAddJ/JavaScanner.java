/* The following code was generated by JFlex 1.4 on 1/18/13 11:47 AM */

package soot.JastAddJ;

import beaver.Symbol;
import beaver.Scanner;
import soot.JastAddJ.JastAddJavaParser.Terminals;
import java.io.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4
 * on 1/18/13 11:47 AM from the specification file
 * <tt>/Users/eric/Documents/workspaces/clara-soot/JastAddExtensions/SootJastAddJ/soot/JastAddJ/JavaScanner.flex</tt>
 */
public final class JavaScanner extends Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 1;
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\101\1\3\1\1\1\0\1\3\1\2\14\101\1\102\1\101\4\0"+
    "\1\3\1\66\1\20\1\0\1\100\1\76\1\72\1\17\1\53\1\54"+
    "\1\5\1\74\1\62\1\13\1\11\1\4\1\6\3\6\4\22\2\10"+
    "\1\71\1\61\1\65\1\63\1\64\1\70\1\77\4\16\1\12\1\16"+
    "\5\100\1\7\3\100\1\15\7\100\1\14\2\100\1\57\1\21\1\60"+
    "\1\75\1\16\1\0\1\23\1\30\1\31\1\42\1\25\1\43\1\45"+
    "\1\37\1\40\1\100\1\35\1\33\1\46\1\34\1\32\1\47\1\100"+
    "\1\26\1\24\1\27\1\41\1\50\1\51\1\44\1\36\1\52\1\55"+
    "\1\73\1\56\1\67\41\101\2\0\4\100\4\0\1\100\2\0\1\101"+
    "\7\0\1\100\4\0\1\100\5\0\27\100\1\0\37\100\1\0\u013f\100"+
    "\31\0\162\100\4\0\14\100\16\0\5\100\11\0\1\100\21\0\130\101"+
    "\5\0\23\101\12\0\1\100\13\0\1\100\1\0\3\100\1\0\1\100"+
    "\1\0\24\100\1\0\54\100\1\0\46\100\1\0\5\100\4\0\202\100"+
    "\1\0\4\101\3\0\105\100\1\0\46\100\2\0\2\100\6\0\20\100"+
    "\41\0\46\100\2\0\1\100\7\0\47\100\11\0\21\101\1\0\27\101"+
    "\1\0\3\101\1\0\1\101\1\0\2\101\1\0\1\101\13\0\33\100"+
    "\5\0\3\100\15\0\4\101\14\0\6\101\13\0\32\100\5\0\13\100"+
    "\16\101\7\0\12\101\4\0\2\100\1\101\143\100\1\0\1\100\10\101"+
    "\1\0\6\101\2\100\2\101\1\0\4\101\2\100\12\101\3\100\2\0"+
    "\1\100\17\0\1\101\1\100\1\101\36\100\33\101\2\0\3\100\60\0"+
    "\46\100\13\101\1\100\u014f\0\3\101\66\100\2\0\1\101\1\100\20\101"+
    "\2\0\1\100\4\101\3\0\12\100\2\101\2\0\12\101\21\0\3\101"+
    "\1\0\10\100\2\0\2\100\2\0\26\100\1\0\7\100\1\0\1\100"+
    "\3\0\4\100\2\0\1\101\1\100\7\101\2\0\2\101\2\0\3\101"+
    "\11\0\1\101\4\0\2\100\1\0\3\100\2\101\2\0\12\101\4\100"+
    "\15\0\3\101\1\0\6\100\4\0\2\100\2\0\26\100\1\0\7\100"+
    "\1\0\2\100\1\0\2\100\1\0\2\100\2\0\1\101\1\0\5\101"+
    "\4\0\2\101\2\0\3\101\13\0\4\100\1\0\1\100\7\0\14\101"+
    "\3\100\14\0\3\101\1\0\11\100\1\0\3\100\1\0\26\100\1\0"+
    "\7\100\1\0\2\100\1\0\5\100\2\0\1\101\1\100\10\101\1\0"+
    "\3\101\1\0\3\101\2\0\1\100\17\0\2\100\2\101\2\0\12\101"+
    "\1\0\1\100\17\0\3\101\1\0\10\100\2\0\2\100\2\0\26\100"+
    "\1\0\7\100\1\0\2\100\1\0\5\100\2\0\1\101\1\100\6\101"+
    "\3\0\2\101\2\0\3\101\10\0\2\101\4\0\2\100\1\0\3\100"+
    "\4\0\12\101\1\0\1\100\20\0\1\101\1\100\1\0\6\100\3\0"+
    "\3\100\1\0\4\100\3\0\2\100\1\0\1\100\1\0\2\100\3\0"+
    "\2\100\3\0\3\100\3\0\10\100\1\0\3\100\4\0\5\101\3\0"+
    "\3\101\1\0\4\101\11\0\1\101\17\0\11\101\11\0\1\100\7\0"+
    "\3\101\1\0\10\100\1\0\3\100\1\0\27\100\1\0\12\100\1\0"+
    "\5\100\4\0\7\101\1\0\3\101\1\0\4\101\7\0\2\101\11\0"+
    "\2\100\4\0\12\101\22\0\2\101\1\0\10\100\1\0\3\100\1\0"+
    "\27\100\1\0\12\100\1\0\5\100\2\0\1\101\1\100\7\101\1\0"+
    "\3\101\1\0\4\101\7\0\2\101\7\0\1\100\1\0\2\100\4\0"+
    "\12\101\22\0\2\101\1\0\10\100\1\0\3\100\1\0\27\100\1\0"+
    "\20\100\4\0\6\101\2\0\3\101\1\0\4\101\11\0\1\101\10\0"+
    "\2\100\4\0\12\101\22\0\2\101\1\0\22\100\3\0\30\100\1\0"+
    "\11\100\1\0\1\100\2\0\7\100\3\0\1\101\4\0\6\101\1\0"+
    "\1\101\1\0\10\101\22\0\2\101\15\0\60\100\1\101\2\100\7\101"+
    "\4\0\10\100\10\101\1\0\12\101\47\0\2\100\1\0\1\100\2\0"+
    "\2\100\1\0\1\100\2\0\1\100\6\0\4\100\1\0\7\100\1\0"+
    "\3\100\1\0\1\100\1\0\1\100\2\0\2\100\1\0\4\100\1\101"+
    "\2\100\6\101\1\0\2\101\1\100\2\0\5\100\1\0\1\100\1\0"+
    "\6\101\2\0\12\101\2\0\2\100\42\0\1\100\27\0\2\101\6\0"+
    "\12\101\13\0\1\101\1\0\1\101\1\0\1\101\4\0\2\101\10\100"+
    "\1\0\42\100\6\0\24\101\1\0\2\101\4\100\4\0\10\101\1\0"+
    "\44\101\11\0\1\101\71\0\42\100\1\0\5\100\1\0\2\100\1\0"+
    "\7\101\3\0\4\101\6\0\12\101\6\0\6\100\4\101\106\0\46\100"+
    "\12\0\51\100\7\0\132\100\5\0\104\100\5\0\122\100\6\0\7\100"+
    "\1\0\77\100\1\0\1\100\1\0\4\100\2\0\7\100\1\0\1\100"+
    "\1\0\4\100\2\0\47\100\1\0\1\100\1\0\4\100\2\0\37\100"+
    "\1\0\1\100\1\0\4\100\2\0\7\100\1\0\1\100\1\0\4\100"+
    "\2\0\7\100\1\0\7\100\1\0\27\100\1\0\37\100\1\0\1\100"+
    "\1\0\4\100\2\0\7\100\1\0\47\100\1\0\23\100\16\0\11\101"+
    "\56\0\125\100\14\0\u026c\100\2\0\10\100\12\0\32\100\5\0\113\100"+
    "\3\0\3\100\17\0\15\100\1\0\4\100\3\101\13\0\22\100\3\101"+
    "\13\0\22\100\2\101\14\0\15\100\1\0\3\100\1\0\2\101\14\0"+
    "\64\100\40\101\3\0\1\100\3\0\2\100\1\101\2\0\12\101\41\0"+
    "\3\101\2\0\12\101\6\0\130\100\10\0\51\100\1\101\126\0\35\100"+
    "\3\0\14\101\4\0\14\101\12\0\12\101\36\100\2\0\5\100\u038b\0"+
    "\154\100\224\0\234\100\4\0\132\100\6\0\26\100\2\0\6\100\2\0"+
    "\46\100\2\0\6\100\2\0\10\100\1\0\1\100\1\0\1\100\1\0"+
    "\1\100\1\0\37\100\2\0\65\100\1\0\7\100\1\0\1\100\3\0"+
    "\3\100\1\0\7\100\3\0\4\100\2\0\6\100\4\0\15\100\5\0"+
    "\3\100\1\0\7\100\17\0\4\101\32\0\5\101\20\0\2\100\23\0"+
    "\1\100\13\0\4\101\6\0\6\101\1\0\1\100\15\0\1\100\40\0"+
    "\22\100\36\0\15\101\4\0\1\101\3\0\6\101\27\0\1\100\4\0"+
    "\1\100\2\0\12\100\1\0\1\100\3\0\5\100\6\0\1\100\1\0"+
    "\1\100\1\0\1\100\1\0\4\100\1\0\3\100\1\0\7\100\3\0"+
    "\3\100\5\0\5\100\26\0\44\100\u0e81\0\3\100\31\0\11\100\6\101"+
    "\1\0\5\100\2\0\5\100\4\0\126\100\2\0\2\101\2\0\3\100"+
    "\1\0\137\100\5\0\50\100\4\0\136\100\21\0\30\100\70\0\20\100"+
    "\u0200\0\u19b6\100\112\0\u51a6\100\132\0\u048d\100\u0773\0\u2ba4\100\134\0\u0800\100"+
    "\u1900\0\u012e\100\2\0\73\100\225\0\7\100\14\0\5\100\5\0\1\100"+
    "\1\101\12\100\1\0\15\100\1\0\5\100\1\0\1\100\1\0\2\100"+
    "\1\0\2\100\1\0\154\100\41\0\u016b\100\22\0\100\100\2\0\66\100"+
    "\50\0\15\100\3\0\20\101\20\0\4\101\17\0\2\100\30\0\3\100"+
    "\31\0\1\100\6\0\5\100\1\0\207\100\2\0\1\101\4\0\1\100"+
    "\13\0\12\101\7\0\32\100\4\0\1\100\1\0\32\100\12\0\132\100"+
    "\3\0\6\100\2\0\6\100\2\0\6\100\2\0\3\100\3\0\2\100"+
    "\3\0\2\100\22\0\3\101\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\1\1\11\20\6\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\2\41\1\42\1\1\1\2\1\0"+
    "\1\43\1\44\1\5\2\0\1\45\1\46\1\0\2\47"+
    "\1\0\31\6\1\50\2\6\1\51\12\6\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73"+
    "\1\74\1\71\1\75\1\76\1\77\1\100\1\101\1\0"+
    "\2\5\1\0\1\102\1\103\12\70\15\6\1\104\15\6"+
    "\1\105\2\6\1\106\4\6\1\107\12\6\1\110\1\111"+
    "\1\112\1\71\1\0\1\113\1\114\1\115\1\116\1\0"+
    "\1\117\1\120\1\121\1\122\1\123\10\6\1\124\1\125"+
    "\3\6\1\126\1\6\1\127\2\6\1\130\1\131\4\6"+
    "\1\132\1\133\1\6\1\134\10\6\1\135\5\6\1\136"+
    "\1\6\1\137\5\6\1\140\1\141\4\6\1\142\1\143"+
    "\1\6\1\144\1\6\1\145\7\6\1\146\1\147\5\6"+
    "\1\150\1\151\1\6\1\152\2\6\1\153\1\6\1\154"+
    "\1\6\1\155\2\6\1\156\2\6\1\157\2\6\1\160"+
    "\4\6\1\161\4\6\1\162\1\6\1\163\4\6\1\164"+
    "\1\165\1\166\1\6\1\167\1\6\1\170\1\171\2\6"+
    "\1\172\4\6\1\173\1\6\1\174\1\6\1\175\1\6"+
    "\1\176\1\6\1\177\1\200\1\6\1\201";

  private static int [] zzUnpackAction() {
    int [] result = new int[349];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\206\0\311\0\u010c\0\u014f\0\u0192"+
    "\0\u01d5\0\u0218\0\u025b\0\u029e\0\206\0\u02e1\0\u0324\0\u0367"+
    "\0\u03aa\0\u03ed\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f"+
    "\0\u05c2\0\u0605\0\u0648\0\u068b\0\u06ce\0\206\0\206\0\206"+
    "\0\206\0\206\0\206\0\206\0\206\0\u0711\0\u0754\0\u0797"+
    "\0\u07da\0\206\0\206\0\206\0\u081d\0\u0860\0\u08a3\0\u08e6"+
    "\0\u0929\0\206\0\206\0\u096c\0\206\0\u09af\0\206\0\u09f2"+
    "\0\u0a35\0\u0a78\0\206\0\206\0\u0abb\0\u0afe\0\u0b41\0\206"+
    "\0\206\0\u0b84\0\206\0\u0bc7\0\u0c0a\0\u0c4d\0\u0c90\0\u0cd3"+
    "\0\u0d16\0\u0d59\0\u0d9c\0\u0ddf\0\u0e22\0\u0e65\0\u0ea8\0\u0eeb"+
    "\0\u0f2e\0\u0f71\0\u0fb4\0\u0ff7\0\u103a\0\u107d\0\u10c0\0\u1103"+
    "\0\u1146\0\u1189\0\u11cc\0\u120f\0\u1252\0\u1295\0\u01d5\0\u12d8"+
    "\0\u131b\0\u135e\0\u13a1\0\u13e4\0\u1427\0\u146a\0\u14ad\0\u14f0"+
    "\0\u1533\0\u1576\0\u15b9\0\u15fc\0\206\0\206\0\u163f\0\206"+
    "\0\u1682\0\206\0\206\0\206\0\206\0\206\0\206\0\206"+
    "\0\206\0\206\0\206\0\u16c5\0\206\0\206\0\206\0\u1708"+
    "\0\206\0\206\0\206\0\206\0\206\0\u174b\0\u178e\0\u17d1"+
    "\0\u17d1\0\206\0\206\0\u1814\0\u1857\0\u189a\0\u18dd\0\u1920"+
    "\0\u1963\0\u19a6\0\u19e9\0\u1a2c\0\u1a6f\0\u1ab2\0\u1af5\0\u1b38"+
    "\0\u1b7b\0\u1bbe\0\u1c01\0\u1c44\0\u1c87\0\u1cca\0\u1d0d\0\u1d50"+
    "\0\u1d93\0\u1dd6\0\u01d5\0\u1e19\0\u1e5c\0\u1e9f\0\u1ee2\0\u1f25"+
    "\0\u1f68\0\u1fab\0\u1fee\0\u2031\0\u2074\0\u20b7\0\u20fa\0\u213d"+
    "\0\u01d5\0\u2180\0\u21c3\0\u2206\0\u2249\0\u228c\0\u22cf\0\u2312"+
    "\0\u01d5\0\u2355\0\u2398\0\u23db\0\u241e\0\u2461\0\u24a4\0\u24e7"+
    "\0\u252a\0\u256d\0\u25b0\0\206\0\u25f3\0\206\0\206\0\u1920"+
    "\0\206\0\206\0\206\0\206\0\u2636\0\206\0\206\0\206"+
    "\0\206\0\206\0\u2679\0\u26bc\0\u26ff\0\u2742\0\u2785\0\u27c8"+
    "\0\u280b\0\u284e\0\u01d5\0\u01d5\0\u2891\0\u28d4\0\u2917\0\u01d5"+
    "\0\u295a\0\u01d5\0\u299d\0\u29e0\0\u01d5\0\u01d5\0\u2a23\0\u2a66"+
    "\0\u2aa9\0\u2aec\0\u01d5\0\u01d5\0\u2b2f\0\u01d5\0\u2b72\0\u2bb5"+
    "\0\u2bf8\0\u2c3b\0\u2c7e\0\u2cc1\0\u2d04\0\u2d47\0\u01d5\0\u2d8a"+
    "\0\u2dcd\0\u2e10\0\u2e53\0\u2e96\0\u01d5\0\u2ed9\0\206\0\u2f1c"+
    "\0\u2f5f\0\u2fa2\0\u2fe5\0\u3028\0\u01d5\0\u01d5\0\u306b\0\u30ae"+
    "\0\u30f1\0\u3134\0\u3177\0\u01d5\0\u31ba\0\u01d5\0\u31fd\0\u01d5"+
    "\0\u3240\0\u3283\0\u32c6\0\u3309\0\u334c\0\u338f\0\u33d2\0\u01d5"+
    "\0\u3415\0\u3458\0\u349b\0\u34de\0\u3521\0\u3564\0\u01d5\0\u01d5"+
    "\0\u35a7\0\u01d5\0\u35ea\0\u362d\0\u01d5\0\u3670\0\u01d5\0\u36b3"+
    "\0\u01d5\0\u36f6\0\u3739\0\u01d5\0\u377c\0\u37bf\0\u01d5\0\u3802"+
    "\0\u3845\0\u01d5\0\u3888\0\u38cb\0\u390e\0\u3951\0\u01d5\0\u3994"+
    "\0\u39d7\0\u3a1a\0\u3a5d\0\u01d5\0\u3aa0\0\u01d5\0\u3ae3\0\u3b26"+
    "\0\u3b69\0\u3bac\0\u01d5\0\u01d5\0\u01d5\0\u3bef\0\u01d5\0\u3c32"+
    "\0\u01d5\0\u01d5\0\u3c75\0\u3cb8\0\u01d5\0\u3cfb\0\u3d3e\0\u3d81"+
    "\0\u3dc4\0\u01d5\0\u3e07\0\u01d5\0\u3e4a\0\u01d5\0\u3e8d\0\u01d5"+
    "\0\u3ed0\0\u01d5\0\u01d5\0\u3f13\0\u01d5";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[349];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\4\1\6\1\7\1\10\1\11"+
    "\1\10\1\12\1\11\1\13\3\11\1\14\1\15\1\3"+
    "\1\10\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\11\1\25\1\26\3\11\1\27\1\11\1\30\1\31"+
    "\1\11\1\32\1\11\1\33\1\34\1\35\1\11\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\11\1\3\1\63\1\64"+
    "\1\65\1\66\15\64\1\67\1\70\61\64\104\0\1\4"+
    "\105\0\1\71\1\72\55\0\1\73\102\0\1\74\25\0"+
    "\4\10\1\75\1\0\1\10\1\76\1\10\3\0\2\10"+
    "\1\0\1\75\2\0\2\10\1\0\1\10\6\0\3\10"+
    "\2\0\1\76\41\0\3\11\1\0\1\11\1\0\3\11"+
    "\3\0\31\11\25\0\3\11\6\0\1\10\1\0\1\10"+
    "\1\77\10\0\1\10\73\0\1\100\47\0\1\101\17\0"+
    "\1\102\1\103\1\104\14\102\1\0\1\102\1\105\61\102"+
    "\6\0\3\11\1\0\1\11\1\0\3\11\3\0\2\11"+
    "\1\106\3\11\1\107\22\11\25\0\3\11\6\0\3\11"+
    "\1\0\1\11\1\0\3\11\3\0\5\11\1\110\6\11"+
    "\1\111\1\112\1\11\1\113\7\11\1\114\1\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\11\11\1\115\1\116\7\11\1\117\6\11\25\0\3\11"+
    "\6\0\3\11\1\0\1\11\1\0\3\11\3\0\3\11"+
    "\1\120\25\11\25\0\3\11\6\0\3\11\1\0\1\11"+
    "\1\0\3\11\3\0\4\11\1\121\10\11\1\122\13\11"+
    "\25\0\3\11\6\0\3\11\1\0\1\11\1\0\3\11"+
    "\3\0\4\11\1\123\3\11\1\124\3\11\1\125\14\11"+
    "\25\0\3\11\6\0\3\11\1\0\1\11\1\0\3\11"+
    "\3\0\1\11\1\126\6\11\1\127\1\130\3\11\1\131"+
    "\13\11\25\0\3\11\6\0\3\11\1\0\1\11\1\0"+
    "\3\11\3\0\10\11\1\132\20\11\25\0\3\11\6\0"+
    "\3\11\1\0\1\11\1\0\3\11\3\0\1\11\1\133"+
    "\1\11\1\134\13\11\1\135\11\11\25\0\3\11\6\0"+
    "\3\11\1\0\1\11\1\0\3\11\3\0\12\11\1\136"+
    "\6\11\1\137\2\11\1\140\4\11\25\0\3\11\6\0"+
    "\3\11\1\0\1\11\1\0\3\11\3\0\3\11\1\141"+
    "\4\11\1\142\20\11\25\0\3\11\6\0\3\11\1\0"+
    "\1\11\1\0\3\11\3\0\1\11\1\143\6\11\1\144"+
    "\1\145\4\11\1\146\12\11\25\0\3\11\6\0\3\11"+
    "\1\0\1\11\1\0\3\11\3\0\10\11\1\147\20\11"+
    "\25\0\3\11\6\0\3\11\1\0\1\11\1\0\3\11"+
    "\3\0\1\11\1\150\2\11\1\151\12\11\1\152\11\11"+
    "\25\0\3\11\6\0\3\11\1\0\1\11\1\0\3\11"+
    "\3\0\10\11\1\153\20\11\25\0\3\11\6\0\3\11"+
    "\1\0\1\11\1\0\3\11\3\0\15\11\1\154\13\11"+
    "\25\0\3\11\63\0\1\155\102\0\1\156\1\157\101\0"+
    "\1\160\1\0\1\161\100\0\1\162\102\0\1\163\6\0"+
    "\1\164\73\0\1\165\7\0\1\166\72\0\1\167\10\0"+
    "\1\170\71\0\1\171\102\0\1\172\17\0\1\64\2\0"+
    "\15\64\2\0\61\64\1\0\1\65\101\0\1\173\1\0"+
    "\4\173\1\174\10\173\1\175\1\176\1\177\1\200\3\173"+
    "\1\201\1\202\1\203\3\173\1\204\6\173\1\205\37\173"+
    "\1\71\1\4\1\5\100\71\5\72\1\206\75\72\6\0"+
    "\4\10\1\75\1\207\1\10\1\76\1\10\3\0\2\10"+
    "\1\0\1\75\2\0\2\10\1\0\1\10\6\0\3\10"+
    "\2\0\1\76\24\0\1\207\14\0\1\210\1\0\1\210"+
    "\1\0\1\210\1\211\2\0\1\210\3\0\2\210\1\0"+
    "\1\210\2\0\2\210\10\0\2\210\30\0\1\211\17\0"+
    "\1\212\110\0\1\213\64\0\1\103\101\0\1\173\1\0"+
    "\4\173\1\214\10\173\1\215\1\216\1\217\1\220\3\173"+
    "\1\221\1\222\1\223\3\173\1\224\6\173\1\225\37\173"+
    "\6\0\3\11\1\0\1\11\1\0\3\11\3\0\2\11"+
    "\1\226\26\11\25\0\3\11\6\0\3\11\1\0\1\11"+
    "\1\0\3\11\3\0\2\11\1\227\26\11\25\0\3\11"+
    "\6\0\3\11\1\0\1\11\1\0\3\11\3\0\1\11"+
    "\1\230\2\11\1\231\24\11\25\0\3\11\6\0\3\11"+
    "\1\0\1\11\1\0\3\11\3\0\12\11\1\232\16\11"+
    "\25\0\3\11\6\0\3\11\1\0\1\11\1\0\3\11"+
    "\3\0\10\11\1\233\20\11\25\0\3\11\6\0\3\11"+
    "\1\0\1\11\1\0\3\11\3\0\25\11\1\234\3\11"+
    "\25\0\3\11\6\0\3\11\1\0\1\11\1\0\3\11"+
    "\3\0\16\11\1\235\12\11\25\0\3\11\6\0\3\11"+
    "\1\0\1\11\1\0\3\11\3\0\2\11\1\236\26\11"+
    "\25\0\3\11\6\0\3\11\1\0\1\11\1\0\3\11"+
    "\3\0\17\11\1\237\11\11\25\0\3\11\6\0\3\11"+
    "\1\0\1\11\1\0\3\11\3\0\5\11\1\240\23\11"+
    "\25\0\3\11\6\0\3\11\1\0\1\11\1\0\3\11"+
    "\3\0\5\11\1\241\23\11\25\0\3\11\6\0\3\11"+
    "\1\0\1\11\1\0\3\11\3\0\1\11\1\242\12\11"+
    "\1\243\2\11\1\244\11\11\25\0\3\11\6\0\3\11"+
    "\1\0\1\11\1\0\3\11\3\0\4\11\1\245\11\11"+
    "\1\246\12\11\25\0\3\11\6\0\3\11\1\0\1\11"+
    "\1\0\3\11\3\0\3\11\1\247\25\11\25\0\3\11"+
    "\6\0\3\11\1\0\1\11\1\0\3\11\3\0\10\11"+
    "\1\250\20\11\25\0\3\11\6\0\3\11\1\0\1\11"+
    "\1\0\3\11\3\0\5\11\1\251\23\11\25\0\3\11"+
    "\6\0\3\11\1\0\1\11\1\0\3\11\3\0\2\11"+
    "\1\252\2\11\1\253\23\11\25\0\3\11\6\0\3\11"+
    "\1\0\1\11\1\0\3\11\3\0\12\11\1\254\16\11"+
    "\25\0\3\11\6\0\3\11\1\0\1\11\1\0\3\11"+
    "\3\0\1\11\1\255\27\11\25\0\3\11\6\0\3\11"+
    "\1\0\1\11\1\0\3\11\3\0\1\11\1\256\27\11"+
    "\25\0\3\11\6\0\3\11\1\0\1\11\1\0\3\11"+
    "\3\0\12\11\1\257\16\11\25\0\3\11\6\0\3\11"+
    "\1\0\1\11\1\0\3\11\3\0\5\11\1\260\23\11"+
    "\25\0\3\11\6\0\3\11\1\0\1\11\1\0\3\11"+
    "\3\0\27\11\1\261\1\11\25\0\3\11\6\0\3\11"+
    "\1\0\1\11\1\0\3\11\3\0\11\11\1\262\17\11"+
    "\25\0\3\11\6\0\3\11\1\0\1\11\1\0\3\11"+
    "\3\0\2\11\1\263\2\11\1\264\23\11\25\0\3\11"+
    "\6\0\3\11\1\0\1\11\1\0\3\11\3\0\25\11"+
    "\1\265\3\11\25\0\3\11\6\0\3\11\1\0\1\11"+
    "\1\0\3\11\3\0\21\11\1\266\7\11\25\0\3\11"+
    "\6\0\3\11\1\0\1\11\1\0\3\11\3\0\17\11"+
    "\1\267\11\11\25\0\3\11\6\0\3\11\1\0\1\11"+
    "\1\0\3\11\3\0\11\11\1\270\17\11\25\0\3\11"+
    "\6\0\3\11\1\0\1\11\1\0\3\11\3\0\4\11"+
    "\1\271\24\11\25\0\3\11\6\0\3\11\1\0\1\11"+
    "\1\0\3\11\3\0\10\11\1\272\20\11\25\0\3\11"+
    "\6\0\3\11\1\0\1\11\1\0\3\11\3\0\12\11"+
    "\1\273\16\11\25\0\3\11\6\0\3\11\1\0\1\11"+
    "\1\0\3\11\3\0\5\11\1\274\23\11\25\0\3\11"+
    "\6\0\3\11\1\0\1\11\1\0\3\11\3\0\7\11"+
    "\1\275\21\11\25\0\3\11\6\0\3\11\1\0\1\11"+
    "\1\0\3\11\3\0\10\11\1\276\5\11\1\277\12\11"+
    "\25\0\3\11\6\0\3\11\1\0\1\11\1\0\3\11"+
    "\3\0\6\11\1\300\22\11\25\0\3\11\6\0\3\11"+
    "\1\0\1\11\1\0\3\11\3\0\11\11\1\301\4\11"+
    "\1\302\12\11\25\0\3\11\6\0\3\11\1\0\1\11"+
    "\1\0\3\11\3\0\16\11\1\303\12\11\25\0\3\11"+
    "\63\0\1\304\1\305\101\0\1\306\25\0\1\200\13\0"+
    "\1\200\66\0\1\307\13\0\1\307\60\0\4\72\1\4"+
    "\1\206\75\72\6\0\1\207\1\0\3\207\1\0\1\207"+
    "\1\0\1\207\3\0\2\207\1\0\1\207\2\0\2\207"+
    "\10\0\3\207\44\0\1\210\1\0\1\210\1\0\1\210"+
    "\3\0\1\210\3\0\2\210\1\0\1\210\2\0\2\210"+
    "\10\0\2\210\45\0\1\310\10\0\1\311\2\0\1\310"+
    "\77\0\1\312\102\0\1\313\102\0\1\314\71\0\1\315"+
    "\10\0\1\311\2\0\1\315\77\0\1\316\102\0\1\317"+
    "\102\0\1\320\102\0\1\321\102\0\1\322\71\0\3\11"+
    "\1\0\1\11\1\0\3\11\3\0\3\11\1\323\25\11"+
    "\25\0\3\11\6\0\3\11\1\0\1\11\1\0\3\11"+
    "\3\0\5\11\1\324\23\11\25\0\3\11\6\0\3\11"+
    "\1\0\1\11\1\0\3\11\3\0\5\11\1\325\23\11"+
    "\25\0\3\11\6\0\3\11\1\0\1\11\1\0\3\11"+
    "\3\0\16\11\1\326\12\11\25\0\3\11\6\0\3\11"+
    "\1\0\1\11\1\0\3\11\3\0\7\11\1\327\21\11"+
    "\25\0\3\11\6\0\3\11\1\0\1\11\1\0\3\11"+
    "\3\0\4\11\1\330\24\11\25\0\3\11\6\0\3\11"+
    "\1\0\1\11\1\0\3\11\3\0\3\11\1\331\25\11"+
    "\25\0\3\11\6\0\3\11\1\0\1\11\1\0\3\11"+
    "\3\0\5\11\1\332\23\11\25\0\3\11\6\0\3\11"+
    "\1\0\1\11\1\0\3\11\3\0\3\11\1\333\25\11"+
    "\25\0\3\11\6\0\3\11\1\0\1\11\1\0\3\11"+
    "\3\0\24\11\1\334\4\11\25\0\3\11\6\0\3\11"+
    "\1\0\1\11\1\0\3\11\3\0\3\11\1\335\25\11"+
    "\25\0\3\11\6\0\3\11\1\0\1\11\1\0\3\11"+
    "\3\0\17\11\1\336\11\11\25\0\3\11\6\0\3\11"+
    "\1\0\1\11\1\0\3\11\3\0\12\11\1\337\16\11"+
    "\25\0\3\11\6\0\3\11\1\0\1\11\1\0\3\11"+
    "\3\0\3\11\1\340\25\11\25\0\3\11\6\0\3\11"+
    "\1\0\1\11\1\0\3\11\3\0\10\11\1\341\20\11"+
    "\25\0\3\11\6\0\3\11\1\0\1\11\1\0\3\11"+
    "\3\0\2\11\1\342\26\11\25\0\3\11\6\0\3\11"+
    "\1\0\1\11\1\0\3\11\3\0\1\11\1\343\27\11"+
    "\25\0\3\11\6\0\3\11\1\0\1\11\1\0\3\11"+
    "\3\0\11\11\1\344\17\11\25\0\3\11\6\0\3\11"+
    "\1\0\1\11\1\0\3\11\3\0\3\11\1\345\25\11"+
    "\25\0\3\11\6\0\3\11\1\0\1\11\1\0\3\11"+
    "\3\0\3\11\1\346\25\11\25\0\3\11\6\0\3\11"+
    "\1\0\1\11\1\0\3\11\3\0\7\11\1\347\21\11"+
    "\25\0\3\11\6\0\3\11\1\0\1\11\1\0\3\11"+
    "\3\0\2\11\1\350\2\11\1\351\23\11\25\0\3\11"+
    "\6\0\3\11\1\0\1\11\1\0\3\11\3\0\2\11"+
    "\1\352\26\11\25\0\3\11\6\0\3\11\1\0\1\11"+
    "\1\0\3\11\3\0\4\11\1\353\24\11\25\0\3\11"+
    "\6\0\3\11\1\0\1\11\1\0\3\11\3\0\23\11"+
    "\1\354\5\11\25\0\3\11\6\0\3\11\1\0\1\11"+
    "\1\0\3\11\3\0\16\11\1\355\12\11\25\0\3\11"+
    "\6\0\3\11\1\0\1\11\1\0\3\11\3\0\11\11"+
    "\1\356\17\11\25\0\3\11\6\0\3\11\1\0\1\11"+
    "\1\0\3\11\3\0\5\11\1\357\23\11\25\0\3\11"+
    "\6\0\3\11\1\0\1\11\1\0\3\11\3\0\3\11"+
    "\1\360\25\11\25\0\3\11\6\0\3\11\1\0\1\11"+
    "\1\0\3\11\3\0\10\11\1\361\1\362\17\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\1\11\1\363\27\11\25\0\3\11\6\0\3\11\1\0"+
    "\1\11\1\0\3\11\3\0\6\11\1\364\22\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\2\11\1\244\26\11\25\0\3\11\6\0\3\11\1\0"+
    "\1\11\1\0\3\11\3\0\1\11\1\365\27\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\1\11\1\366\27\11\25\0\3\11\6\0\3\11\1\0"+
    "\1\11\1\0\3\11\3\0\10\11\1\367\20\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\13\11\1\370\15\11\25\0\3\11\6\0\3\11\1\0"+
    "\1\11\1\0\3\11\3\0\5\11\1\371\23\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\26\11\1\372\2\11\25\0\3\11\6\0\3\11\1\0"+
    "\1\11\1\0\3\11\3\0\11\11\1\373\17\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\1\11\1\374\27\11\25\0\3\11\6\0\3\11\1\0"+
    "\1\11\1\0\3\11\3\0\20\11\1\375\10\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\11\11\1\376\17\11\25\0\3\11\63\0\1\377\36\0"+
    "\1\311\71\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\4\11\1\u0100\24\11\25\0\3\11\6\0\3\11\1\0"+
    "\1\11\1\0\3\11\3\0\4\11\1\u0101\24\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\16\11\1\u0102\12\11\25\0\3\11\6\0\3\11\1\0"+
    "\1\11\1\0\3\11\3\0\7\11\1\u0103\21\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\15\11\1\u0104\13\11\25\0\3\11\6\0\3\11\1\0"+
    "\1\11\1\0\3\11\3\0\5\11\1\u0105\23\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\4\11\1\u0106\24\11\25\0\3\11\6\0\3\11\1\0"+
    "\1\11\1\0\3\11\3\0\7\11\1\u0107\21\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\12\11\1\u0108\16\11\25\0\3\11\6\0\3\11\1\0"+
    "\1\11\1\0\3\11\3\0\4\11\1\u0109\24\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\2\11\1\u010a\26\11\25\0\3\11\6\0\3\11\1\0"+
    "\1\11\1\0\3\11\3\0\27\11\1\u010b\1\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\13\11\1\u010c\15\11\25\0\3\11\6\0\3\11\1\0"+
    "\1\11\1\0\3\11\3\0\3\11\1\u010d\25\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\15\11\1\u010e\13\11\25\0\3\11\6\0\3\11\1\0"+
    "\1\11\1\0\3\11\3\0\5\11\1\367\23\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\16\11\1\u010f\12\11\25\0\3\11\6\0\3\11\1\0"+
    "\1\11\1\0\3\11\3\0\2\11\1\u0110\26\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\26\11\1\u0111\2\11\25\0\3\11\6\0\3\11\1\0"+
    "\1\11\1\0\3\11\3\0\1\11\1\u0112\27\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\4\11\1\u0113\24\11\25\0\3\11\6\0\3\11\1\0"+
    "\1\11\1\0\3\11\3\0\4\11\1\u0114\24\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\3\11\1\u0115\25\11\25\0\3\11\6\0\3\11\1\0"+
    "\1\11\1\0\3\11\3\0\17\11\1\u0116\11\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\11\11\1\u0117\17\11\25\0\3\11\6\0\3\11\1\0"+
    "\1\11\1\0\3\11\3\0\5\11\1\u0118\23\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\11\11\1\u0119\17\11\25\0\3\11\6\0\3\11\1\0"+
    "\1\11\1\0\3\11\3\0\1\11\1\u011a\27\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\3\11\1\u011b\25\11\25\0\3\11\6\0\3\11\1\0"+
    "\1\11\1\0\3\11\3\0\1\11\1\u011c\27\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\16\11\1\u011d\12\11\25\0\3\11\6\0\3\11\1\0"+
    "\1\11\1\0\3\11\3\0\5\11\1\u011e\23\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\3\11\1\u011f\25\11\25\0\3\11\6\0\3\11\1\0"+
    "\1\11\1\0\3\11\3\0\5\11\1\u0120\23\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\1\11\1\u0121\27\11\25\0\3\11\6\0\3\11\1\0"+
    "\1\11\1\0\3\11\3\0\7\11\1\u0122\21\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\5\11\1\u0123\23\11\25\0\3\11\6\0\3\11\1\0"+
    "\1\11\1\0\3\11\3\0\4\11\1\u0124\24\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\15\11\1\u0125\13\11\25\0\3\11\6\0\3\11\1\0"+
    "\1\11\1\0\3\11\3\0\20\11\1\u0126\10\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\12\11\1\u0127\16\11\25\0\3\11\6\0\3\11\1\0"+
    "\1\11\1\0\3\11\3\0\16\11\1\u0128\12\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\2\11\1\u0129\26\11\25\0\3\11\6\0\3\11\1\0"+
    "\1\11\1\0\3\11\3\0\1\11\1\u012a\27\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\12\11\1\u012b\16\11\25\0\3\11\6\0\3\11\1\0"+
    "\1\11\1\0\3\11\3\0\3\11\1\u012c\25\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\12\11\1\u012d\16\11\25\0\3\11\6\0\3\11\1\0"+
    "\1\11\1\0\3\11\3\0\21\11\1\u012e\7\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\5\11\1\u012f\23\11\25\0\3\11\6\0\3\11\1\0"+
    "\1\11\1\0\3\11\3\0\24\11\1\u0130\4\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\11\11\1\u0131\17\11\25\0\3\11\6\0\3\11\1\0"+
    "\1\11\1\0\3\11\3\0\3\11\1\u0132\25\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\11\11\1\u0133\17\11\25\0\3\11\6\0\3\11\1\0"+
    "\1\11\1\0\3\11\3\0\23\11\1\u0134\5\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\7\11\1\u0135\21\11\25\0\3\11\6\0\3\11\1\0"+
    "\1\11\1\0\3\11\3\0\5\11\1\u0136\23\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\7\11\1\u0137\21\11\25\0\3\11\6\0\3\11\1\0"+
    "\1\11\1\0\3\11\3\0\16\11\1\u0138\12\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\7\11\1\u0139\21\11\25\0\3\11\6\0\3\11\1\0"+
    "\1\11\1\0\3\11\3\0\21\11\1\u013a\7\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\10\11\1\u013b\20\11\25\0\3\11\6\0\3\11\1\0"+
    "\1\11\1\0\3\11\3\0\2\11\1\u013c\26\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\3\11\1\u013d\25\11\25\0\3\11\6\0\3\11\1\0"+
    "\1\11\1\0\3\11\3\0\12\11\1\u013e\16\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\17\11\1\u013f\11\11\25\0\3\11\6\0\3\11\1\0"+
    "\1\11\1\0\3\11\3\0\7\11\1\u0140\21\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\1\11\1\u0141\27\11\25\0\3\11\6\0\3\11\1\0"+
    "\1\11\1\0\3\11\3\0\3\11\1\u0142\25\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\5\11\1\u0143\23\11\25\0\3\11\6\0\3\11\1\0"+
    "\1\11\1\0\3\11\3\0\14\11\1\u0144\14\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\3\11\1\u0145\25\11\25\0\3\11\6\0\3\11\1\0"+
    "\1\11\1\0\3\11\3\0\5\11\1\u0146\23\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\3\11\1\u0147\25\11\25\0\3\11\6\0\3\11\1\0"+
    "\1\11\1\0\3\11\3\0\11\11\1\u0148\17\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\5\11\1\u0149\23\11\25\0\3\11\6\0\3\11\1\0"+
    "\1\11\1\0\3\11\3\0\25\11\1\u014a\3\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\12\11\1\u014b\16\11\25\0\3\11\6\0\3\11\1\0"+
    "\1\11\1\0\3\11\3\0\12\11\1\u014c\16\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\3\11\1\u014d\25\11\25\0\3\11\6\0\3\11\1\0"+
    "\1\11\1\0\3\11\3\0\3\11\1\u014e\25\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\7\11\1\u014f\21\11\25\0\3\11\6\0\3\11\1\0"+
    "\1\11\1\0\3\11\3\0\12\11\1\u0150\16\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\3\11\1\u0151\25\11\25\0\3\11\6\0\3\11\1\0"+
    "\1\11\1\0\3\11\3\0\3\11\1\u0152\25\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\16\11\1\u0153\12\11\25\0\3\11\6\0\3\11\1\0"+
    "\1\11\1\0\3\11\3\0\5\11\1\u0154\23\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\10\11\1\u0155\20\11\25\0\3\11\6\0\3\11\1\0"+
    "\1\11\1\0\3\11\3\0\3\11\1\u0156\25\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\5\11\1\u0157\23\11\25\0\3\11\6\0\3\11\1\0"+
    "\1\11\1\0\3\11\3\0\20\11\1\u0158\10\11\25\0"+
    "\3\11\6\0\3\11\1\0\1\11\1\0\3\11\3\0"+
    "\30\11\1\u0159\25\0\3\11\6\0\3\11\1\0\1\11"+
    "\1\0\3\11\3\0\21\11\1\u015a\7\11\25\0\3\11"+
    "\6\0\3\11\1\0\1\11\1\0\3\11\3\0\2\11"+
    "\1\u015b\26\11\25\0\3\11\6\0\3\11\1\0\1\11"+
    "\1\0\3\11\3\0\3\11\1\u015c\25\11\25\0\3\11"+
    "\6\0\3\11\1\0\1\11\1\0\3\11\3\0\20\11"+
    "\1\u015d\10\11\25\0\3\11";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16214];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\10\1\1\11\20\1\10\11\4\1\3\11"+
    "\5\1\2\11\1\1\1\11\1\1\1\11\2\1\1\0"+
    "\2\11\1\1\2\0\2\11\1\0\1\11\1\1\1\0"+
    "\47\1\2\11\1\1\1\11\1\1\12\11\1\1\3\11"+
    "\1\1\5\11\1\0\2\1\1\0\2\11\70\1\1\11"+
    "\1\1\2\11\1\0\4\11\1\0\5\11\54\1\1\11"+
    "\136\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[349];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the text position at the last accepting state */
  private int zzMarkedPos;

  /** the text position at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  StringBuffer strbuf = new StringBuffer(128);
  int sub_line;
  int sub_column;
  int strlit_start_line, strlit_start_column;

  private Symbol sym(short id) {
    return new Symbol(id, yyline + 1, yycolumn + 1, len(), str());
  }

  private Symbol sym(short id, String value) {
    return new Symbol(id, yyline + 1, yycolumn + 1, len(), value);
  }
  
  private Symbol sym(short id, String value, int start_line, int start_column, int len) {
    return new Symbol(id, start_line, start_column, len, value);
  }

  private String str() { return yytext(); }
  private int len() { return yylength(); }

  private void error(String msg) throws Scanner.Exception {
    throw new Scanner.Exception(yyline + 1, yycolumn + 1, msg);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JavaScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JavaScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1790) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a well-formed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol nextToken() throws java.io.IOException, Scanner.Exception {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 45: 
          { return sym(Terminals.LTEQ);
          }
        case 130: break;
        case 39: 
          { error("unterminated character literal at end of line");
          }
        case 131: break;
        case 70: 
          { return sym(Terminals.INT);
          }
        case 132: break;
        case 94: 
          { return sym(Terminals.VOID);
          }
        case 133: break;
        case 72: 
          { return sym(Terminals.RSHIFTEQ);
          }
        case 134: break;
        case 25: 
          { return sym(Terminals.AND);
          }
        case 135: break;
        case 114: 
          { return sym(Terminals.EXTENDS);
          }
        case 136: break;
        case 109: 
          { return sym(Terminals.THROWS);
          }
        case 137: break;
        case 78: 
          { return sym(Terminals.CHARACTER_LITERAL, "\\");
          }
        case 138: break;
        case 48: 
          { return sym(Terminals.ANDEQ);
          }
        case 139: break;
        case 55: 
          { return sym(Terminals.MODEQ);
          }
        case 140: break;
        case 113: 
          { return sym(Terminals.PUBLIC);
          }
        case 141: break;
        case 4: 
          { return sym(Terminals.MULT);
          }
        case 142: break;
        case 51: 
          { return sym(Terminals.OROR);
          }
        case 143: break;
        case 105: 
          { return sym(Terminals.ASSERT);
          }
        case 144: break;
        case 75: 
          { int val = Integer.parseInt(str().substring(2,len()-1),8);
			                             return sym(Terminals.CHARACTER_LITERAL, new Character((char)val).toString());
          }
        case 145: break;
        case 21: 
          { return sym(Terminals.NOT);
          }
        case 146: break;
        case 98: 
          { return sym(Terminals.THROW);
          }
        case 147: break;
        case 19: 
          { return sym(Terminals.GT);
          }
        case 148: break;
        case 33: 
          { error("unterminated string at end of line");
          }
        case 149: break;
        case 84: 
          { return sym(Terminals.ELSE);
          }
        case 150: break;
        case 18: 
          { return sym(Terminals.EQ);
          }
        case 151: break;
        case 62: 
          { strbuf.append( '\t' );
          }
        case 152: break;
        case 81: 
          { return sym(Terminals.CHARACTER_LITERAL, "\b");
          }
        case 153: break;
        case 32: 
          { strbuf.append(str());
          }
        case 154: break;
        case 11: 
          { return sym(Terminals.RPAREN);
          }
        case 155: break;
        case 41: 
          { return sym(Terminals.DO);
          }
        case 156: break;
        case 115: 
          { return sym(Terminals.BOOLEAN);
          }
        case 157: break;
        case 43: 
          { return sym(Terminals.GTEQ);
          }
        case 158: break;
        case 101: 
          { return sym(Terminals.CLASS);
          }
        case 159: break;
        case 92: 
          { return sym(Terminals.NULL_LITERAL);
          }
        case 160: break;
        case 93: 
          { return sym(Terminals.EOF);
          }
        case 161: break;
        case 35: 
          { return sym(Terminals.DIVEQ);
          }
        case 162: break;
        case 36: 
          { return sym(Terminals.MULTEQ);
          }
        case 163: break;
        case 119: 
          { return sym(Terminals.PRIVATE);
          }
        case 164: break;
        case 88: 
          { return sym(Terminals.BYTE);
          }
        case 165: break;
        case 20: 
          { return sym(Terminals.LT);
          }
        case 166: break;
        case 95: 
          { return sym(Terminals.URSHIFTEQ);
          }
        case 167: break;
        case 28: 
          { return sym(Terminals.XOR);
          }
        case 168: break;
        case 117: 
          { return sym(Terminals.FINALLY);
          }
        case 169: break;
        case 121: 
          { return sym(Terminals.STRICTFP);
          }
        case 170: break;
        case 83: 
          { return sym(Terminals.CHARACTER_LITERAL, "\f");
          }
        case 171: break;
        case 9: 
          { yybegin(STRING); 
  				   // remember start position of string literal so we can
				   // set its position correctly in the end
  				   strlit_start_line = yyline+1;
				   strlit_start_column = yycolumn+1;
  				   strbuf.setLength(0);
          }
        case 172: break;
        case 86: 
          { return sym(Terminals.BOOLEAN_LITERAL);
          }
        case 173: break;
        case 99: 
          { return sym(Terminals.BREAK);
          }
        case 174: break;
        case 64: 
          { strbuf.append( '\n' );
          }
        case 175: break;
        case 127: 
          { return sym(Terminals.INSTANCEOF);
          }
        case 176: break;
        case 44: 
          { return sym(Terminals.RSHIFT);
          }
        case 177: break;
        case 110: 
          { return sym(Terminals.NATIVE);
          }
        case 178: break;
        case 73: 
          { return sym(Terminals.URSHIFT);
          }
        case 179: break;
        case 57: 
          { strbuf.append((char)Integer.parseInt(str().substring(1),8));
          }
        case 180: break;
        case 53: 
          { return sym(Terminals.PLUSPLUS);
          }
        case 181: break;
        case 116: 
          { return sym(Terminals.DEFAULT);
          }
        case 182: break;
        case 112: 
          { return sym(Terminals.DOUBLE);
          }
        case 183: break;
        case 123: 
          { return sym(Terminals.VOLATILE);
          }
        case 184: break;
        case 54: 
          { return sym(Terminals.XOREQ);
          }
        case 185: break;
        case 26: 
          { return sym(Terminals.OR);
          }
        case 186: break;
        case 118: 
          { return sym(Terminals.PACKAGE);
          }
        case 187: break;
        case 107: 
          { return sym(Terminals.SWITCH);
          }
        case 188: break;
        case 10: 
          { return sym(Terminals.LPAREN);
          }
        case 189: break;
        case 46: 
          { return sym(Terminals.LSHIFT);
          }
        case 190: break;
        case 66: 
          { return sym(Terminals.ELLIPSIS);
          }
        case 191: break;
        case 42: 
          { return sym(Terminals.EQEQ);
          }
        case 192: break;
        case 38: 
          { return sym(Terminals.MINUSEQ);
          }
        case 193: break;
        case 122: 
          { return sym(Terminals.CONTINUE);
          }
        case 194: break;
        case 120: 
          { return sym(Terminals.ABSTRACT);
          }
        case 195: break;
        case 91: 
          { return sym(Terminals.LONG);
          }
        case 196: break;
        case 27: 
          { return sym(Terminals.PLUS);
          }
        case 197: break;
        case 82: 
          { return sym(Terminals.CHARACTER_LITERAL, "\n");
          }
        case 198: break;
        case 77: 
          { return sym(Terminals.CHARACTER_LITERAL, "\"");
          }
        case 199: break;
        case 16: 
          { return sym(Terminals.SEMICOLON);
          }
        case 200: break;
        case 15: 
          { return sym(Terminals.RBRACK);
          }
        case 201: break;
        case 103: 
          { return sym(Terminals.FINAL);
          }
        case 202: break;
        case 56: 
          { error("illegal escape sequence \""+str()+"\"");
          }
        case 203: break;
        case 111: 
          { return sym(Terminals.IMPORT);
          }
        case 204: break;
        case 87: 
          { return sym(Terminals.THIS);
          }
        case 205: break;
        case 61: 
          { strbuf.append( '\r' );
          }
        case 206: break;
        case 102: 
          { return sym(Terminals.FLOAT);
          }
        case 207: break;
        case 97: 
          { return sym(Terminals.SUPER);
          }
        case 208: break;
        case 85: 
          { return sym(Terminals.ENUM);
          }
        case 209: break;
        case 8: 
          { return sym(Terminals.MINUS);
          }
        case 210: break;
        case 63: 
          { strbuf.append( '\b' );
          }
        case 211: break;
        case 1: 
          { error("illegal character \""+str()+ "\"");
          }
        case 212: break;
        case 79: 
          { return sym(Terminals.CHARACTER_LITERAL, "\r");
          }
        case 213: break;
        case 40: 
          { return sym(Terminals.IF);
          }
        case 214: break;
        case 37: 
          { return sym(Terminals.MINUSMINUS);
          }
        case 215: break;
        case 126: 
          { return sym(Terminals.PROTECTED);
          }
        case 216: break;
        case 5: 
          { return sym(Terminals.NUMERIC_LITERAL);
          }
        case 217: break;
        case 59: 
          { strbuf.append( '\"' );
          }
        case 218: break;
        case 76: 
          { return sym(Terminals.CHARACTER_LITERAL, "\'");
          }
        case 219: break;
        case 80: 
          { return sym(Terminals.CHARACTER_LITERAL, "\t");
          }
        case 220: break;
        case 24: 
          { return sym(Terminals.COLON);
          }
        case 221: break;
        case 71: 
          { return sym(Terminals.FOR);
          }
        case 222: break;
        case 58: 
          { strbuf.append( '\'' );
          }
        case 223: break;
        case 90: 
          { return sym(Terminals.CHAR);
          }
        case 224: break;
        case 60: 
          { strbuf.append( '\\' );
          }
        case 225: break;
        case 13: 
          { return sym(Terminals.RBRACE);
          }
        case 226: break;
        case 67: 
          { return sym(Terminals.CHARACTER_LITERAL, str().substring(1, len()-1));
          }
        case 227: break;
        case 69: 
          { return sym(Terminals.NEW);
          }
        case 228: break;
        case 14: 
          { return sym(Terminals.LBRACK);
          }
        case 229: break;
        case 22: 
          { return sym(Terminals.COMP);
          }
        case 230: break;
        case 3: 
          { return sym(Terminals.DIV);
          }
        case 231: break;
        case 125: 
          { return sym(Terminals.INTERFACE);
          }
        case 232: break;
        case 23: 
          { return sym(Terminals.QUESTION);
          }
        case 233: break;
        case 124: 
          { return sym(Terminals.TRANSIENT);
          }
        case 234: break;
        case 49: 
          { return sym(Terminals.ANDAND);
          }
        case 235: break;
        case 47: 
          { return sym(Terminals.NOTEQ);
          }
        case 236: break;
        case 29: 
          { return sym(Terminals.MOD);
          }
        case 237: break;
        case 104: 
          { return sym(Terminals.WHILE);
          }
        case 238: break;
        case 74: 
          { return sym(Terminals.LSHIFTEQ);
          }
        case 239: break;
        case 31: 
          { if(sub_line == 0 && sub_column == 0) {
                                     sub_line = yyline; sub_column = yycolumn;
                                   }
          }
        case 240: break;
        case 52: 
          { return sym(Terminals.PLUSEQ);
          }
        case 241: break;
        case 65: 
          { strbuf.append( '\f' );
          }
        case 242: break;
        case 100: 
          { return sym(Terminals.CATCH);
          }
        case 243: break;
        case 17: 
          { return sym(Terminals.COMMA);
          }
        case 244: break;
        case 129: 
          { return sym(Terminals.SYNCHRONIZED);
          }
        case 245: break;
        case 50: 
          { return sym(Terminals.OREQ);
          }
        case 246: break;
        case 108: 
          { return sym(Terminals.RETURN);
          }
        case 247: break;
        case 68: 
          { return sym(Terminals.TRY);
          }
        case 248: break;
        case 6: 
          { return sym(Terminals.IDENTIFIER);
          }
        case 249: break;
        case 89: 
          { return sym(Terminals.CASE);
          }
        case 250: break;
        case 12: 
          { return sym(Terminals.LBRACE);
          }
        case 251: break;
        case 34: 
          { yybegin(YYINITIAL); 
                                   return sym(Terminals.STRING_LITERAL, strbuf.toString(), strlit_start_line, strlit_start_column, strbuf.length()+2);
          }
        case 252: break;
        case 128: 
          { return sym(Terminals.IMPLEMENTS);
          }
        case 253: break;
        case 106: 
          { return sym(Terminals.STATIC);
          }
        case 254: break;
        case 30: 
          { return sym(Terminals.AT);
          }
        case 255: break;
        case 7: 
          { return sym(Terminals.DOT);
          }
        case 256: break;
        case 96: 
          { return sym(Terminals.SHORT);
          }
        case 257: break;
        case 2: 
          { 
          }
        case 258: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { // detect position of first SUB character
                                   if(!(sub_line == 0 && sub_column == 0) && (sub_line != yyline || sub_column != yycolumn-1)) {
                                     // reset to only return error once
                                     sub_line = 0;
                                     sub_column = 0;
                                     // return error
                                     error("error");
                                   }
                                   return sym(Terminals.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
