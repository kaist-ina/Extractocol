<?xml version="1.0" encoding="UTF-8"?>

<project xmlns:ivy="antlib:org.apache.ivy.ant" name="heros" default="jar">
    <property file="ant.settings"/>

	<property name="ivy.install.version" value="2.1.0" />
	<property name="ivy.jar.version" value="2.1.0" />
	
	<condition property="ivy.home" value="${env.IVY_HOME}">
		<isset property="env.IVY_HOME" />
	</condition>
	<property name="ivy.home" value="${user.home}/.ivy2" />
	<property name="ivy.jar.dir" value="${ivy.home}/lib" />
	<property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />

    <target name="settings">
        <fail
            message="Please copy ant.settings.template to ant.settings, and set the variables in it."
            unless="guava.jar"
        />
    </target>
	
	<target name="classesjar" depends="compile">
    	<jar destfile="./herosclasses-${heros.version}.jar" manifest="META-INF/MANIFEST.MF">
            <manifest>
               <attribute name="Implementation-Version" value="${heros.version}"/> 
            </manifest>
            <fileset dir="./build/classes"/>
        </jar>
    </target>
    	
	<target name="jar" depends="classesjar">
    	<jar destfile="./heros-${heros.version}.jar" manifest="META-INF/MANIFEST.MF">
            <manifest>
               <attribute name="Implementation-Version" value="${heros.version}"/> 
            </manifest>
            <zipfileset src="./herosclasses-${heros.version}.jar"/>
            <zipfileset src="${guava.jar}"/>
            <zipfileset src="${slf4j-api.jar}"/>
            <zipfileset src="${slf4j-simple.jar}"/>
        </jar>
    </target>

	<target name="compile">
    	<mkdir dir="build/classes"/>
        <javac
            destdir="build/classes"
            debug="true"
	    includeantruntime="true"
            deprecation="on"
        	source="1.6"
        	target="1.6"
        	fork="true"
        	memorymaximumsize="512m"
        >
        	<classpath>
        		<pathelement location="${guava.jar}"/>
        		<pathelement location="${slf4j-api.jar}"/>
        		<pathelement location="${slf4j-simple.jar}"/>
        	</classpath>
            <src path="src"/>
        </javac>
	</target>

	<target name="compiletests" depends="settings,compile">
		<mkdir dir="build/testclasses" />
		<javac srcdir="test" includeantruntime="true" source="1.7" target="1.7" destdir="build/testclasses" debug="true">
			<classpath>
				<pathelement location="build/classes" />
	       		<pathelement location="${guava.jar}"/>
        		<pathelement location="${junit.jar}"/>
	       		<pathelement location="${mockito.jar}"/>
	       		<pathelement location="${hamcrest.jar}"/>
	       		<pathelement location="${slf4j-api.jar}"/>
	       		<pathelement location="${slf4j-simple.jar}"/>
			</classpath>
		</javac>
	</target>

	<target name="testjar" depends="settings,compiletests">

	    	<jar destfile="./herostests-${heros.version}.jar" >
	            <fileset dir="build/testclasses"/>
	        </jar>

	</target>

	<target name="runtests" depends="compiletests">
		<mkdir dir="reports" />
		<junit printsummary="yes" fork="true" maxmemory="4G">
			<classpath>
        		<pathelement location="${guava.jar}"/>
        		<pathelement location="${junit.jar}"/>
	       		<pathelement location="${mockito.jar}"/>
	       		<pathelement location="${hamcrest.jar}"/>
	       		<pathelement location="${slf4j-api.jar}"/>
	       		<pathelement location="${slf4j-simple.jar}"/>
	       		
	       		<pathelement location="build/classes" />
				<pathelement location="build/testclasses" />
			</classpath>
			
			<jvmarg value="-ea" />
			
			<!-- Make stuff debuggable -->
			<!--
			<jvmarg value="-Xdebug" />
			<jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5432" />
			-->

			<formatter type="xml" usefile="true" />
			<batchtest todir="reports">
				<!--
					We only run our own tests. SecuriBench Micro relies on too much stuff
					we exclude.
				-->
				<fileset dir="build/testclasses" includes="heros/**/*Test.class" />
			</batchtest>
		</junit>
	</target>

	<target name="reporttests" depends="runtests">
		<junitreport tofile="TESTS-TestSuites.xml" todir="reports">
			<fileset dir="reports">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="reports" />
		</junitreport>
	</target>
    
    <target name="javadoc">
        <javadoc
            classpath="build/classes"
            sourcepath="src"
			destdir="javadoc"
            maxmemory="400m"
            link="${javaapi.url}"
            windowtitle="Heros API"
            use="true"
            useexternalfile="true"
        >
            <fileset dir="src" includes="**/*.java"/>
        </javadoc>
		<jar basedir="javadoc" destfile="herosjavadoc-${heros.version}.jar" />
	</target>
	
	<target name="sourcejar">
        <jar destfile="herossources-${heros.version}.jar">
            <fileset dir="src"/>
        </jar>
	</target>


	<!-- IVY RELATED TARGETS -->

	<target name="download-ivy" unless="offline">

		<mkdir dir="${ivy.jar.dir}" />
		<!-- download Ivy from web site so that it can be used even without any special installation -->
		<get src="https://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
			 dest="${ivy.jar.file}" usetimestamp="true" />
	</target>

	<target name="init-ivy" depends="download-ivy">
		<!-- try to load ivy here from ivy home, in case the user has not already dropped
                it into ant's lib dir (note that the latter copy will always take precedence).
                We will not fail as long as local lib dir exists (it may be empty) and
                ivy is in at least one of ant's lib dir or the local lib dir. -->
		<path id="ivy.lib.path">
			<fileset dir="${ivy.jar.dir}" includes="*.jar" />

		</path>
		<taskdef resource="org/apache/ivy/ant/antlib.xml"
				 uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path" />
	</target>
	
	<target name="gen-pom" depends="init-ivy">
		<ivy:makepom ivyfile="ivy.xml" pomfile="${ant.project.name}-${heros.version}.pom">
			<mapping conf="default" scope="compile" />
		</ivy:makepom>
	</target>

	<target name="publish-local" depends="init-ivy, gen-pom, jar, classesjar, sourcejar, javadoc">
		<ivy:resolve/>
		<ivy:publish pubrevision="${heros.version}" status="release" resolver="local" overwrite="true">
			<artifacts pattern="[artifact]-[revision].[ext]" />
		</ivy:publish>
	</target>
	
	<target name="publish-local-maven" depends="init-ivy, gen-pom, jar, classesjar, sourcejar, javadoc" description="publish jar/source to maven repo mounted at ~/.m2/repository">
		<ivy:resolve/>
		<ivy:publish pubrevision="${heros.version}" resolver="local-m2-publish" forcedeliver="true" overwrite="true" publishivy="false">
			<artifacts pattern="[artifact]-[revision].[ext]" />
		</ivy:publish>
	</target>

</project>
