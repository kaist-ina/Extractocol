public abstract class java.nio.IntBuffer extends java.nio.Buffer implements java.lang.Comparable
{

    void <init>()
    {
        java.nio.IntBuffer r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.nio.IntBuffer;

        specialinvoke r0.<java.nio.Buffer: void <init>()>();

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public static java.nio.IntBuffer allocate(int)
    {
        int i0;
        java.lang.RuntimeException $r0;

        i0 := @parameter0: int;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static java.nio.IntBuffer wrap(int[])
    {
        int[] r0;
        java.lang.RuntimeException $r1;

        r0 := @parameter0: int[];

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public static java.nio.IntBuffer wrap(int[], int, int)
    {
        int[] r0;
        int i0, i1;
        java.lang.RuntimeException $r1;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public final int[] array()
    {
        java.nio.IntBuffer r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.nio.IntBuffer;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public final int arrayOffset()
    {
        java.nio.IntBuffer r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.nio.IntBuffer;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public abstract java.nio.IntBuffer asReadOnlyBuffer();

    public abstract java.nio.IntBuffer compact();

    public int compareTo(java.nio.IntBuffer)
    {
        java.nio.IntBuffer r0, r1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.nio.IntBuffer;

        r1 := @parameter0: java.nio.IntBuffer;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public abstract java.nio.IntBuffer duplicate();

    public boolean equals(java.lang.Object)
    {
        java.nio.IntBuffer r0;
        java.lang.Object r1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.nio.IntBuffer;

        r1 := @parameter0: java.lang.Object;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public abstract int get();

    public java.nio.IntBuffer get(int[])
    {
        java.nio.IntBuffer r0;
        int[] r1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.nio.IntBuffer;

        r1 := @parameter0: int[];

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public java.nio.IntBuffer get(int[], int, int)
    {
        java.nio.IntBuffer r0;
        int[] r1;
        int i0, i1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.nio.IntBuffer;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public abstract int get(int);

    public final boolean hasArray()
    {
        java.nio.IntBuffer r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.nio.IntBuffer;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public int hashCode()
    {
        java.nio.IntBuffer r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.nio.IntBuffer;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public abstract boolean isDirect();

    public abstract java.nio.ByteOrder order();

    public abstract java.nio.IntBuffer put(int);

    public final java.nio.IntBuffer put(int[])
    {
        java.nio.IntBuffer r0;
        int[] r1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.nio.IntBuffer;

        r1 := @parameter0: int[];

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public java.nio.IntBuffer put(int[], int, int)
    {
        java.nio.IntBuffer r0;
        int[] r1;
        int i0, i1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.nio.IntBuffer;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public java.nio.IntBuffer put(java.nio.IntBuffer)
    {
        java.nio.IntBuffer r0, r1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.nio.IntBuffer;

        r1 := @parameter0: java.nio.IntBuffer;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public abstract java.nio.IntBuffer put(int, int);

    public abstract java.nio.IntBuffer slice();

    public volatile java.lang.Object array()
    {
        java.nio.IntBuffer r0;
        int[] $r1;

        r0 := @this: java.nio.IntBuffer;

        $r1 = virtualinvoke r0.<java.nio.IntBuffer: int[] array()>();

        return $r1;
    }

    public volatile int compareTo(java.lang.Object)
    {
        java.nio.IntBuffer r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: java.nio.IntBuffer;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.nio.IntBuffer) r1;

        $i0 = virtualinvoke r0.<java.nio.IntBuffer: int compareTo(java.nio.IntBuffer)>($r2);

        return $i0;
    }
}
