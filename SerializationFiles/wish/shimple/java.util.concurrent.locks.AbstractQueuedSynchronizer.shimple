public abstract class java.util.concurrent.locks.AbstractQueuedSynchronizer extends java.util.concurrent.locks.AbstractOwnableSynchronizer implements java.io.Serializable
{

    protected void <init>()
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer;

        specialinvoke r0.<java.util.concurrent.locks.AbstractOwnableSynchronizer: void <init>()>();

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    protected final int getState()
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    protected final void setState(int)
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer r0;
        int i0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer;

        i0 := @parameter0: int;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    protected final boolean compareAndSetState(int, int)
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer r0;
        int i0, i1;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    protected boolean tryAcquire(int)
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer r0;
        int i0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer;

        i0 := @parameter0: int;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    protected boolean tryRelease(int)
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer r0;
        int i0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer;

        i0 := @parameter0: int;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    protected int tryAcquireShared(int)
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer r0;
        int i0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer;

        i0 := @parameter0: int;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    protected boolean tryReleaseShared(int)
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer r0;
        int i0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer;

        i0 := @parameter0: int;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    protected boolean isHeldExclusively()
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public final void acquire(int)
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer r0;
        int i0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer;

        i0 := @parameter0: int;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public final void acquireInterruptibly(int) throws java.lang.InterruptedException
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer r0;
        int i0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer;

        i0 := @parameter0: int;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public final boolean tryAcquireNanos(int, long) throws java.lang.InterruptedException
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer r0;
        int i0;
        long l1;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public final boolean release(int)
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer r0;
        int i0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer;

        i0 := @parameter0: int;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public final void acquireShared(int)
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer r0;
        int i0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer;

        i0 := @parameter0: int;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public final void acquireSharedInterruptibly(int) throws java.lang.InterruptedException
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer r0;
        int i0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer;

        i0 := @parameter0: int;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public final boolean tryAcquireSharedNanos(int, long) throws java.lang.InterruptedException
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer r0;
        int i0;
        long l1;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public final boolean releaseShared(int)
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer r0;
        int i0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer;

        i0 := @parameter0: int;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public final boolean hasQueuedThreads()
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public final boolean hasContended()
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public final java.lang.Thread getFirstQueuedThread()
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public final boolean isQueued(java.lang.Thread)
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer r0;
        java.lang.Thread r1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer;

        r1 := @parameter0: java.lang.Thread;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public final boolean hasQueuedPredecessors()
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public final int getQueueLength()
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public final java.util.Collection getQueuedThreads()
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public final java.util.Collection getExclusiveQueuedThreads()
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public final java.util.Collection getSharedQueuedThreads()
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public java.lang.String toString()
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public final boolean owns(java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer r0;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject r1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer;

        r1 := @parameter0: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public final boolean hasWaiters(java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer r0;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject r1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer;

        r1 := @parameter0: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public final int getWaitQueueLength(java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer r0;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject r1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer;

        r1 := @parameter0: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public final java.util.Collection getWaitingThreads(java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer r0;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject r1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer;

        r1 := @parameter0: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }
}
