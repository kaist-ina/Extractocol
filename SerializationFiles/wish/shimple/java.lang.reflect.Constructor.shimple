public final class java.lang.reflect.Constructor extends java.lang.reflect.AccessibleObject implements java.lang.reflect.GenericDeclaration, java.lang.reflect.Member
{

    void <init>()
    {
        java.lang.reflect.Constructor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.lang.reflect.Constructor;

        specialinvoke r0.<java.lang.reflect.AccessibleObject: void <init>()>();

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public java.lang.annotation.Annotation[] getAnnotations()
    {
        java.lang.reflect.Constructor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.lang.reflect.Constructor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public int getModifiers()
    {
        java.lang.reflect.Constructor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.lang.reflect.Constructor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public boolean isVarArgs()
    {
        java.lang.reflect.Constructor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.lang.reflect.Constructor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public boolean isSynthetic()
    {
        java.lang.reflect.Constructor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.lang.reflect.Constructor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public java.lang.String getName()
    {
        java.lang.reflect.Constructor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.lang.reflect.Constructor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public java.lang.Class getDeclaringClass()
    {
        java.lang.reflect.Constructor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.lang.reflect.Constructor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public java.lang.Class[] getExceptionTypes()
    {
        java.lang.reflect.Constructor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.lang.reflect.Constructor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public java.lang.Class[] getParameterTypes()
    {
        java.lang.reflect.Constructor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.lang.reflect.Constructor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public int hashCode()
    {
        java.lang.reflect.Constructor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.lang.reflect.Constructor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.reflect.Constructor r0;
        java.lang.Object r1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.lang.reflect.Constructor;

        r1 := @parameter0: java.lang.Object;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public java.lang.reflect.TypeVariable[] getTypeParameters()
    {
        java.lang.reflect.Constructor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.lang.reflect.Constructor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public java.lang.String toGenericString()
    {
        java.lang.reflect.Constructor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.lang.reflect.Constructor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public java.lang.reflect.Type[] getGenericParameterTypes()
    {
        java.lang.reflect.Constructor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.lang.reflect.Constructor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public java.lang.reflect.Type[] getGenericExceptionTypes()
    {
        java.lang.reflect.Constructor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.lang.reflect.Constructor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public java.lang.annotation.Annotation[] getDeclaredAnnotations()
    {
        java.lang.reflect.Constructor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.lang.reflect.Constructor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public boolean isAnnotationPresent(java.lang.Class)
    {
        java.lang.reflect.Constructor r0;
        java.lang.Class r1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.lang.reflect.Constructor;

        r1 := @parameter0: java.lang.Class;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public java.lang.annotation.Annotation getAnnotation(java.lang.Class)
    {
        java.lang.reflect.Constructor r0;
        java.lang.Class r1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.lang.reflect.Constructor;

        r1 := @parameter0: java.lang.Class;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public java.lang.annotation.Annotation[][] getParameterAnnotations()
    {
        java.lang.reflect.Constructor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.lang.reflect.Constructor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public transient java.lang.Object newInstance(java.lang.Object[]) throws java.lang.InstantiationException, java.lang.IllegalAccessException, java.lang.IllegalArgumentException, java.lang.reflect.InvocationTargetException
    {
        java.lang.reflect.Constructor r0;
        java.lang.Object[] r1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.lang.reflect.Constructor;

        r1 := @parameter0: java.lang.Object[];

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public java.lang.String toString()
    {
        java.lang.reflect.Constructor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.lang.reflect.Constructor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }
}
