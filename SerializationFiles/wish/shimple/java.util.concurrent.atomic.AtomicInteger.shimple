public class java.util.concurrent.atomic.AtomicInteger extends java.lang.Number implements java.io.Serializable
{

    public void <init>(int)
    {
        java.util.concurrent.atomic.AtomicInteger r0;
        int i0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.atomic.AtomicInteger;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Number: void <init>()>();

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public void <init>()
    {
        java.util.concurrent.atomic.AtomicInteger r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.atomic.AtomicInteger;

        specialinvoke r0.<java.lang.Number: void <init>()>();

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public final int get()
    {
        java.util.concurrent.atomic.AtomicInteger r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.atomic.AtomicInteger;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public final void set(int)
    {
        java.util.concurrent.atomic.AtomicInteger r0;
        int i0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.atomic.AtomicInteger;

        i0 := @parameter0: int;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public final void lazySet(int)
    {
        java.util.concurrent.atomic.AtomicInteger r0;
        int i0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.atomic.AtomicInteger;

        i0 := @parameter0: int;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public final int getAndSet(int)
    {
        java.util.concurrent.atomic.AtomicInteger r0;
        int i0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.atomic.AtomicInteger;

        i0 := @parameter0: int;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public final boolean compareAndSet(int, int)
    {
        java.util.concurrent.atomic.AtomicInteger r0;
        int i0, i1;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.atomic.AtomicInteger;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public final boolean weakCompareAndSet(int, int)
    {
        java.util.concurrent.atomic.AtomicInteger r0;
        int i0, i1;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.atomic.AtomicInteger;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public final int getAndIncrement()
    {
        java.util.concurrent.atomic.AtomicInteger r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.atomic.AtomicInteger;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public final int getAndDecrement()
    {
        java.util.concurrent.atomic.AtomicInteger r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.atomic.AtomicInteger;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public final int getAndAdd(int)
    {
        java.util.concurrent.atomic.AtomicInteger r0;
        int i0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.atomic.AtomicInteger;

        i0 := @parameter0: int;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public final int incrementAndGet()
    {
        java.util.concurrent.atomic.AtomicInteger r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.atomic.AtomicInteger;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public final int decrementAndGet()
    {
        java.util.concurrent.atomic.AtomicInteger r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.atomic.AtomicInteger;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public final int addAndGet(int)
    {
        java.util.concurrent.atomic.AtomicInteger r0;
        int i0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.atomic.AtomicInteger;

        i0 := @parameter0: int;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public java.lang.String toString()
    {
        java.util.concurrent.atomic.AtomicInteger r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.atomic.AtomicInteger;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public int intValue()
    {
        java.util.concurrent.atomic.AtomicInteger r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.atomic.AtomicInteger;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public long longValue()
    {
        java.util.concurrent.atomic.AtomicInteger r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.atomic.AtomicInteger;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public float floatValue()
    {
        java.util.concurrent.atomic.AtomicInteger r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.atomic.AtomicInteger;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public double doubleValue()
    {
        java.util.concurrent.atomic.AtomicInteger r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.atomic.AtomicInteger;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }
}
