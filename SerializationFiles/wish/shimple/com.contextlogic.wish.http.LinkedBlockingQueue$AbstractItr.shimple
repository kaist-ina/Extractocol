abstract class com.contextlogic.wish.http.LinkedBlockingQueue$AbstractItr extends java.lang.Object implements java.util.Iterator
{
    private com.contextlogic.wish.http.LinkedBlockingQueue$Node lastRet;
    com.contextlogic.wish.http.LinkedBlockingQueue$Node next;
    java.lang.Object nextItem;
    final com.contextlogic.wish.http.LinkedBlockingQueue this$0;

    void <init>(com.contextlogic.wish.http.LinkedBlockingQueue)
    {
        com.contextlogic.wish.http.LinkedBlockingQueue$AbstractItr $r0;
        com.contextlogic.wish.http.LinkedBlockingQueue $r1;

        $r0 := @this: com.contextlogic.wish.http.LinkedBlockingQueue$AbstractItr;

        $r1 := @parameter0: com.contextlogic.wish.http.LinkedBlockingQueue;

        $r0.<com.contextlogic.wish.http.LinkedBlockingQueue$AbstractItr: com.contextlogic.wish.http.LinkedBlockingQueue this$0> = $r1;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        virtualinvoke $r0.<com.contextlogic.wish.http.LinkedBlockingQueue$AbstractItr: void advance()>();

        return;
    }

    abstract void advance();

    public boolean hasNext()
    {
        com.contextlogic.wish.http.LinkedBlockingQueue$AbstractItr $r0;
        com.contextlogic.wish.http.LinkedBlockingQueue$Node $r1;

        $r0 := @this: com.contextlogic.wish.http.LinkedBlockingQueue$AbstractItr;

        $r1 = $r0.<com.contextlogic.wish.http.LinkedBlockingQueue$AbstractItr: com.contextlogic.wish.http.LinkedBlockingQueue$Node next>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.Object next()
    {
        com.contextlogic.wish.http.LinkedBlockingQueue$AbstractItr $r0;
        java.util.NoSuchElementException $r1;
        com.contextlogic.wish.http.LinkedBlockingQueue$Node $r2, $r2_1;
        java.lang.Object r3;

        $r0 := @this: com.contextlogic.wish.http.LinkedBlockingQueue$AbstractItr;

        $r2 = $r0.<com.contextlogic.wish.http.LinkedBlockingQueue$AbstractItr: com.contextlogic.wish.http.LinkedBlockingQueue$Node next>;

        if $r2 != null goto label1;

        $r1 = new java.util.NoSuchElementException;

        specialinvoke $r1.<java.util.NoSuchElementException: void <init>()>();

        throw $r1;

     label1:
        $r2_1 = $r0.<com.contextlogic.wish.http.LinkedBlockingQueue$AbstractItr: com.contextlogic.wish.http.LinkedBlockingQueue$Node next>;

        $r0.<com.contextlogic.wish.http.LinkedBlockingQueue$AbstractItr: com.contextlogic.wish.http.LinkedBlockingQueue$Node lastRet> = $r2_1;

        r3 = $r0.<com.contextlogic.wish.http.LinkedBlockingQueue$AbstractItr: java.lang.Object nextItem>;

        virtualinvoke $r0.<com.contextlogic.wish.http.LinkedBlockingQueue$AbstractItr: void advance()>();

        return r3;
    }

    public void remove()
    {
        com.contextlogic.wish.http.LinkedBlockingQueue$AbstractItr $r0;
        com.contextlogic.wish.http.LinkedBlockingQueue$Node $r1;
        java.lang.IllegalStateException $r2;
        com.contextlogic.wish.http.LinkedBlockingQueue $r3;

        $r0 := @this: com.contextlogic.wish.http.LinkedBlockingQueue$AbstractItr;

        $r1 = $r0.<com.contextlogic.wish.http.LinkedBlockingQueue$AbstractItr: com.contextlogic.wish.http.LinkedBlockingQueue$Node lastRet>;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();

        throw $r2;

     label1:
        $r0.<com.contextlogic.wish.http.LinkedBlockingQueue$AbstractItr: com.contextlogic.wish.http.LinkedBlockingQueue$Node lastRet> = null;

        $r3 = $r0.<com.contextlogic.wish.http.LinkedBlockingQueue$AbstractItr: com.contextlogic.wish.http.LinkedBlockingQueue this$0>;

        virtualinvoke $r3.<com.contextlogic.wish.http.LinkedBlockingQueue: boolean removeNode(com.contextlogic.wish.http.LinkedBlockingQueue$Node)>($r1);

        return;
    }
}
