class com.facebook.ProgressOutputStream extends java.io.FilterOutputStream implements com.facebook.RequestOutputStream
{
    private long batchProgress;
    private com.facebook.RequestProgress currentRequestProgress;
    private long lastReportedProgress;
    private long maxProgress;
    private final java.util.Map progressMap;
    private final com.facebook.RequestBatch requests;
    private final long threshold;

    void <init>(java.io.OutputStream, com.facebook.RequestBatch, java.util.Map, long)
    {
        com.facebook.ProgressOutputStream $r0;
        java.io.OutputStream $r1;
        com.facebook.RequestBatch $r2;
        java.util.Map $r3;
        long $l0, $l0_1;

        $r0 := @this: com.facebook.ProgressOutputStream;

        $r1 := @parameter0: java.io.OutputStream;

        $r2 := @parameter1: com.facebook.RequestBatch;

        $r3 := @parameter2: java.util.Map;

        $l0 := @parameter3: long;

        specialinvoke $r0.<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>($r1);

        $r0.<com.facebook.ProgressOutputStream: com.facebook.RequestBatch requests> = $r2;

        $r0.<com.facebook.ProgressOutputStream: java.util.Map progressMap> = $r3;

        $r0.<com.facebook.ProgressOutputStream: long maxProgress> = $l0;

        $l0_1 = staticinvoke <com.facebook.Settings: long getOnProgressThreshold()>();

        $r0.<com.facebook.ProgressOutputStream: long threshold> = $l0_1;

        return;
    }

    static com.facebook.RequestBatch access$000(com.facebook.ProgressOutputStream)
    {
        com.facebook.ProgressOutputStream $r0;
        com.facebook.RequestBatch r1;

        $r0 := @parameter0: com.facebook.ProgressOutputStream;

        r1 = $r0.<com.facebook.ProgressOutputStream: com.facebook.RequestBatch requests>;

        return r1;
    }

    static long access$100(com.facebook.ProgressOutputStream)
    {
        com.facebook.ProgressOutputStream $r0;
        long l0;

        $r0 := @parameter0: com.facebook.ProgressOutputStream;

        l0 = $r0.<com.facebook.ProgressOutputStream: long batchProgress>;

        return l0;
    }

    static long access$200(com.facebook.ProgressOutputStream)
    {
        com.facebook.ProgressOutputStream $r0;
        long l0;

        $r0 := @parameter0: com.facebook.ProgressOutputStream;

        l0 = $r0.<com.facebook.ProgressOutputStream: long maxProgress>;

        return l0;
    }

    private void addProgress(long)
    {
        com.facebook.ProgressOutputStream $r0;
        long $l0, $l1, $l2, $l1_1, $l1_2, $l0_1, $l0_2, $l1_3, $l0_3, $l1_4, $l0_4, $l1_5, $l0_5;
        com.facebook.RequestProgress $r1, $r1_1, $r1_2;
        byte $b3, $b3_1, $b3_2, $b3_3;

        $r0 := @this: com.facebook.ProgressOutputStream;

        $l1 := @parameter0: long;

        $r1 = $r0.<com.facebook.ProgressOutputStream: com.facebook.RequestProgress currentRequestProgress>;

(0)     if $r1 == null goto label1;

        $r1_1 = $r0.<com.facebook.ProgressOutputStream: com.facebook.RequestProgress currentRequestProgress>;

(1)     virtualinvoke $r1_1.<com.facebook.RequestProgress: void addProgress(long)>($l1);

     label1:
        $r1_2 = Phi($r1 #0, $r1_1 #1);

        $l0 = $r0.<com.facebook.ProgressOutputStream: long batchProgress>;

        $l1_1 = $l0 + $l1;

        $r0.<com.facebook.ProgressOutputStream: long batchProgress> = $l1_1;

        $l1_2 = $r0.<com.facebook.ProgressOutputStream: long batchProgress>;

        $l0_1 = $r0.<com.facebook.ProgressOutputStream: long lastReportedProgress>;

        $l2 = $r0.<com.facebook.ProgressOutputStream: long threshold>;

        $l0_2 = $l0_1 + $l2;

        $b3 = $l1_2 cmp $l0_2;

(2)     if $b3 >= 0 goto label2;

        $l1_3 = $r0.<com.facebook.ProgressOutputStream: long batchProgress>;

        $l0_3 = $r0.<com.facebook.ProgressOutputStream: long maxProgress>;

        $b3_1 = $l1_3 cmp $l0_3;

(3)     if $b3_1 < 0 goto label3;

     label2:
        $l1_4 = Phi($l1_2 #2, $l1_3 #3);

        $b3_2 = Phi($b3 #2, $b3_1 #3);

        $l0_4 = Phi($l0_2 #2, $l0_3 #3);

(4)     specialinvoke $r0.<com.facebook.ProgressOutputStream: void reportBatchProgress()>();

     label3:
        $l1_5 = Phi($l1_3 #3, $l1_4 #4);

        $b3_3 = Phi($b3_1 #3, $b3_2 #4);

        $l0_5 = Phi($l0_3 #3, $l0_4 #4);

        return;
    }

    private void reportBatchProgress()
    {
        com.facebook.ProgressOutputStream $r0;
        byte $b0;
        com.facebook.ProgressOutputStream$1 $r1;
        long $l1, $l2, $l2_1, $l1_1, $l1_2, $l2_2, $l1_3, $l2_3, $l1_4;
        com.facebook.RequestBatch $r2, $r2_1, $r2_2, $r2_3, $r2_4;
        java.util.List $r3;
        java.util.Iterator $r4;
        boolean $z0, $z0_1, $z0_2, $z0_3;
        java.lang.Object $r5;
        com.facebook.RequestBatch$Callback $r6;
        android.os.Handler $r7;
        com.facebook.RequestBatch$OnProgressCallback $r8;

        $r0 := @this: com.facebook.ProgressOutputStream;

        $l1 = $r0.<com.facebook.ProgressOutputStream: long batchProgress>;

        $l2 = $r0.<com.facebook.ProgressOutputStream: long lastReportedProgress>;

        $b0 = $l1 cmp $l2;

(0)     if $b0 <= 0 goto label4;

        $r2 = $r0.<com.facebook.ProgressOutputStream: com.facebook.RequestBatch requests>;

        $r3 = virtualinvoke $r2.<com.facebook.RequestBatch: java.util.List getCallbacks()>();

(1)     $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $r2_1 = Phi($r2 #1, $r2_1 #2, $r2_3 #3, $r2_2 #4);

        $l2_1 = Phi($l2 #1, $l2_1 #2, $l2_2 #3, $l2_1 #4);

        $z0 = Phi($z0 #1, $z0_2 #2, $z0_2 #3, $z0_2 #4);

        $l1_1 = Phi($l1 #1, $l1_1 #2, $l1_2 #3, $l1_1 #4);

        $z0_1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0_1 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (com.facebook.RequestBatch$Callback) $r5;

        $z0_2 = $r6 instanceof com.facebook.RequestBatch$OnProgressCallback;

(2)     if $z0_2 == 0 goto label1;

        $r2_2 = $r0.<com.facebook.ProgressOutputStream: com.facebook.RequestBatch requests>;

        $r7 = virtualinvoke $r2_2.<com.facebook.RequestBatch: android.os.Handler getCallbackHandler()>();

        $r8 = (com.facebook.RequestBatch$OnProgressCallback) $r6;

        if $r7 != null goto label2;

        $r2_3 = $r0.<com.facebook.ProgressOutputStream: com.facebook.RequestBatch requests>;

        $l1_2 = $r0.<com.facebook.ProgressOutputStream: long batchProgress>;

        $l2_2 = $r0.<com.facebook.ProgressOutputStream: long maxProgress>;

        interfaceinvoke $r8.<com.facebook.RequestBatch$OnProgressCallback: void onBatchProgress(com.facebook.RequestBatch,long,long)>($r2_3, $l1_2, $l2_2);

(3)     goto label1;

     label2:
        $r1 = new com.facebook.ProgressOutputStream$1;

        specialinvoke $r1.<com.facebook.ProgressOutputStream$1: void <init>(com.facebook.ProgressOutputStream,com.facebook.RequestBatch$OnProgressCallback)>($r0, $r8);

        virtualinvoke $r7.<android.os.Handler: boolean post(java.lang.Runnable)>($r1);

(4)     goto label1;

     label3:
        $l1_3 = $r0.<com.facebook.ProgressOutputStream: long batchProgress>;

(5)     $r0.<com.facebook.ProgressOutputStream: long lastReportedProgress> = $l1_3;

     label4:
        $r2_4 = Phi($r2 #0, $r2_1 #5);

        $l2_3 = Phi($l2 #0, $l2_1 #5);

        $z0_3 = Phi($z0 #0, $z0_1 #5);

        $l1_4 = Phi($l1 #0, $l1_3 #5);

        return;
    }

    public void close() throws java.io.IOException
    {
        com.facebook.ProgressOutputStream $r0;
        java.util.Map $r1;
        java.util.Collection $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        com.facebook.RequestProgress $r5;

        $r0 := @this: com.facebook.ProgressOutputStream;

        specialinvoke $r0.<java.io.FilterOutputStream: void close()>();

        $r1 = $r0.<com.facebook.ProgressOutputStream: java.util.Map progressMap>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.facebook.RequestProgress) $r4;

        virtualinvoke $r5.<com.facebook.RequestProgress: void reportProgress()>();

        goto label1;

     label2:
        specialinvoke $r0.<com.facebook.ProgressOutputStream: void reportBatchProgress()>();

        return;
    }

    long getBatchProgress()
    {
        com.facebook.ProgressOutputStream $r0;
        long l0;

        $r0 := @this: com.facebook.ProgressOutputStream;

        l0 = $r0.<com.facebook.ProgressOutputStream: long batchProgress>;

        return l0;
    }

    long getMaxProgress()
    {
        com.facebook.ProgressOutputStream $r0;
        long l0;

        $r0 := @this: com.facebook.ProgressOutputStream;

        l0 = $r0.<com.facebook.ProgressOutputStream: long maxProgress>;

        return l0;
    }

    public void setCurrentRequest(com.facebook.Request)
    {
        com.facebook.ProgressOutputStream $r0;
        com.facebook.Request $r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        com.facebook.RequestProgress $r4, $r4_1, $r4_2;

        $r0 := @this: com.facebook.ProgressOutputStream;

        $r1 := @parameter0: com.facebook.Request;

        if $r1 == null goto label2;

        $r2 = $r0.<com.facebook.ProgressOutputStream: java.util.Map progressMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

(0)     $r4 = (com.facebook.RequestProgress) $r3;

     label1:
        $r4_1 = Phi($r4 #0, $r4_2 #1);

        $r0.<com.facebook.ProgressOutputStream: com.facebook.RequestProgress currentRequestProgress> = $r4_1;

        return;

     label2:
        $r4_2 = null;

(1)     goto label1;
    }

    public void write(int) throws java.io.IOException
    {
        com.facebook.ProgressOutputStream $r0;
        int $i0;
        java.io.OutputStream $r1;

        $r0 := @this: com.facebook.ProgressOutputStream;

        $i0 := @parameter0: int;

        $r1 = $r0.<java.io.FilterOutputStream: java.io.OutputStream out>;

        virtualinvoke $r1.<java.io.OutputStream: void write(int)>($i0);

        specialinvoke $r0.<com.facebook.ProgressOutputStream: void addProgress(long)>(1L);

        return;
    }

    public void write(byte[]) throws java.io.IOException
    {
        com.facebook.ProgressOutputStream $r0;
        byte[] $r1;
        java.io.OutputStream $r2;
        int $i0;
        long $l1;

        $r0 := @this: com.facebook.ProgressOutputStream;

        $r1 := @parameter0: byte[];

        $r2 = $r0.<java.io.FilterOutputStream: java.io.OutputStream out>;

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[])>($r1);

        $i0 = lengthof $r1;

        $l1 = (long) $i0;

        specialinvoke $r0.<com.facebook.ProgressOutputStream: void addProgress(long)>($l1);

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        com.facebook.ProgressOutputStream $r0;
        byte[] $r1;
        int $i0, $i1;
        java.io.OutputStream $r2;
        long $l2;

        $r0 := @this: com.facebook.ProgressOutputStream;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = $r0.<java.io.FilterOutputStream: java.io.OutputStream out>;

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>($r1, $i0, $i1);

        $l2 = (long) $i1;

        specialinvoke $r0.<com.facebook.ProgressOutputStream: void addProgress(long)>($l2);

        return;
    }
}
