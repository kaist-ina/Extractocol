class io.fabric.sdk.android.services.network.SystemKeyStore extends java.lang.Object
{
    private final java.util.HashMap trustRoots;
    final java.security.KeyStore trustStore;

    public void <init>(java.io.InputStream, java.lang.String)
    {
        io.fabric.sdk.android.services.network.SystemKeyStore $r0;
        java.io.InputStream $r1;
        java.lang.String $r2;
        java.security.KeyStore $r3;
        java.util.HashMap $r4;

        $r0 := @this: io.fabric.sdk.android.services.network.SystemKeyStore;

        $r1 := @parameter0: java.io.InputStream;

        $r2 := @parameter1: java.lang.String;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r3 = specialinvoke $r0.<io.fabric.sdk.android.services.network.SystemKeyStore: java.security.KeyStore getTrustStore(java.io.InputStream,java.lang.String)>($r1, $r2);

        $r4 = specialinvoke $r0.<io.fabric.sdk.android.services.network.SystemKeyStore: java.util.HashMap initializeTrustedRoots(java.security.KeyStore)>($r3);

        $r0.<io.fabric.sdk.android.services.network.SystemKeyStore: java.util.HashMap trustRoots> = $r4;

        $r0.<io.fabric.sdk.android.services.network.SystemKeyStore: java.security.KeyStore trustStore> = $r3;

        return;
    }

    private java.security.KeyStore getTrustStore(java.io.InputStream, java.lang.String)
    {
        io.fabric.sdk.android.services.network.SystemKeyStore $r0;
        java.io.InputStream $r1;
        java.lang.String $r2;
        java.io.BufferedInputStream $r3;
        java.lang.Throwable $r4;
        java.security.KeyStoreException $r5;
        java.security.NoSuchAlgorithmException $r6;
        java.security.cert.CertificateException $r7;
        java.io.IOException $r8;
        java.security.KeyStore $r9;
        char[] $r10;
        java.lang.AssertionError $r11, $r11_1, $r11_2, $r11_3;

        $r0 := @this: io.fabric.sdk.android.services.network.SystemKeyStore;

        $r1 := @parameter0: java.io.InputStream;

        $r2 := @parameter1: java.lang.String;

     label01:
        $r9 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>("BKS");

     label02:
        $r3 = new java.io.BufferedInputStream;

     label03:
        specialinvoke $r3.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r1);

     label04:
        $r10 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        virtualinvoke $r9.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r3, $r10);

     label05:
        virtualinvoke $r3.<java.io.BufferedInputStream: void close()>();

     label06:
        return $r9;

     label07:
        $r4 := @caughtexception;

     label08:
        virtualinvoke $r3.<java.io.BufferedInputStream: void close()>();

        throw $r4;

     label09:
        $r5 := @caughtexception;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>(java.lang.Object)>($r5);

        throw $r11;

     label10:
        $r6 := @caughtexception;

        $r11_1 = new java.lang.AssertionError;

        specialinvoke $r11_1.<java.lang.AssertionError: void <init>(java.lang.Object)>($r6);

        throw $r11_1;

     label11:
        $r7 := @caughtexception;

        $r11_2 = new java.lang.AssertionError;

        specialinvoke $r11_2.<java.lang.AssertionError: void <init>(java.lang.Object)>($r7);

        throw $r11_2;

     label12:
        $r8 := @caughtexception;

        $r11_3 = new java.lang.AssertionError;

        specialinvoke $r11_3.<java.lang.AssertionError: void <init>(java.lang.Object)>($r8);

        throw $r11_3;

        catch java.security.KeyStoreException from label01 to label02 with label09;
        catch java.security.NoSuchAlgorithmException from label01 to label02 with label10;
        catch java.security.cert.CertificateException from label01 to label02 with label11;
        catch java.io.IOException from label01 to label02 with label12;
        catch java.security.KeyStoreException from label03 to label04 with label09;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label10;
        catch java.security.cert.CertificateException from label03 to label04 with label11;
        catch java.io.IOException from label03 to label04 with label12;
        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.security.KeyStoreException from label05 to label06 with label09;
        catch java.security.NoSuchAlgorithmException from label05 to label06 with label10;
        catch java.security.cert.CertificateException from label05 to label06 with label11;
        catch java.io.IOException from label05 to label06 with label12;
        catch java.security.KeyStoreException from label08 to label09 with label09;
        catch java.security.NoSuchAlgorithmException from label08 to label09 with label10;
        catch java.security.cert.CertificateException from label08 to label09 with label11;
        catch java.io.IOException from label08 to label09 with label12;
    }

    private java.util.HashMap initializeTrustedRoots(java.security.KeyStore)
    {
        io.fabric.sdk.android.services.network.SystemKeyStore $r0;
        java.security.KeyStore $r1;
        java.util.HashMap $r2;
        java.security.KeyStoreException $r3;
        java.lang.AssertionError $r4;
        java.util.Enumeration $r5;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.String $r7;
        java.security.cert.Certificate $r8;
        java.security.cert.X509Certificate $r9;
        javax.security.auth.x500.X500Principal $r10;

        $r0 := @this: io.fabric.sdk.android.services.network.SystemKeyStore;

        $r1 := @parameter0: java.security.KeyStore;

        $r2 = new java.util.HashMap;

     label01:
        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        $r5 = virtualinvoke $r1.<java.security.KeyStore: java.util.Enumeration aliases()>();

     label02:
        $z0 = interfaceinvoke $r5.<java.util.Enumeration: boolean hasMoreElements()>();

     label03:
        if $z0 == 0 goto label11;

     label04:
        $r6 = interfaceinvoke $r5.<java.util.Enumeration: java.lang.Object nextElement()>();

     label05:
        $r7 = (java.lang.String) $r6;

     label06:
        $r8 = virtualinvoke $r1.<java.security.KeyStore: java.security.cert.Certificate getCertificate(java.lang.String)>($r7);

     label07:
        $r9 = (java.security.cert.X509Certificate) $r8;

        if $r9 == null goto label02;

     label08:
        $r10 = virtualinvoke $r9.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()>();

        virtualinvoke $r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r9);

     label09:
        goto label02;

     label10:
        $r3 := @caughtexception;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>($r3);

        throw $r4;

     label11:
        return $r2;

        catch java.security.KeyStoreException from label01 to label03 with label10;
        catch java.security.KeyStoreException from label04 to label05 with label10;
        catch java.security.KeyStoreException from label06 to label07 with label10;
        catch java.security.KeyStoreException from label08 to label09 with label10;
    }

    public java.security.cert.X509Certificate getTrustRootFor(java.security.cert.X509Certificate)
    {
        io.fabric.sdk.android.services.network.SystemKeyStore $r0;
        java.security.cert.X509Certificate $r1, $r6;
        java.util.HashMap $r2;
        java.security.GeneralSecurityException $r3;
        javax.security.auth.x500.X500Principal $r4, $r7, $r4_1;
        java.lang.Object $r5;
        boolean $z0;
        java.security.PublicKey $r8;

        $r0 := @this: io.fabric.sdk.android.services.network.SystemKeyStore;

        $r1 := @parameter0: java.security.cert.X509Certificate;

        $r2 = $r0.<io.fabric.sdk.android.services.network.SystemKeyStore: java.util.HashMap trustRoots>;

        $r4 = virtualinvoke $r1.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getIssuerX500Principal()>();

        $r5 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r4);

        $r6 = (java.security.cert.X509Certificate) $r5;

        if $r6 != null goto label1;

        return null;

     label1:
        $r4_1 = virtualinvoke $r6.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()>();

        $r7 = virtualinvoke $r1.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()>();

        $z0 = virtualinvoke $r4_1.<javax.security.auth.x500.X500Principal: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label2;

        return null;

     label2:
        $r8 = virtualinvoke $r6.<java.security.cert.X509Certificate: java.security.PublicKey getPublicKey()>();

        virtualinvoke $r1.<java.security.cert.X509Certificate: void verify(java.security.PublicKey)>($r8);

     label3:
        return $r6;

     label4:
        $r3 := @caughtexception;

        return null;

        catch java.security.GeneralSecurityException from label2 to label3 with label4;
    }

    public boolean isTrustRoot(java.security.cert.X509Certificate)
    {
        io.fabric.sdk.android.services.network.SystemKeyStore $r0;
        java.security.cert.X509Certificate $r1, $r5;
        java.util.HashMap $r2;
        javax.security.auth.x500.X500Principal $r3;
        java.lang.Object $r4;
        java.security.PublicKey $r6, $r7;
        boolean $z0;

        $r0 := @this: io.fabric.sdk.android.services.network.SystemKeyStore;

        $r1 := @parameter0: java.security.cert.X509Certificate;

        $r2 = $r0.<io.fabric.sdk.android.services.network.SystemKeyStore: java.util.HashMap trustRoots>;

        $r3 = virtualinvoke $r1.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()>();

        $r4 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r3);

        $r5 = (java.security.cert.X509Certificate) $r4;

        if $r5 == null goto label1;

        $r6 = virtualinvoke $r5.<java.security.cert.X509Certificate: java.security.PublicKey getPublicKey()>();

        $r7 = virtualinvoke $r1.<java.security.cert.X509Certificate: java.security.PublicKey getPublicKey()>();

        $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
}
