public class com.android.volley.toolbox.HttpHeaderParser extends java.lang.Object
{

    public void <init>()
    {
        com.android.volley.toolbox.HttpHeaderParser $r0;

        $r0 := @this: com.android.volley.toolbox.HttpHeaderParser;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.android.volley.Cache$Entry parseCacheHeaders(com.android.volley.NetworkResponse)
    {
        com.android.volley.NetworkResponse $r0;
        java.util.Map $r1;
        com.android.volley.Cache$Entry $r2;
        java.lang.Exception $r3;
        long $l0, $l1, $l2, $l3, $l4, $l1_1, $l1_2, $l4_1, $l4_2, $l4_3, $l4_4, $l4_5, $l4_6, $l2_1, $l2_2, $l3_1, $l3_2, $l3_3, $l0_1, $l3_4, $l3_5;
        boolean $z0, $z1, $z0_1, $z1_1, $z1_2, $z1_3, $z1_4, $z1_5, $z1_6, $z1_7, $z1_8, $z1_9, $z0_2;
        java.lang.Object $r4, $r4_1, $r4_2, $r4_3;
        java.lang.String $r5, $r5_1, $r5_2, $r5_3, $r5_4, $r5_5, $r5_6, $r5_7, $r5_8, $r5_9, $r5_10;
        java.lang.String[] $r6;
        int $i5, $i6, $i5_1, $i5_2, $i5_3;
        byte[] $r7;
        byte $b7, $b7_1, $b7_2;

        $r0 := @parameter0: com.android.volley.NetworkResponse;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r1 = $r0.<com.android.volley.NetworkResponse: java.util.Map headers>;

        $l1 = 0L;

        $l2 = 0L;

        $l3 = 0L;

        $l4 = 0L;

        $z0 = 0;

        $r4 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("Date");

        $r5 = (java.lang.String) $r4;

(0)     if $r5 == null goto label01;

(1)     $l1_1 = staticinvoke <com.android.volley.toolbox.HttpHeaderParser: long parseDateAsEpoch(java.lang.String)>($r5);

     label01:
        $l1_2 = Phi($l1 #0, $l1_1 #1);

        $r4_1 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("Cache-Control");

        $r5_1 = (java.lang.String) $r4_1;

(2)     if $r5_1 == null goto label09;

        $z0_1 = 1;

        $r6 = virtualinvoke $r5_1.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

(3)     $i5 = 0;

     label02:
        $z1 = Phi($z1 #3, $z1_4 #10);

        $l4_1 = Phi($l4 #3, $l4_3 #10);

        $r5_2 = Phi($r5_1 #3, $r5_6 #10);

        $i5_1 = Phi($i5 #3, $i5_2 #10);

        $i6 = lengthof $r6;

(4)     if $i5_1 >= $i6 goto label09;

        $r5_3 = $r6[$i5_1];

        $r5_4 = virtualinvoke $r5_3.<java.lang.String: java.lang.String trim()>();

        $z1_1 = virtualinvoke $r5_4.<java.lang.String: boolean equals(java.lang.Object)>("no-cache");

(5)     if $z1_1 != 0 goto label03;

        $z1_2 = virtualinvoke $r5_4.<java.lang.String: boolean equals(java.lang.Object)>("no-store");

(6)     if $z1_2 == 0 goto label04;

     label03:
        $z1_8 = Phi($z1_1 #5, $z1_2 #6);

        return null;

     label04:
        $z1_3 = virtualinvoke $r5_4.<java.lang.String: boolean startsWith(java.lang.String)>("max-age=");

(7)     if $z1_3 == 0 goto label07;

     label05:
(8)     $r5_5 = virtualinvoke $r5_4.<java.lang.String: java.lang.String substring(int)>(8);

(9)     $l4_2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r5_5);

     label06:
        $z1_4 = Phi($z1_3 #9, $z1_6 #12, $z1_7 #13, $z1_3 #20);

        $l4_3 = Phi($l4_2 #9, $l4_1 #12, $l4_4 #13, $l4_5 #20);

        $r5_6 = Phi($r5_5 #9, $r5_4 #12, $r5_4 #13, $r5_7 #20);

        $i5_2 = $i5_1 + 1;

(10)    goto label02;

     label07:
        $z1_5 = virtualinvoke $r5_4.<java.lang.String: boolean equals(java.lang.Object)>("must-revalidate");

(11)    if $z1_5 != 0 goto label08;

        $z1_6 = virtualinvoke $r5_4.<java.lang.String: boolean equals(java.lang.Object)>("proxy-revalidate");

(12)    if $z1_6 == 0 goto label06;

     label08:
        $z1_7 = Phi($z1_5 #11, $z1_6 #12);

        $l4_4 = 0L;

(13)    goto label06;

     label09:
        $z1_9 = Phi($z1 #2, $z1 #4);

        $l4_6 = Phi($l4 #2, $l4_1 #4);

        $r5_8 = Phi($r5_1 #2, $r5_2 #4);

        $i5_3 = Phi($i5 #2, $i5_1 #4);

        $z0_2 = Phi($z0 #2, $z0_1 #4);

        $r4_2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("Expires");

        $r5_9 = (java.lang.String) $r4_2;

(14)    if $r5_9 == null goto label10;

(15)    $l2_1 = staticinvoke <com.android.volley.toolbox.HttpHeaderParser: long parseDateAsEpoch(java.lang.String)>($r5_9);

     label10:
        $l2_2 = Phi($l2 #14, $l2_1 #15);

        $r4_3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("ETag");

        $r5_10 = (java.lang.String) $r4_3;

        if $z0_2 == 0 goto label12;

        $l3_1 = 1000L * $l4_6;

(16)    $l3_2 = $l0 + $l3_1;

     label11:
        $l3_3 = Phi($l3_2 #16, $l3 #17, $l3 #18, $l3_5 #19);

        $b7 = Phi($b7 #16, $b7_1 #17, $b7_2 #18, $b7_2 #19);

        $r2 = new com.android.volley.Cache$Entry;

        specialinvoke $r2.<com.android.volley.Cache$Entry: void <init>()>();

        $r7 = $r0.<com.android.volley.NetworkResponse: byte[] data>;

        $r2.<com.android.volley.Cache$Entry: byte[] data> = $r7;

        $r2.<com.android.volley.Cache$Entry: java.lang.String etag> = $r5_10;

        $r2.<com.android.volley.Cache$Entry: long softTtl> = $l3_3;

        $l0_1 = $r2.<com.android.volley.Cache$Entry: long softTtl>;

        $r2.<com.android.volley.Cache$Entry: long ttl> = $l0_1;

        $r2.<com.android.volley.Cache$Entry: long serverDate> = $l1_2;

        $r2.<com.android.volley.Cache$Entry: java.util.Map responseHeaders> = $r1;

        return $r2;

     label12:
        $b7_1 = $l1_2 cmp 0L;

(17)    if $b7_1 <= 0 goto label11;

        $b7_2 = $l2_2 cmp $l1_2;

(18)    if $b7_2 < 0 goto label11;

        $l3_4 = $l2_2 - $l1_2;

        $l3_5 = $l0 + $l3_4;

(19)    goto label11;

     label13:
        $r3 := @caughtexception;

        $l4_5 = Phi($l4_1 #7, $l4_2 #9);

        $r5_7 = Phi($r5_4 #7, $r5_5 #8);

(20)    goto label06;

        catch java.lang.Exception from label05 to label06 with label13;
    }

    public static java.lang.String parseCharset(java.util.Map)
    {
        java.util.Map $r0;
        java.lang.Object $r1;
        java.lang.String $r2, $r2_1, $r2_2, $r2_3, $r2_4, $r2_5, $r2_6, $r2_7;
        java.lang.String[] $r3, $r4;
        int $i0, $i1, $i0_1, $i1_1, $i1_2, $i0_2, $i1_3, $i0_3;
        boolean $z0;

        $r0 := @parameter0: java.util.Map;

        $r1 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("Content-Type");

        $r2 = (java.lang.String) $r1;

(0)     if $r2 == null goto label3;

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String[] split(java.lang.String)>(";");

(1)     $i0 = 1;

     label1:
        $r2_1 = Phi($r2 #1, $r2_6 #5);

        $i1 = Phi($i1 #1, $i1_2 #5);

        $i0_1 = Phi($i0 #1, $i0_2 #5);

        $i1_1 = lengthof $r3;

(2)     if $i0_1 >= $i1_1 goto label3;

        $r2_2 = $r3[$i0_1];

        $r2_3 = virtualinvoke $r2_2.<java.lang.String: java.lang.String trim()>();

        $r4 = virtualinvoke $r2_3.<java.lang.String: java.lang.String[] split(java.lang.String)>("=");

        $i1_2 = lengthof $r4;

(3)     if $i1_2 != 2 goto label2;

        $r2_4 = $r4[0];

        $z0 = virtualinvoke $r2_4.<java.lang.String: boolean equals(java.lang.Object)>("charset");

(4)     if $z0 == 0 goto label2;

        $r2_5 = $r4[1];

        return $r2_5;

     label2:
        $r2_6 = Phi($r2_3 #3, $r2_4 #4);

        $i0_2 = $i0_1 + 1;

(5)     goto label1;

     label3:
        $r2_7 = Phi($r2 #0, $r2_1 #2);

        $i1_3 = Phi($i1 #0, $i1_1 #2);

        $i0_3 = Phi($i0 #0, $i0_1 #2);

        return "ISO-8859-1";
    }

    public static long parseDateAsEpoch(java.lang.String)
    {
        java.lang.String $r0;
        org.apache.http.impl.cookie.DateParseException $r1;
        java.util.Date $r2;
        long $l0;

        $r0 := @parameter0: java.lang.String;

     label1:
        $r2 = staticinvoke <org.apache.http.impl.cookie.DateUtils: java.util.Date parseDate(java.lang.String)>($r0);

        $l0 = virtualinvoke $r2.<java.util.Date: long getTime()>();

     label2:
        return $l0;

     label3:
        $r1 := @caughtexception;

        return 0L;

        catch org.apache.http.impl.cookie.DateParseException from label1 to label2 with label3;
    }
}
