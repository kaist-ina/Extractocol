public final class android.hardware.Sensor extends java.lang.Object
{
    public static final int REPORTING_MODE_CONTINUOUS;
    public static final int REPORTING_MODE_ONE_SHOT;
    public static final int REPORTING_MODE_ON_CHANGE;
    public static final int REPORTING_MODE_SPECIAL_TRIGGER;
    public static final java.lang.String STRING_TYPE_ACCELEROMETER;
    public static final java.lang.String STRING_TYPE_AMBIENT_TEMPERATURE;
    public static final java.lang.String STRING_TYPE_GAME_ROTATION_VECTOR;
    public static final java.lang.String STRING_TYPE_GEOMAGNETIC_ROTATION_VECTOR;
    public static final java.lang.String STRING_TYPE_GRAVITY;
    public static final java.lang.String STRING_TYPE_GYROSCOPE;
    public static final java.lang.String STRING_TYPE_GYROSCOPE_UNCALIBRATED;
    public static final java.lang.String STRING_TYPE_HEART_RATE;
    public static final java.lang.String STRING_TYPE_LIGHT;
    public static final java.lang.String STRING_TYPE_LINEAR_ACCELERATION;
    public static final java.lang.String STRING_TYPE_MAGNETIC_FIELD;
    public static final java.lang.String STRING_TYPE_MAGNETIC_FIELD_UNCALIBRATED;
    public static final java.lang.String STRING_TYPE_ORIENTATION;
    public static final java.lang.String STRING_TYPE_PRESSURE;
    public static final java.lang.String STRING_TYPE_PROXIMITY;
    public static final java.lang.String STRING_TYPE_RELATIVE_HUMIDITY;
    public static final java.lang.String STRING_TYPE_ROTATION_VECTOR;
    public static final java.lang.String STRING_TYPE_SIGNIFICANT_MOTION;
    public static final java.lang.String STRING_TYPE_STEP_COUNTER;
    public static final java.lang.String STRING_TYPE_STEP_DETECTOR;
    public static final java.lang.String STRING_TYPE_TEMPERATURE;
    public static final int TYPE_ACCELEROMETER;
    public static final int TYPE_ALL;
    public static final int TYPE_AMBIENT_TEMPERATURE;
    public static final int TYPE_GAME_ROTATION_VECTOR;
    public static final int TYPE_GEOMAGNETIC_ROTATION_VECTOR;
    public static final int TYPE_GRAVITY;
    public static final int TYPE_GYROSCOPE;
    public static final int TYPE_GYROSCOPE_UNCALIBRATED;
    public static final int TYPE_HEART_RATE;
    public static final int TYPE_LIGHT;
    public static final int TYPE_LINEAR_ACCELERATION;
    public static final int TYPE_MAGNETIC_FIELD;
    public static final int TYPE_MAGNETIC_FIELD_UNCALIBRATED;
    public static final int TYPE_ORIENTATION;
    public static final int TYPE_PRESSURE;
    public static final int TYPE_PROXIMITY;
    public static final int TYPE_RELATIVE_HUMIDITY;
    public static final int TYPE_ROTATION_VECTOR;
    public static final int TYPE_SIGNIFICANT_MOTION;
    public static final int TYPE_STEP_COUNTER;
    public static final int TYPE_STEP_DETECTOR;
    public static final int TYPE_TEMPERATURE;

    void <init>()
    {
        android.hardware.Sensor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: android.hardware.Sensor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public int getReportingMode()
    {
        android.hardware.Sensor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: android.hardware.Sensor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public java.lang.String getName()
    {
        android.hardware.Sensor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: android.hardware.Sensor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public java.lang.String getVendor()
    {
        android.hardware.Sensor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: android.hardware.Sensor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public int getType()
    {
        android.hardware.Sensor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: android.hardware.Sensor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public int getVersion()
    {
        android.hardware.Sensor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: android.hardware.Sensor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public float getMaximumRange()
    {
        android.hardware.Sensor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: android.hardware.Sensor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public float getResolution()
    {
        android.hardware.Sensor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: android.hardware.Sensor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public float getPower()
    {
        android.hardware.Sensor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: android.hardware.Sensor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public int getMinDelay()
    {
        android.hardware.Sensor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: android.hardware.Sensor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public int getFifoReservedEventCount()
    {
        android.hardware.Sensor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: android.hardware.Sensor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public int getFifoMaxEventCount()
    {
        android.hardware.Sensor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: android.hardware.Sensor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public java.lang.String getStringType()
    {
        android.hardware.Sensor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: android.hardware.Sensor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public int getMaxDelay()
    {
        android.hardware.Sensor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: android.hardware.Sensor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public boolean isWakeUpSensor()
    {
        android.hardware.Sensor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: android.hardware.Sensor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public java.lang.String toString()
    {
        android.hardware.Sensor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: android.hardware.Sensor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }
}
