final class com.crashlytics.android.core.ExceptionUtils extends java.lang.Object
{

    private void <init>()
    {
        com.crashlytics.android.core.ExceptionUtils $r0;

        $r0 := @this: com.crashlytics.android.core.ExceptionUtils;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static java.lang.String getMessage(java.lang.Throwable)
    {
        java.lang.Throwable $r0;
        java.lang.String $r1, $r1_1;

        $r0 := @parameter0: java.lang.Throwable;

        $r1 = virtualinvoke $r0.<java.lang.Throwable: java.lang.String getLocalizedMessage()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $r1_1 = virtualinvoke $r1.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("(\r\n|\n|\f)", " ");

        return $r1_1;
    }

    public static void writeStackTrace(android.content.Context, java.lang.Throwable, java.lang.String)
    {
        android.content.Context $r0;
        java.lang.Throwable $r1, $r8, $r8_1, $r8_2;
        java.lang.String $r2;
        java.io.PrintWriter $r3, $r4, $r4_1, $r4_2, $r4_3, $r4_4, $r4_5;
        java.io.FileOutputStream $r5;
        java.lang.Exception $r6, $r6_1, $r6_2, $r6_3, $r6_4;
        io.fabric.sdk.android.Logger $r7;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: java.lang.Throwable;

        $r2 := @parameter2: java.lang.String;

        $r4 = null;

(0)     $r3 = new java.io.PrintWriter;

     label01:
        $r5 = virtualinvoke $r0.<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>($r2, 0);

        specialinvoke $r3.<java.io.PrintWriter: void <init>(java.io.OutputStream)>($r5);

     label02:
        staticinvoke <com.crashlytics.android.core.ExceptionUtils: void writeStackTrace(java.lang.Throwable,java.io.Writer)>($r1, $r3);

     label03:
        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void closeOrLog(java.io.Closeable,java.lang.String)>($r3, "Failed to close stack trace writer.");

        return;

     label04:
(1)     $r6_1 := @caughtexception;

     label05:
        $r4_3 = Phi($r4 #1, $r4_2 #5);

        $r6_2 = Phi($r6_1 #1, $r6 #5);

(2)     $r7 = staticinvoke <io.fabric.sdk.android.Fabric: io.fabric.sdk.android.Logger getLogger()>();

        interfaceinvoke $r7.<io.fabric.sdk.android.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>("CrashlyticsCore", "Failed to create PrintWriter", $r6_2);

     label06:
        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void closeOrLog(java.io.Closeable,java.lang.String)>($r4_3, "Failed to close stack trace writer.");

        return;

     label07:
        $r8_1 := @caughtexception;

        $r4_4 = Phi($r4 #0, $r4_2 #5, $r4_3 #2);

(3)     $r6_3 = Phi($r6 #0, $r6_1 #1, $r6_2 #2);

     label08:
        $r4_5 = Phi($r4_4 #3, $r4_1 #4);

        $r6_4 = Phi($r6_3 #3, $r6 #4);

        $r8_2 = Phi($r8_1 #3, $r8 #4);

        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void closeOrLog(java.io.Closeable,java.lang.String)>($r4_5, "Failed to close stack trace writer.");

        throw $r8_2;

     label09:
        $r8 := @caughtexception;

        $r4_1 = $r3;

(4)     goto label08;

     label10:
        $r6 := @caughtexception;

        $r4_2 = $r3;

(5)     goto label05;

        catch java.lang.Exception from label01 to label02 with label04;
        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Exception from label02 to label03 with label10;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label05 to label06 with label07;
    }

    private static void writeStackTrace(java.lang.Throwable, java.io.OutputStream)
    {
        java.lang.Throwable $r0, $r6, $r6_1, $r6_2;
        java.io.OutputStream $r1;
        java.io.PrintWriter $r2, $r4, $r4_1, $r4_2, $r4_3, $r4_4, $r4_5;
        io.fabric.sdk.android.Logger $r3;
        java.lang.Exception $r5, $r5_1, $r5_2, $r5_3, $r5_4;

        $r0 := @parameter0: java.lang.Throwable;

        $r1 := @parameter1: java.io.OutputStream;

        $r4 = null;

(0)     $r2 = new java.io.PrintWriter;

     label01:
        specialinvoke $r2.<java.io.PrintWriter: void <init>(java.io.OutputStream)>($r1);

     label02:
        staticinvoke <com.crashlytics.android.core.ExceptionUtils: void writeStackTrace(java.lang.Throwable,java.io.Writer)>($r0, $r2);

     label03:
        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void closeOrLog(java.io.Closeable,java.lang.String)>($r2, "Failed to close stack trace writer.");

        return;

     label04:
(1)     $r5_1 := @caughtexception;

     label05:
        $r5_2 = Phi($r5_1 #1, $r5 #5);

        $r4_3 = Phi($r4 #1, $r4_2 #5);

(2)     $r3 = staticinvoke <io.fabric.sdk.android.Fabric: io.fabric.sdk.android.Logger getLogger()>();

        interfaceinvoke $r3.<io.fabric.sdk.android.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>("CrashlyticsCore", "Failed to create PrintWriter", $r5_2);

     label06:
        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void closeOrLog(java.io.Closeable,java.lang.String)>($r4_3, "Failed to close stack trace writer.");

        return;

     label07:
        $r6_1 := @caughtexception;

        $r5_3 = Phi($r5 #0, $r5_1 #1, $r5_2 #2);

(3)     $r4_4 = Phi($r4 #0, $r4_2 #5, $r4_3 #2);

     label08:
        $r5_4 = Phi($r5_3 #3, $r5 #4);

        $r6_2 = Phi($r6_1 #3, $r6 #4);

        $r4_5 = Phi($r4_4 #3, $r4_1 #4);

        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void closeOrLog(java.io.Closeable,java.lang.String)>($r4_5, "Failed to close stack trace writer.");

        throw $r6_2;

     label09:
        $r6 := @caughtexception;

        $r4_1 = $r2;

(4)     goto label08;

     label10:
        $r5 := @caughtexception;

        $r4_2 = $r2;

(5)     goto label05;

        catch java.lang.Exception from label01 to label02 with label04;
        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Exception from label02 to label03 with label10;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label05 to label06 with label07;
    }

    private static void writeStackTrace(java.lang.Throwable, java.io.Writer)
    {
        java.io.Writer $r0;
        int $i0, $i1, $i1_1, $i1_2, $i1_3, $i1_4, $i1_5;
        java.lang.StackTraceElement $r1;
        java.lang.Exception $r2;
        java.lang.Throwable $r3, $r3_1, $r3_2, $r3_3, $r3_4;
        boolean $z0, $z0_1, $z0_2, $z0_3, $z0_4;
        java.lang.String $r4, $r5, $r4_1, $r5_1, $r5_2, $r4_2, $r4_3, $r4_4, $r5_3, $r5_4, $r5_5, $r5_6, $r4_5, $r5_7, $r4_6, $r5_8, $r4_7, $r5_9;
        java.lang.StringBuilder $r6, $r6_1, $r6_2, $r6_3, $r6_4, $r6_5, $r6_6, $r6_7, $r6_8, $r6_9, $r6_10, $r6_11, $r6_12, $r6_13;
        java.lang.Class $r7;
        java.lang.StackTraceElement[] $r8;
        io.fabric.sdk.android.Logger $r9;

        $r3 := @parameter0: java.lang.Throwable;

        $r0 := @parameter1: java.io.Writer;

(0)     $z0 = 1;

     label01:
        $r3_1 = Phi($r3 #0, $r3_2 #26);

        $r4 = Phi($r4 #0, $r4_4 #26);

        $z0_1 = Phi($z0 #0, $z0_2 #26);

        $r5 = Phi($r5 #0, $r5_4 #26);

        $r6 = Phi($r6 #0, $r6_7 #26);

        $i1 = Phi($i1 #0, $i1_2 #26);

(1)     if $r3_1 == null goto label20;

     label02:
(2)     $r4_1 = staticinvoke <com.crashlytics.android.core.ExceptionUtils: java.lang.String getMessage(java.lang.Throwable)>($r3_1);

     label03:
        $r5_1 = $r4_1;

(3)     if $r4_1 == null goto label15;

     label04:
        $r5_2 = Phi($r5_1 #3, $r5_7 #23);

        if $z0_1 == 0 goto label16;

(4)     $r4_2 = "";

     label05:
        $r4_3 = Phi($r4_2 #4, $r4_5 #24);

(5)     $r6_1 = new java.lang.StringBuilder;

     label06:
        specialinvoke $r6_1.<java.lang.StringBuilder: void <init>()>();

(6)     $r6_2 = virtualinvoke $r6_1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4_3);

        $r7 = virtualinvoke $r3_1.<java.lang.Object: java.lang.Class getClass()>();

(7)     $r4_4 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

(8)     $r6_3 = virtualinvoke $r6_2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4_4);

(9)     $r6_4 = virtualinvoke $r6_3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

(10)    $r6_5 = virtualinvoke $r6_4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5_2);

(11)    $r6_6 = virtualinvoke $r6_5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

(12)    $r5_3 = virtualinvoke $r6_6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.io.Writer: void write(java.lang.String)>($r5_3);

     label07:
(13)    $z0_2 = 0;

     label08:
        $r8 = virtualinvoke $r3_1.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();

        $i0 = lengthof $r8;

     label09:
(14)    $i1_1 = 0;

     label10:
        $r5_4 = Phi($r5_3 #14, $r5_6 #22);

        $r6_7 = Phi($r6_6 #14, $r6_11 #22);

        $i1_2 = Phi($i1_1 #14, $i1_3 #22);

(15)    if $i1_2 >= $i0 goto label17;

     label11:
        $r1 = $r8[$i1_2];

     label12:
(16)    $r6_8 = new java.lang.StringBuilder;

     label13:
        specialinvoke $r6_8.<java.lang.StringBuilder: void <init>()>();

(17)    $r6_9 = virtualinvoke $r6_8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\tat ");

(18)    $r5_5 = virtualinvoke $r1.<java.lang.StackTraceElement: java.lang.String toString()>();

(19)    $r6_10 = virtualinvoke $r6_9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5_5);

(20)    $r6_11 = virtualinvoke $r6_10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

(21)    $r5_6 = virtualinvoke $r6_11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.io.Writer: void write(java.lang.String)>($r5_6);

     label14:
        $i1_3 = $i1_2 + 1;

(22)    goto label10;

     label15:
        $r5_7 = "";

(23)    goto label04;

     label16:
        $r4_5 = "Caused by: ";

(24)    goto label05;

     label17:
(25)    $r3_2 = virtualinvoke $r3_1.<java.lang.Throwable: java.lang.Throwable getCause()>();

     label18:
(26)    goto label01;

     label19:
        $r2 := @caughtexception;

        $r3_3 = Phi($r3_1 #1, $r3_2 #25);

        $r4_6 = Phi($r4 #1, $r4_1 #2, $r4_3 #5, $r4_4 #7);

        $z0_3 = Phi($z0_1 #1, $z0_2 #13);

        $r5_8 = Phi($r5 #1, $r5_2 #5, $r5_3 #12, $r5_4 #15, $r5_5 #18, $r5_6 #21);

        $r6_12 = Phi($r6 #1, $r6_1 #5, $r6_2 #6, $r6_3 #8, $r6_4 #9, $r6_5 #10, $r6_6 #11, $r6_7 #15, $r6_8 #16, $r6_9 #17, $r6_10 #19, $r6_11 #20);

        $i1_4 = Phi($i1 #1, $i1_2 #15);

        $r9 = staticinvoke <io.fabric.sdk.android.Fabric: io.fabric.sdk.android.Logger getLogger()>();

(27)    interfaceinvoke $r9.<io.fabric.sdk.android.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>("CrashlyticsCore", "Could not write stack trace", $r2);

     label20:
        $r3_4 = Phi($r3_1 #1, $r3_3 #27);

        $r4_7 = Phi($r4 #1, $r4_6 #27);

        $z0_4 = Phi($z0_1 #1, $z0_3 #27);

        $r5_9 = Phi($r5 #1, $r5_8 #27);

        $r6_13 = Phi($r6 #1, $r6_12 #27);

        $i1_5 = Phi($i1 #1, $i1_4 #27);

        return;

        catch java.lang.Exception from label02 to label03 with label19;
        catch java.lang.Exception from label06 to label07 with label19;
        catch java.lang.Exception from label08 to label09 with label19;
        catch java.lang.Exception from label11 to label12 with label19;
        catch java.lang.Exception from label13 to label14 with label19;
        catch java.lang.Exception from label17 to label18 with label19;
    }

    public static void writeStackTraceIfNotNull(java.lang.Throwable, java.io.OutputStream)
    {
        java.lang.Throwable $r0;
        java.io.OutputStream $r1;

        $r0 := @parameter0: java.lang.Throwable;

        $r1 := @parameter1: java.io.OutputStream;

        if $r1 == null goto label1;

        staticinvoke <com.crashlytics.android.core.ExceptionUtils: void writeStackTrace(java.lang.Throwable,java.io.OutputStream)>($r0, $r1);

     label1:
        return;
    }
}
