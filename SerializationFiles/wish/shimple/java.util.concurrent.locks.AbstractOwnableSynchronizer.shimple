public abstract class java.util.concurrent.locks.AbstractOwnableSynchronizer extends java.lang.Object implements java.io.Serializable
{

    protected void <init>()
    {
        java.util.concurrent.locks.AbstractOwnableSynchronizer r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.locks.AbstractOwnableSynchronizer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    protected final void setExclusiveOwnerThread(java.lang.Thread)
    {
        java.util.concurrent.locks.AbstractOwnableSynchronizer r0;
        java.lang.Thread r1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.util.concurrent.locks.AbstractOwnableSynchronizer;

        r1 := @parameter0: java.lang.Thread;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    protected final java.lang.Thread getExclusiveOwnerThread()
    {
        java.util.concurrent.locks.AbstractOwnableSynchronizer r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.locks.AbstractOwnableSynchronizer;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }
}
