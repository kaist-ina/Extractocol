class android.support.v4.view.ViewCompat$BaseViewCompatImpl extends java.lang.Object implements android.support.v4.view.ViewCompat$ViewCompatImpl
{
    private java.lang.reflect.Method mDispatchFinishTemporaryDetach;
    private java.lang.reflect.Method mDispatchStartTemporaryDetach;
    private boolean mTempDetachBound;
    java.util.WeakHashMap mViewPropertyAnimatorCompatMap;

    void <init>()
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<android.support.v4.view.ViewCompat$BaseViewCompatImpl: java.util.WeakHashMap mViewPropertyAnimatorCompatMap> = null;

        return;
    }

    private void bindTempDetach()
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        java.lang.NoSuchMethodException $r1;
        java.lang.Class $r2, $r2_1, $r2_2, $r2_3;
        java.lang.Class[] $r3, $r3_1, $r3_2, $r3_3;
        java.lang.reflect.Method $r4, $r4_1, $r4_2, $r4_3;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r2 = class "android/view/View";

(0)     $r3 = newarray (java.lang.Class)[0];

     label1:
        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("dispatchStartTemporaryDetach", $r3);

     label2:
        $r0.<android.support.v4.view.ViewCompat$BaseViewCompatImpl: java.lang.reflect.Method mDispatchStartTemporaryDetach> = $r4;

        $r2_1 = class "android/view/View";

(1)     $r3_1 = newarray (java.lang.Class)[0];

     label3:
(2)     $r4_1 = virtualinvoke $r2_1.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("dispatchFinishTemporaryDetach", $r3_1);

     label4:
(3)     $r0.<android.support.v4.view.ViewCompat$BaseViewCompatImpl: java.lang.reflect.Method mDispatchFinishTemporaryDetach> = $r4_1;

     label5:
        $r4_2 = Phi($r4_1 #3, $r4_3 #4);

        $r2_2 = Phi($r2_1 #3, $r2_3 #4);

        $r3_2 = Phi($r3_1 #3, $r3_3 #4);

        $r0.<android.support.v4.view.ViewCompat$BaseViewCompatImpl: boolean mTempDetachBound> = 1;

        return;

     label6:
        $r1 := @caughtexception;

        $r4_3 = Phi($r4 #0, $r4_1 #2);

        $r2_3 = Phi($r2 #0, $r2_1 #1);

        $r3_3 = Phi($r3 #0, $r3_1 #1);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ViewCompat", "Couldn\'t find method", $r1);

(4)     goto label5;

        catch java.lang.NoSuchMethodException from label1 to label2 with label6;
        catch java.lang.NoSuchMethodException from label3 to label4 with label6;
    }

    private boolean canScrollingViewScrollHorizontally(android.support.v4.view.ScrollingView, int)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.support.v4.view.ScrollingView $r1;
        int $i0, $i1, $i2, $i3, $i2_1, $i0_1, $i0_2;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.support.v4.view.ScrollingView;

        $i0 := @parameter1: int;

        $i1 = interfaceinvoke $r1.<android.support.v4.view.ScrollingView: int computeHorizontalScrollOffset()>();

        $i2 = interfaceinvoke $r1.<android.support.v4.view.ScrollingView: int computeHorizontalScrollRange()>();

        $i3 = interfaceinvoke $r1.<android.support.v4.view.ScrollingView: int computeHorizontalScrollExtent()>();

        $i2_1 = $i2 - $i3;

        if $i2_1 != 0 goto label1;

        return 0;

     label1:
        if $i0 >= 0 goto label2;

(0)     if $i1 > 0 goto label3;

        return 0;

     label2:
        $i0_1 = $i2_1 + -1;

(1)     if $i1 < $i0_1 goto label3;

        return 0;

     label3:
        $i0_2 = Phi($i0 #0, $i0_1 #1);

        return 1;
    }

    private boolean canScrollingViewScrollVertically(android.support.v4.view.ScrollingView, int)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.support.v4.view.ScrollingView $r1;
        int $i0, $i1, $i2, $i3, $i2_1, $i0_1, $i0_2;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.support.v4.view.ScrollingView;

        $i0 := @parameter1: int;

        $i1 = interfaceinvoke $r1.<android.support.v4.view.ScrollingView: int computeVerticalScrollOffset()>();

        $i2 = interfaceinvoke $r1.<android.support.v4.view.ScrollingView: int computeVerticalScrollRange()>();

        $i3 = interfaceinvoke $r1.<android.support.v4.view.ScrollingView: int computeVerticalScrollExtent()>();

        $i2_1 = $i2 - $i3;

        if $i2_1 != 0 goto label1;

        return 0;

     label1:
        if $i0 >= 0 goto label2;

(0)     if $i1 > 0 goto label3;

        return 0;

     label2:
        $i0_1 = $i2_1 + -1;

(1)     if $i1 < $i0_1 goto label3;

        return 0;

     label3:
        $i0_2 = Phi($i0 #0, $i0_1 #1);

        return 1;
    }

    public android.support.v4.view.ViewPropertyAnimatorCompat animate(android.view.View)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        android.support.v4.view.ViewPropertyAnimatorCompat $r2;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $r2 = new android.support.v4.view.ViewPropertyAnimatorCompat;

        specialinvoke $r2.<android.support.v4.view.ViewPropertyAnimatorCompat: void <init>(android.view.View)>($r1);

        return $r2;
    }

    public boolean canScrollHorizontally(android.view.View, int)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        int $i0;
        boolean $z0, $z0_1, $z0_2;
        android.support.v4.view.ScrollingView $r2;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $i0 := @parameter1: int;

        $z0 = $r1 instanceof android.support.v4.view.ScrollingView;

(0)     if $z0 == 0 goto label1;

        $r2 = (android.support.v4.view.ScrollingView) $r1;

        $z0_1 = specialinvoke $r0.<android.support.v4.view.ViewCompat$BaseViewCompatImpl: boolean canScrollingViewScrollHorizontally(android.support.v4.view.ScrollingView,int)>($r2, $i0);

(1)     if $z0_1 == 0 goto label1;

        return 1;

     label1:
        $z0_2 = Phi($z0 #0, $z0_1 #1);

        return 0;
    }

    public boolean canScrollVertically(android.view.View, int)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        int $i0;
        boolean $z0, $z0_1, $z0_2;
        android.support.v4.view.ScrollingView $r2;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $i0 := @parameter1: int;

        $z0 = $r1 instanceof android.support.v4.view.ScrollingView;

(0)     if $z0 == 0 goto label1;

        $r2 = (android.support.v4.view.ScrollingView) $r1;

        $z0_1 = specialinvoke $r0.<android.support.v4.view.ViewCompat$BaseViewCompatImpl: boolean canScrollingViewScrollVertically(android.support.v4.view.ScrollingView,int)>($r2, $i0);

(1)     if $z0_1 == 0 goto label1;

        return 1;

     label1:
        $z0_2 = Phi($z0 #0, $z0_1 #1);

        return 0;
    }

    public int combineMeasuredStates(int, int)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        int $i0, $i1, $i1_1;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $i1 := @parameter0: int;

        $i0 := @parameter1: int;

        $i1_1 = $i1 | $i0;

        return $i1_1;
    }

    public android.support.v4.view.WindowInsetsCompat dispatchApplyWindowInsets(android.view.View, android.support.v4.view.WindowInsetsCompat)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        android.support.v4.view.WindowInsetsCompat $r2;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $r2 := @parameter1: android.support.v4.view.WindowInsetsCompat;

        return $r2;
    }

    public void dispatchFinishTemporaryDetach(android.view.View)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        boolean $z0;
        java.lang.Object[] $r2;
        java.lang.Exception $r3;
        java.lang.reflect.Method $r4, $r4_1, $r4_2;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $z0 = $r0.<android.support.v4.view.ViewCompat$BaseViewCompatImpl: boolean mTempDetachBound>;

        if $z0 != 0 goto label1;

        specialinvoke $r0.<android.support.v4.view.ViewCompat$BaseViewCompatImpl: void bindTempDetach()>();

     label1:
        $r4 = $r0.<android.support.v4.view.ViewCompat$BaseViewCompatImpl: java.lang.reflect.Method mDispatchFinishTemporaryDetach>;

(0)     if $r4 == null goto label5;

     label2:
(1)     $r4_1 = $r0.<android.support.v4.view.ViewCompat$BaseViewCompatImpl: java.lang.reflect.Method mDispatchFinishTemporaryDetach>;

        $r2 = newarray (java.lang.Object)[0];

        virtualinvoke $r4_1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r1, $r2);

     label3:
        return;

     label4:
        $r3 := @caughtexception;

        $r4_2 = Phi($r4 #0, $r4_1 #1);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("ViewCompat", "Error calling dispatchFinishTemporaryDetach", $r3);

        return;

     label5:
        virtualinvoke $r1.<android.view.View: void onFinishTemporaryDetach()>();

        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public boolean dispatchNestedFling(android.view.View, float, float, boolean)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        float $f0, $f1;
        boolean $z0, $z1, $z1_1;
        android.support.v4.view.NestedScrollingChild $r2;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $f0 := @parameter1: float;

        $f1 := @parameter2: float;

        $z1 := @parameter3: boolean;

        $z0 = $r1 instanceof android.support.v4.view.NestedScrollingChild;

        if $z0 == 0 goto label1;

        $r2 = (android.support.v4.view.NestedScrollingChild) $r1;

        $z1_1 = interfaceinvoke $r2.<android.support.v4.view.NestedScrollingChild: boolean dispatchNestedFling(float,float,boolean)>($f0, $f1, $z1);

        return $z1_1;

     label1:
        return 0;
    }

    public boolean dispatchNestedPreFling(android.view.View, float, float)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        float $f0, $f1;
        boolean $z0, $z0_1;
        android.support.v4.view.NestedScrollingChild $r2;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $f0 := @parameter1: float;

        $f1 := @parameter2: float;

        $z0 = $r1 instanceof android.support.v4.view.NestedScrollingChild;

        if $z0 == 0 goto label1;

        $r2 = (android.support.v4.view.NestedScrollingChild) $r1;

        $z0_1 = interfaceinvoke $r2.<android.support.v4.view.NestedScrollingChild: boolean dispatchNestedPreFling(float,float)>($f0, $f1);

        return $z0_1;

     label1:
        return 0;
    }

    public boolean dispatchNestedPreScroll(android.view.View, int, int, int[], int[])
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        int $i0, $i1;
        int[] $r2, $r3;
        boolean $z0, $z0_1;
        android.support.v4.view.NestedScrollingChild $r4;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: int[];

        $r3 := @parameter4: int[];

        $z0 = $r1 instanceof android.support.v4.view.NestedScrollingChild;

        if $z0 == 0 goto label1;

        $r4 = (android.support.v4.view.NestedScrollingChild) $r1;

        $z0_1 = interfaceinvoke $r4.<android.support.v4.view.NestedScrollingChild: boolean dispatchNestedPreScroll(int,int,int[],int[])>($i0, $i1, $r2, $r3);

        return $z0_1;

     label1:
        return 0;
    }

    public boolean dispatchNestedScroll(android.view.View, int, int, int, int, int[])
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        int $i0, $i1, $i2, $i3;
        int[] $r2;
        boolean $z0, $z0_1;
        android.support.v4.view.NestedScrollingChild $r3;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $r2 := @parameter5: int[];

        $z0 = $r1 instanceof android.support.v4.view.NestedScrollingChild;

        if $z0 == 0 goto label1;

        $r3 = (android.support.v4.view.NestedScrollingChild) $r1;

        $z0_1 = interfaceinvoke $r3.<android.support.v4.view.NestedScrollingChild: boolean dispatchNestedScroll(int,int,int,int,int[])>($i0, $i1, $i2, $i3, $r2);

        return $z0_1;

     label1:
        return 0;
    }

    public void dispatchStartTemporaryDetach(android.view.View)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        boolean $z0;
        java.lang.Object[] $r2;
        java.lang.Exception $r3;
        java.lang.reflect.Method $r4, $r4_1, $r4_2;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $z0 = $r0.<android.support.v4.view.ViewCompat$BaseViewCompatImpl: boolean mTempDetachBound>;

        if $z0 != 0 goto label1;

        specialinvoke $r0.<android.support.v4.view.ViewCompat$BaseViewCompatImpl: void bindTempDetach()>();

     label1:
        $r4 = $r0.<android.support.v4.view.ViewCompat$BaseViewCompatImpl: java.lang.reflect.Method mDispatchStartTemporaryDetach>;

(0)     if $r4 == null goto label5;

     label2:
(1)     $r4_1 = $r0.<android.support.v4.view.ViewCompat$BaseViewCompatImpl: java.lang.reflect.Method mDispatchStartTemporaryDetach>;

        $r2 = newarray (java.lang.Object)[0];

        virtualinvoke $r4_1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r1, $r2);

     label3:
        return;

     label4:
        $r3 := @caughtexception;

        $r4_2 = Phi($r4 #0, $r4_1 #1);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("ViewCompat", "Error calling dispatchStartTemporaryDetach", $r3);

        return;

     label5:
        virtualinvoke $r1.<android.view.View: void onStartTemporaryDetach()>();

        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public int getAccessibilityLiveRegion(android.view.View)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        return 0;
    }

    public android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(android.view.View)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        return null;
    }

    public float getAlpha(android.view.View)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        return 1.0F;
    }

    public android.content.res.ColorStateList getBackgroundTintList(android.view.View)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        android.content.res.ColorStateList $r2;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $r2 = staticinvoke <android.support.v4.view.ViewCompatBase: android.content.res.ColorStateList getBackgroundTintList(android.view.View)>($r1);

        return $r2;
    }

    public android.graphics.PorterDuff$Mode getBackgroundTintMode(android.view.View)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        android.graphics.PorterDuff$Mode $r2;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $r2 = staticinvoke <android.support.v4.view.ViewCompatBase: android.graphics.PorterDuff$Mode getBackgroundTintMode(android.view.View)>($r1);

        return $r2;
    }

    public float getElevation(android.view.View)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        return 0.0F;
    }

    public boolean getFitsSystemWindows(android.view.View)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        return 0;
    }

    long getFrameTime()
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        return 10L;
    }

    public int getImportantForAccessibility(android.view.View)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        return 0;
    }

    public int getLabelFor(android.view.View)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        return 0;
    }

    public int getLayerType(android.view.View)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        return 0;
    }

    public int getLayoutDirection(android.view.View)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        return 0;
    }

    public int getMeasuredHeightAndState(android.view.View)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        int $i0;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $i0 = virtualinvoke $r1.<android.view.View: int getMeasuredHeight()>();

        return $i0;
    }

    public int getMeasuredState(android.view.View)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        return 0;
    }

    public int getMeasuredWidthAndState(android.view.View)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        int $i0;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $i0 = virtualinvoke $r1.<android.view.View: int getMeasuredWidth()>();

        return $i0;
    }

    public int getMinimumHeight(android.view.View)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        int $i0;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $i0 = staticinvoke <android.support.v4.view.ViewCompatBase: int getMinimumHeight(android.view.View)>($r1);

        return $i0;
    }

    public int getMinimumWidth(android.view.View)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        int $i0;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $i0 = staticinvoke <android.support.v4.view.ViewCompatBase: int getMinimumWidth(android.view.View)>($r1);

        return $i0;
    }

    public int getOverScrollMode(android.view.View)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        return 2;
    }

    public int getPaddingEnd(android.view.View)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        int $i0;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $i0 = virtualinvoke $r1.<android.view.View: int getPaddingRight()>();

        return $i0;
    }

    public int getPaddingStart(android.view.View)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        int $i0;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $i0 = virtualinvoke $r1.<android.view.View: int getPaddingLeft()>();

        return $i0;
    }

    public android.view.ViewParent getParentForAccessibility(android.view.View)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        android.view.ViewParent $r2;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $r2 = virtualinvoke $r1.<android.view.View: android.view.ViewParent getParent()>();

        return $r2;
    }

    public float getPivotX(android.view.View)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        return 0.0F;
    }

    public float getPivotY(android.view.View)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        return 0.0F;
    }

    public float getRotation(android.view.View)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        return 0.0F;
    }

    public float getRotationX(android.view.View)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        return 0.0F;
    }

    public float getRotationY(android.view.View)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        return 0.0F;
    }

    public float getScaleX(android.view.View)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        return 0.0F;
    }

    public float getScaleY(android.view.View)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        return 0.0F;
    }

    public java.lang.String getTransitionName(android.view.View)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        return null;
    }

    public float getTranslationX(android.view.View)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        return 0.0F;
    }

    public float getTranslationY(android.view.View)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        return 0.0F;
    }

    public float getTranslationZ(android.view.View)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        return 0.0F;
    }

    public int getWindowSystemUiVisibility(android.view.View)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        return 0;
    }

    public float getX(android.view.View)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        return 0.0F;
    }

    public float getY(android.view.View)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        return 0.0F;
    }

    public float getZ(android.view.View)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        float $f0, $f1, $f0_1;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $f0 = virtualinvoke $r0.<android.support.v4.view.ViewCompat$BaseViewCompatImpl: float getTranslationZ(android.view.View)>($r1);

        $f1 = virtualinvoke $r0.<android.support.v4.view.ViewCompat$BaseViewCompatImpl: float getElevation(android.view.View)>($r1);

        $f0_1 = $f0 + $f1;

        return $f0_1;
    }

    public boolean hasAccessibilityDelegate(android.view.View)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        return 0;
    }

    public boolean hasNestedScrollingParent(android.view.View)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        boolean $z0, $z0_1;
        android.support.v4.view.NestedScrollingChild $r2;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $z0 = $r1 instanceof android.support.v4.view.NestedScrollingChild;

        if $z0 == 0 goto label1;

        $r2 = (android.support.v4.view.NestedScrollingChild) $r1;

        $z0_1 = interfaceinvoke $r2.<android.support.v4.view.NestedScrollingChild: boolean hasNestedScrollingParent()>();

        return $z0_1;

     label1:
        return 0;
    }

    public boolean hasTransientState(android.view.View)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        return 0;
    }

    public boolean isAttachedToWindow(android.view.View)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        boolean $z0;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $z0 = staticinvoke <android.support.v4.view.ViewCompatBase: boolean isAttachedToWindow(android.view.View)>($r1);

        return $z0;
    }

    public boolean isImportantForAccessibility(android.view.View)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        return 1;
    }

    public boolean isLaidOut(android.view.View)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        boolean $z0;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $z0 = staticinvoke <android.support.v4.view.ViewCompatBase: boolean isLaidOut(android.view.View)>($r1);

        return $z0;
    }

    public boolean isNestedScrollingEnabled(android.view.View)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        boolean $z0, $z0_1;
        android.support.v4.view.NestedScrollingChild $r2;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $z0 = $r1 instanceof android.support.v4.view.NestedScrollingChild;

        if $z0 == 0 goto label1;

        $r2 = (android.support.v4.view.NestedScrollingChild) $r1;

        $z0_1 = interfaceinvoke $r2.<android.support.v4.view.NestedScrollingChild: boolean isNestedScrollingEnabled()>();

        return $z0_1;

     label1:
        return 0;
    }

    public boolean isOpaque(android.view.View)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        android.graphics.drawable.Drawable $r2;
        int $i0;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $r2 = virtualinvoke $r1.<android.view.View: android.graphics.drawable.Drawable getBackground()>();

        if $r2 == null goto label1;

        $i0 = virtualinvoke $r2.<android.graphics.drawable.Drawable: int getOpacity()>();

        if $i0 != -1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isPaddingRelative(android.view.View)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        return 0;
    }

    public void jumpDrawablesToCurrentState(android.view.View)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        return;
    }

    public android.support.v4.view.WindowInsetsCompat onApplyWindowInsets(android.view.View, android.support.v4.view.WindowInsetsCompat)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        android.support.v4.view.WindowInsetsCompat $r2;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $r2 := @parameter1: android.support.v4.view.WindowInsetsCompat;

        return $r2;
    }

    public void onInitializeAccessibilityEvent(android.view.View, android.view.accessibility.AccessibilityEvent)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        android.view.accessibility.AccessibilityEvent $r2;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $r2 := @parameter1: android.view.accessibility.AccessibilityEvent;

        return;
    }

    public void onInitializeAccessibilityNodeInfo(android.view.View, android.support.v4.view.accessibility.AccessibilityNodeInfoCompat)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat $r2;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $r2 := @parameter1: android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;

        return;
    }

    public void onPopulateAccessibilityEvent(android.view.View, android.view.accessibility.AccessibilityEvent)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        android.view.accessibility.AccessibilityEvent $r2;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $r2 := @parameter1: android.view.accessibility.AccessibilityEvent;

        return;
    }

    public boolean performAccessibilityAction(android.view.View, int, android.os.Bundle)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        int $i0;
        android.os.Bundle $r2;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $i0 := @parameter1: int;

        $r2 := @parameter2: android.os.Bundle;

        return 0;
    }

    public void postInvalidateOnAnimation(android.view.View)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        virtualinvoke $r1.<android.view.View: void invalidate()>();

        return;
    }

    public void postInvalidateOnAnimation(android.view.View, int, int, int, int)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        int $i0, $i1, $i2, $i3;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        virtualinvoke $r1.<android.view.View: void invalidate(int,int,int,int)>($i0, $i1, $i2, $i3);

        return;
    }

    public void postOnAnimation(android.view.View, java.lang.Runnable)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        java.lang.Runnable $r2;
        long $l0;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $r2 := @parameter1: java.lang.Runnable;

        $l0 = virtualinvoke $r0.<android.support.v4.view.ViewCompat$BaseViewCompatImpl: long getFrameTime()>();

        virtualinvoke $r1.<android.view.View: boolean postDelayed(java.lang.Runnable,long)>($r2, $l0);

        return;
    }

    public void postOnAnimationDelayed(android.view.View, java.lang.Runnable, long)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        java.lang.Runnable $r2;
        long $l0, $l1, $l1_1;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $r2 := @parameter1: java.lang.Runnable;

        $l1 := @parameter2: long;

        $l0 = virtualinvoke $r0.<android.support.v4.view.ViewCompat$BaseViewCompatImpl: long getFrameTime()>();

        $l1_1 = $l0 + $l1;

        virtualinvoke $r1.<android.view.View: boolean postDelayed(java.lang.Runnable,long)>($r2, $l1_1);

        return;
    }

    public void requestApplyInsets(android.view.View)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        return;
    }

    public int resolveSizeAndState(int, int, int)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        int $i0, $i1, $i2, $i2_1;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $i2 := @parameter0: int;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2_1 = staticinvoke <android.view.View: int resolveSize(int,int)>($i2, $i0);

        return $i2_1;
    }

    public void setAccessibilityDelegate(android.view.View, android.support.v4.view.AccessibilityDelegateCompat)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        android.support.v4.view.AccessibilityDelegateCompat $r2;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $r2 := @parameter1: android.support.v4.view.AccessibilityDelegateCompat;

        return;
    }

    public void setAccessibilityLiveRegion(android.view.View, int)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        int $i0;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $i0 := @parameter1: int;

        return;
    }

    public void setActivated(android.view.View, boolean)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        boolean $z0;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $z0 := @parameter1: boolean;

        return;
    }

    public void setAlpha(android.view.View, float)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        float $f0;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $f0 := @parameter1: float;

        return;
    }

    public void setBackgroundTintList(android.view.View, android.content.res.ColorStateList)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        android.content.res.ColorStateList $r2;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $r2 := @parameter1: android.content.res.ColorStateList;

        staticinvoke <android.support.v4.view.ViewCompatBase: void setBackgroundTintList(android.view.View,android.content.res.ColorStateList)>($r1, $r2);

        return;
    }

    public void setBackgroundTintMode(android.view.View, android.graphics.PorterDuff$Mode)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        android.graphics.PorterDuff$Mode $r2;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $r2 := @parameter1: android.graphics.PorterDuff$Mode;

        staticinvoke <android.support.v4.view.ViewCompatBase: void setBackgroundTintMode(android.view.View,android.graphics.PorterDuff$Mode)>($r1, $r2);

        return;
    }

    public void setChildrenDrawingOrderEnabled(android.view.ViewGroup, boolean)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.ViewGroup $r1;
        boolean $z0;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.ViewGroup;

        $z0 := @parameter1: boolean;

        return;
    }

    public void setElevation(android.view.View, float)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        float $f0;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $f0 := @parameter1: float;

        return;
    }

    public void setFitsSystemWindows(android.view.View, boolean)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        boolean $z0;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $z0 := @parameter1: boolean;

        return;
    }

    public void setHasTransientState(android.view.View, boolean)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        boolean $z0;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $z0 := @parameter1: boolean;

        return;
    }

    public void setImportantForAccessibility(android.view.View, int)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        int $i0;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $i0 := @parameter1: int;

        return;
    }

    public void setLabelFor(android.view.View, int)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        int $i0;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $i0 := @parameter1: int;

        return;
    }

    public void setLayerPaint(android.view.View, android.graphics.Paint)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        android.graphics.Paint $r2;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $r2 := @parameter1: android.graphics.Paint;

        return;
    }

    public void setLayerType(android.view.View, int, android.graphics.Paint)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        int $i0;
        android.graphics.Paint $r2;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $i0 := @parameter1: int;

        $r2 := @parameter2: android.graphics.Paint;

        return;
    }

    public void setLayoutDirection(android.view.View, int)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        int $i0;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $i0 := @parameter1: int;

        return;
    }

    public void setNestedScrollingEnabled(android.view.View, boolean)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        boolean $z0, $z1;
        android.support.v4.view.NestedScrollingChild $r2;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $z0 := @parameter1: boolean;

        $z1 = $r1 instanceof android.support.v4.view.NestedScrollingChild;

        if $z1 == 0 goto label1;

        $r2 = (android.support.v4.view.NestedScrollingChild) $r1;

        interfaceinvoke $r2.<android.support.v4.view.NestedScrollingChild: void setNestedScrollingEnabled(boolean)>($z0);

     label1:
        return;
    }

    public void setOnApplyWindowInsetsListener(android.view.View, android.support.v4.view.OnApplyWindowInsetsListener)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        android.support.v4.view.OnApplyWindowInsetsListener $r2;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $r2 := @parameter1: android.support.v4.view.OnApplyWindowInsetsListener;

        return;
    }

    public void setOverScrollMode(android.view.View, int)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        int $i0;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $i0 := @parameter1: int;

        return;
    }

    public void setPaddingRelative(android.view.View, int, int, int, int)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        int $i0, $i1, $i2, $i3;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        virtualinvoke $r1.<android.view.View: void setPadding(int,int,int,int)>($i0, $i1, $i2, $i3);

        return;
    }

    public void setPivotX(android.view.View, float)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        float $f0;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $f0 := @parameter1: float;

        return;
    }

    public void setPivotY(android.view.View, float)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        float $f0;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $f0 := @parameter1: float;

        return;
    }

    public void setRotation(android.view.View, float)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        float $f0;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $f0 := @parameter1: float;

        return;
    }

    public void setRotationX(android.view.View, float)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        float $f0;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $f0 := @parameter1: float;

        return;
    }

    public void setRotationY(android.view.View, float)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        float $f0;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $f0 := @parameter1: float;

        return;
    }

    public void setSaveFromParentEnabled(android.view.View, boolean)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        boolean $z0;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $z0 := @parameter1: boolean;

        return;
    }

    public void setScaleX(android.view.View, float)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        float $f0;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $f0 := @parameter1: float;

        return;
    }

    public void setScaleY(android.view.View, float)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        float $f0;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $f0 := @parameter1: float;

        return;
    }

    public void setTransitionName(android.view.View, java.lang.String)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        java.lang.String $r2;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $r2 := @parameter1: java.lang.String;

        return;
    }

    public void setTranslationX(android.view.View, float)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        float $f0;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $f0 := @parameter1: float;

        return;
    }

    public void setTranslationY(android.view.View, float)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        float $f0;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $f0 := @parameter1: float;

        return;
    }

    public void setTranslationZ(android.view.View, float)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        float $f0;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $f0 := @parameter1: float;

        return;
    }

    public void setX(android.view.View, float)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        float $f0;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $f0 := @parameter1: float;

        return;
    }

    public void setY(android.view.View, float)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        float $f0;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $f0 := @parameter1: float;

        return;
    }

    public boolean startNestedScroll(android.view.View, int)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        int $i0;
        boolean $z0, $z0_1;
        android.support.v4.view.NestedScrollingChild $r2;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $i0 := @parameter1: int;

        $z0 = $r1 instanceof android.support.v4.view.NestedScrollingChild;

        if $z0 == 0 goto label1;

        $r2 = (android.support.v4.view.NestedScrollingChild) $r1;

        $z0_1 = interfaceinvoke $r2.<android.support.v4.view.NestedScrollingChild: boolean startNestedScroll(int)>($i0);

        return $z0_1;

     label1:
        return 0;
    }

    public void stopNestedScroll(android.view.View)
    {
        android.support.v4.view.ViewCompat$BaseViewCompatImpl $r0;
        android.view.View $r1;
        boolean $z0;
        android.support.v4.view.NestedScrollingChild $r2;

        $r0 := @this: android.support.v4.view.ViewCompat$BaseViewCompatImpl;

        $r1 := @parameter0: android.view.View;

        $z0 = $r1 instanceof android.support.v4.view.NestedScrollingChild;

        if $z0 == 0 goto label1;

        $r2 = (android.support.v4.view.NestedScrollingChild) $r1;

        interfaceinvoke $r2.<android.support.v4.view.NestedScrollingChild: void stopNestedScroll()>();

     label1:
        return;
    }
}
