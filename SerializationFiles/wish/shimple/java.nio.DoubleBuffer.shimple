public abstract class java.nio.DoubleBuffer extends java.nio.Buffer implements java.lang.Comparable
{

    void <init>()
    {
        java.nio.DoubleBuffer r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.nio.DoubleBuffer;

        specialinvoke r0.<java.nio.Buffer: void <init>()>();

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public static java.nio.DoubleBuffer allocate(int)
    {
        int i0;
        java.lang.RuntimeException $r0;

        i0 := @parameter0: int;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static java.nio.DoubleBuffer wrap(double[])
    {
        double[] r0;
        java.lang.RuntimeException $r1;

        r0 := @parameter0: double[];

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public static java.nio.DoubleBuffer wrap(double[], int, int)
    {
        double[] r0;
        int i0, i1;
        java.lang.RuntimeException $r1;

        r0 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public final double[] array()
    {
        java.nio.DoubleBuffer r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.nio.DoubleBuffer;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public final int arrayOffset()
    {
        java.nio.DoubleBuffer r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.nio.DoubleBuffer;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public abstract java.nio.DoubleBuffer asReadOnlyBuffer();

    public abstract java.nio.DoubleBuffer compact();

    public int compareTo(java.nio.DoubleBuffer)
    {
        java.nio.DoubleBuffer r0, r1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.nio.DoubleBuffer;

        r1 := @parameter0: java.nio.DoubleBuffer;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public abstract java.nio.DoubleBuffer duplicate();

    public boolean equals(java.lang.Object)
    {
        java.nio.DoubleBuffer r0;
        java.lang.Object r1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.nio.DoubleBuffer;

        r1 := @parameter0: java.lang.Object;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public abstract double get();

    public java.nio.DoubleBuffer get(double[])
    {
        java.nio.DoubleBuffer r0;
        double[] r1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.nio.DoubleBuffer;

        r1 := @parameter0: double[];

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public java.nio.DoubleBuffer get(double[], int, int)
    {
        java.nio.DoubleBuffer r0;
        double[] r1;
        int i0, i1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.nio.DoubleBuffer;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public abstract double get(int);

    public final boolean hasArray()
    {
        java.nio.DoubleBuffer r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.nio.DoubleBuffer;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public int hashCode()
    {
        java.nio.DoubleBuffer r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.nio.DoubleBuffer;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public abstract boolean isDirect();

    public abstract java.nio.ByteOrder order();

    public abstract java.nio.DoubleBuffer put(double);

    public final java.nio.DoubleBuffer put(double[])
    {
        java.nio.DoubleBuffer r0;
        double[] r1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.nio.DoubleBuffer;

        r1 := @parameter0: double[];

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public java.nio.DoubleBuffer put(double[], int, int)
    {
        java.nio.DoubleBuffer r0;
        double[] r1;
        int i0, i1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.nio.DoubleBuffer;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public java.nio.DoubleBuffer put(java.nio.DoubleBuffer)
    {
        java.nio.DoubleBuffer r0, r1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.nio.DoubleBuffer;

        r1 := @parameter0: java.nio.DoubleBuffer;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public abstract java.nio.DoubleBuffer put(int, double);

    public abstract java.nio.DoubleBuffer slice();

    public volatile java.lang.Object array()
    {
        java.nio.DoubleBuffer r0;
        double[] $r1;

        r0 := @this: java.nio.DoubleBuffer;

        $r1 = virtualinvoke r0.<java.nio.DoubleBuffer: double[] array()>();

        return $r1;
    }

    public volatile int compareTo(java.lang.Object)
    {
        java.nio.DoubleBuffer r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: java.nio.DoubleBuffer;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.nio.DoubleBuffer) r1;

        $i0 = virtualinvoke r0.<java.nio.DoubleBuffer: int compareTo(java.nio.DoubleBuffer)>($r2);

        return $i0;
    }
}
