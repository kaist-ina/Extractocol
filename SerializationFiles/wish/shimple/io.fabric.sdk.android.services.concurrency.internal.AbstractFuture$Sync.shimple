final class io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync extends java.util.concurrent.locks.AbstractQueuedSynchronizer
{
    static final int CANCELLED;
    static final int COMPLETED;
    static final int COMPLETING;
    static final int INTERRUPTED;
    static final int RUNNING;
    private static final long serialVersionUID;
    private java.lang.Throwable exception;
    private java.lang.Object value;

    void <init>()
    {
        io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync $r0;

        $r0 := @this: io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync;

        specialinvoke $r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer: void <init>()>();

        return;
    }

    private boolean complete(java.lang.Object, java.lang.Throwable, int)
    {
        io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync $r0;
        java.lang.Object $r1;
        int $i0, $i1, $i1_1;
        java.util.concurrent.CancellationException $r2;
        java.lang.Throwable $r3, $r3_1, $r3_2;
        boolean $z0;

        $r0 := @this: io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync;

        $r1 := @parameter0: java.lang.Object;

        $r3 := @parameter1: java.lang.Throwable;

        $i1 := @parameter2: int;

        $z0 = virtualinvoke $r0.<io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync: boolean compareAndSetState(int,int)>(0, 1);

        if $z0 == 0 goto label2;

        $r0.<io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync: java.lang.Object value> = $r1;

        $i0 = $i1 & 12;

(0)     if $i0 == 0 goto label1;

        $r2 = new java.util.concurrent.CancellationException;

        $r3_1 = $r2;

(1)     specialinvoke $r2.<java.util.concurrent.CancellationException: void <init>(java.lang.String)>("Future.cancel() was called.");

     label1:
        $r3_2 = Phi($r3 #0, $r3_1 #1);

        $r0.<io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync: java.lang.Throwable exception> = $r3_2;

        virtualinvoke $r0.<io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync: boolean releaseShared(int)>($i1);

        return $z0;

     label2:
        $i1_1 = virtualinvoke $r0.<io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync: int getState()>();

        if $i1_1 != 1 goto label3;

        virtualinvoke $r0.<io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync: void acquireShared(int)>(-1);

     label3:
        return $z0;
    }

    private java.lang.Object getValue() throws java.util.concurrent.CancellationException, java.util.concurrent.ExecutionException
    {
        io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync $r0;
        java.lang.IllegalStateException $r1;
        java.util.concurrent.ExecutionException $r2;
        int $i0;
        java.lang.StringBuilder $r3, $r3_1, $r3_2;
        java.lang.String $r4;
        java.lang.Throwable $r5, $r5_1, $r5_2;
        java.util.concurrent.CancellationException $r6;
        java.lang.Object r7;

        $r0 := @this: io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync;

        $i0 = virtualinvoke $r0.<io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync: int getState()>();

        lookupswitch($i0)
        {
            case 2: goto label3;
            case 4: goto label5;
            case 8: goto label5;
            default: goto label1;
        };

     label1:
        goto label2;

     label2:
        $r1 = new java.lang.IllegalStateException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3_1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error, synchronizer in invalid state: ");

        $r3_2 = virtualinvoke $r3_1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3_2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r1;

     label3:
        $r5 = $r0.<io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync: java.lang.Throwable exception>;

        if $r5 == null goto label4;

        $r2 = new java.util.concurrent.ExecutionException;

        $r5_1 = $r0.<io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync: java.lang.Throwable exception>;

        specialinvoke $r2.<java.util.concurrent.ExecutionException: void <init>(java.lang.Throwable)>($r5_1);

        throw $r2;

     label4:
        r7 = $r0.<io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync: java.lang.Object value>;

        return r7;

     label5:
        $r5_2 = $r0.<io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync: java.lang.Throwable exception>;

        $r6 = staticinvoke <io.fabric.sdk.android.services.concurrency.internal.AbstractFuture: java.util.concurrent.CancellationException cancellationExceptionWithCause(java.lang.String,java.lang.Throwable)>("Task was cancelled.", $r5_2);

        throw $r6;
    }

    boolean cancel(boolean)
    {
        io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync $r0;
        boolean $z0, $z0_1;
        byte $b0, $b0_1, $b0_2;

        $r0 := @this: io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label2;

(0)     $b0 = 8;

     label1:
        $b0_1 = Phi($b0 #0, $b0_2 #1);

        $z0_1 = specialinvoke $r0.<io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync: boolean complete(java.lang.Object,java.lang.Throwable,int)>(null, null, $b0_1);

        return $z0_1;

     label2:
        $b0_2 = 4;

(1)     goto label1;
    }

    java.lang.Object get() throws java.util.concurrent.CancellationException, java.util.concurrent.ExecutionException, java.lang.InterruptedException
    {
        io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync $r0;
        java.lang.Object $r1;

        $r0 := @this: io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync;

        virtualinvoke $r0.<io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync: void acquireSharedInterruptibly(int)>(-1);

        $r1 = specialinvoke $r0.<io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync: java.lang.Object getValue()>();

        return $r1;
    }

    java.lang.Object get(long) throws java.util.concurrent.TimeoutException, java.util.concurrent.CancellationException, java.util.concurrent.ExecutionException, java.lang.InterruptedException
    {
        io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync $r0;
        long $l0;
        java.util.concurrent.TimeoutException $r1;
        boolean $z0;
        java.lang.Object $r2;

        $r0 := @this: io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync;

        $l0 := @parameter0: long;

        $z0 = virtualinvoke $r0.<io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync: boolean tryAcquireSharedNanos(int,long)>(-1, $l0);

        if $z0 != 0 goto label1;

        $r1 = new java.util.concurrent.TimeoutException;

        specialinvoke $r1.<java.util.concurrent.TimeoutException: void <init>(java.lang.String)>("Timeout waiting for task.");

        throw $r1;

     label1:
        $r2 = specialinvoke $r0.<io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync: java.lang.Object getValue()>();

        return $r2;
    }

    boolean isCancelled()
    {
        io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync $r0;
        int $i0, $i0_1;

        $r0 := @this: io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync;

        $i0 = virtualinvoke $r0.<io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync: int getState()>();

        $i0_1 = $i0 & 12;

        if $i0_1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    boolean isDone()
    {
        io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync $r0;
        int $i0, $i0_1;

        $r0 := @this: io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync;

        $i0 = virtualinvoke $r0.<io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync: int getState()>();

        $i0_1 = $i0 & 14;

        if $i0_1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    boolean set(java.lang.Object)
    {
        io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync $r0;
        java.lang.Object $r1;
        boolean $z0;

        $r0 := @this: io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync;

        $r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke $r0.<io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync: boolean complete(java.lang.Object,java.lang.Throwable,int)>($r1, null, 2);

        return $z0;
    }

    boolean setException(java.lang.Throwable)
    {
        io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync $r0;
        java.lang.Throwable $r1;
        boolean $z0;

        $r0 := @this: io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync;

        $r1 := @parameter0: java.lang.Throwable;

        $z0 = specialinvoke $r0.<io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync: boolean complete(java.lang.Object,java.lang.Throwable,int)>(null, $r1, 2);

        return $z0;
    }

    protected int tryAcquireShared(int)
    {
        io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync $r0;
        int $i0;
        boolean $z0;

        $r0 := @this: io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync;

        $i0 := @parameter0: int;

        $z0 = virtualinvoke $r0.<io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync: boolean isDone()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return -1;
    }

    protected boolean tryReleaseShared(int)
    {
        io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync $r0;
        int $i0;

        $r0 := @this: io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync;

        $i0 := @parameter0: int;

        virtualinvoke $r0.<io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync: void setState(int)>($i0);

        return 1;
    }

    boolean wasInterrupted()
    {
        io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync $r0;
        int $i0;

        $r0 := @this: io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync;

        $i0 = virtualinvoke $r0.<io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync: int getState()>();

        if $i0 != 8 goto label1;

        return 1;

     label1:
        return 0;
    }
}
