public class bolts.Task extends java.lang.Object
{
    public static final java.util.concurrent.ExecutorService BACKGROUND_EXECUTOR;
    private static final java.util.concurrent.Executor IMMEDIATE_EXECUTOR;
    public static final java.util.concurrent.Executor UI_THREAD_EXECUTOR;
    private boolean cancelled;
    private boolean complete;
    private java.util.List continuations;
    private java.lang.Exception error;
    private final java.lang.Object lock;
    private java.lang.Object result;

    static void <clinit>()
    {
        java.util.concurrent.ExecutorService $r0;
        java.util.concurrent.Executor $r1, $r1_1;

        $r0 = staticinvoke <bolts.BoltsExecutors: java.util.concurrent.ExecutorService background()>();

        <bolts.Task: java.util.concurrent.ExecutorService BACKGROUND_EXECUTOR> = $r0;

        $r1 = staticinvoke <bolts.BoltsExecutors: java.util.concurrent.Executor immediate()>();

        <bolts.Task: java.util.concurrent.Executor IMMEDIATE_EXECUTOR> = $r1;

        $r1_1 = staticinvoke <bolts.AndroidExecutors: java.util.concurrent.Executor uiThread()>();

        <bolts.Task: java.util.concurrent.Executor UI_THREAD_EXECUTOR> = $r1_1;

        return;
    }

    private void <init>()
    {
        bolts.Task $r0;
        java.lang.Object $r1;
        java.util.ArrayList $r2;

        $r0 := @this: bolts.Task;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        $r0.<bolts.Task: java.lang.Object lock> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r0.<bolts.Task: java.util.List continuations> = $r2;

        return;
    }

    static void access$100(bolts.Task$TaskCompletionSource, bolts.Continuation, bolts.Task, java.util.concurrent.Executor)
    {
        bolts.Task$TaskCompletionSource $r0;
        bolts.Continuation $r1;
        bolts.Task $r2;
        java.util.concurrent.Executor $r3;

        $r0 := @parameter0: bolts.Task$TaskCompletionSource;

        $r1 := @parameter1: bolts.Continuation;

        $r2 := @parameter2: bolts.Task;

        $r3 := @parameter3: java.util.concurrent.Executor;

        staticinvoke <bolts.Task: void completeImmediately(bolts.Task$TaskCompletionSource,bolts.Continuation,bolts.Task,java.util.concurrent.Executor)>($r0, $r1, $r2, $r3);

        return;
    }

    static void access$200(bolts.Task$TaskCompletionSource, bolts.Continuation, bolts.Task, java.util.concurrent.Executor)
    {
        bolts.Task$TaskCompletionSource $r0;
        bolts.Continuation $r1;
        bolts.Task $r2;
        java.util.concurrent.Executor $r3;

        $r0 := @parameter0: bolts.Task$TaskCompletionSource;

        $r1 := @parameter1: bolts.Continuation;

        $r2 := @parameter2: bolts.Task;

        $r3 := @parameter3: java.util.concurrent.Executor;

        staticinvoke <bolts.Task: void completeAfterTask(bolts.Task$TaskCompletionSource,bolts.Continuation,bolts.Task,java.util.concurrent.Executor)>($r0, $r1, $r2, $r3);

        return;
    }

    static java.lang.Object access$300(bolts.Task)
    {
        bolts.Task $r0;
        java.lang.Object r1;

        $r0 := @parameter0: bolts.Task;

        r1 = $r0.<bolts.Task: java.lang.Object lock>;

        return r1;
    }

    static boolean access$400(bolts.Task)
    {
        bolts.Task $r0;
        boolean z0;

        $r0 := @parameter0: bolts.Task;

        z0 = $r0.<bolts.Task: boolean complete>;

        return z0;
    }

    static boolean access$402(bolts.Task, boolean)
    {
        bolts.Task $r0;
        boolean $z0;

        $r0 := @parameter0: bolts.Task;

        $z0 := @parameter1: boolean;

        $r0.<bolts.Task: boolean complete> = $z0;

        return $z0;
    }

    static boolean access$502(bolts.Task, boolean)
    {
        bolts.Task $r0;
        boolean $z0;

        $r0 := @parameter0: bolts.Task;

        $z0 := @parameter1: boolean;

        $r0.<bolts.Task: boolean cancelled> = $z0;

        return $z0;
    }

    static void access$600(bolts.Task)
    {
        bolts.Task $r0;

        $r0 := @parameter0: bolts.Task;

        specialinvoke $r0.<bolts.Task: void runContinuations()>();

        return;
    }

    static java.lang.Object access$702(bolts.Task, java.lang.Object)
    {
        bolts.Task $r0;
        java.lang.Object $r1;

        $r0 := @parameter0: bolts.Task;

        $r1 := @parameter1: java.lang.Object;

        $r0.<bolts.Task: java.lang.Object result> = $r1;

        return $r1;
    }

    static java.lang.Exception access$802(bolts.Task, java.lang.Exception)
    {
        bolts.Task $r0;
        java.lang.Exception $r1;

        $r0 := @parameter0: bolts.Task;

        $r1 := @parameter1: java.lang.Exception;

        $r0.<bolts.Task: java.lang.Exception error> = $r1;

        return $r1;
    }

    public static bolts.Task call(java.util.concurrent.Callable)
    {
        java.util.concurrent.Callable $r0;
        java.util.concurrent.Executor $r1;
        bolts.Task $r2;

        $r0 := @parameter0: java.util.concurrent.Callable;

        $r1 = <bolts.Task: java.util.concurrent.Executor IMMEDIATE_EXECUTOR>;

        $r2 = staticinvoke <bolts.Task: bolts.Task call(java.util.concurrent.Callable,java.util.concurrent.Executor)>($r0, $r1);

        return $r2;
    }

    public static bolts.Task call(java.util.concurrent.Callable, java.util.concurrent.Executor)
    {
        java.util.concurrent.Callable $r0;
        java.util.concurrent.Executor $r1;
        bolts.Task$2 $r2;
        bolts.Task$TaskCompletionSource $r3;
        bolts.Task $r4;

        $r0 := @parameter0: java.util.concurrent.Callable;

        $r1 := @parameter1: java.util.concurrent.Executor;

        $r3 = staticinvoke <bolts.Task: bolts.Task$TaskCompletionSource create()>();

        $r2 = new bolts.Task$2;

        specialinvoke $r2.<bolts.Task$2: void <init>(bolts.Task$TaskCompletionSource,java.util.concurrent.Callable)>($r3, $r0);

        interfaceinvoke $r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r2);

        $r4 = virtualinvoke $r3.<bolts.Task$TaskCompletionSource: bolts.Task getTask()>();

        return $r4;
    }

    public static bolts.Task callInBackground(java.util.concurrent.Callable)
    {
        java.util.concurrent.Callable $r0;
        java.util.concurrent.ExecutorService $r1;
        bolts.Task $r2;

        $r0 := @parameter0: java.util.concurrent.Callable;

        $r1 = <bolts.Task: java.util.concurrent.ExecutorService BACKGROUND_EXECUTOR>;

        $r2 = staticinvoke <bolts.Task: bolts.Task call(java.util.concurrent.Callable,java.util.concurrent.Executor)>($r0, $r1);

        return $r2;
    }

    public static bolts.Task cancelled()
    {
        bolts.Task$TaskCompletionSource $r0;
        bolts.Task $r1;

        $r0 = staticinvoke <bolts.Task: bolts.Task$TaskCompletionSource create()>();

        virtualinvoke $r0.<bolts.Task$TaskCompletionSource: void setCancelled()>();

        $r1 = virtualinvoke $r0.<bolts.Task$TaskCompletionSource: bolts.Task getTask()>();

        return $r1;
    }

    private static void completeAfterTask(bolts.Task$TaskCompletionSource, bolts.Continuation, bolts.Task, java.util.concurrent.Executor)
    {
        bolts.Task$TaskCompletionSource $r0;
        bolts.Continuation $r1;
        bolts.Task $r2;
        java.util.concurrent.Executor $r3;
        bolts.Task$10 $r4;

        $r0 := @parameter0: bolts.Task$TaskCompletionSource;

        $r1 := @parameter1: bolts.Continuation;

        $r2 := @parameter2: bolts.Task;

        $r3 := @parameter3: java.util.concurrent.Executor;

        $r4 = new bolts.Task$10;

        specialinvoke $r4.<bolts.Task$10: void <init>(bolts.Continuation,bolts.Task,bolts.Task$TaskCompletionSource)>($r1, $r2, $r0);

        interfaceinvoke $r3.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r4);

        return;
    }

    private static void completeImmediately(bolts.Task$TaskCompletionSource, bolts.Continuation, bolts.Task, java.util.concurrent.Executor)
    {
        bolts.Task$TaskCompletionSource $r0;
        bolts.Continuation $r1;
        bolts.Task $r2;
        java.util.concurrent.Executor $r3;
        bolts.Task$9 $r4;

        $r0 := @parameter0: bolts.Task$TaskCompletionSource;

        $r1 := @parameter1: bolts.Continuation;

        $r2 := @parameter2: bolts.Task;

        $r3 := @parameter3: java.util.concurrent.Executor;

        $r4 = new bolts.Task$9;

        specialinvoke $r4.<bolts.Task$9: void <init>(bolts.Continuation,bolts.Task,bolts.Task$TaskCompletionSource)>($r1, $r2, $r0);

        interfaceinvoke $r3.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r4);

        return;
    }

    public static bolts.Task$TaskCompletionSource create()
    {
        bolts.Task $r0;
        bolts.Task$TaskCompletionSource $r1;

        $r0 = new bolts.Task;

        specialinvoke $r0.<bolts.Task: void <init>()>();

        $r1 = new bolts.Task$TaskCompletionSource;

        virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        specialinvoke $r1.<bolts.Task$TaskCompletionSource: void <init>(bolts.Task,bolts.Task$1)>($r0, null);

        return $r1;
    }

    public static bolts.Task forError(java.lang.Exception)
    {
        java.lang.Exception $r0;
        bolts.Task$TaskCompletionSource $r1;
        bolts.Task $r2;

        $r0 := @parameter0: java.lang.Exception;

        $r1 = staticinvoke <bolts.Task: bolts.Task$TaskCompletionSource create()>();

        virtualinvoke $r1.<bolts.Task$TaskCompletionSource: void setError(java.lang.Exception)>($r0);

        $r2 = virtualinvoke $r1.<bolts.Task$TaskCompletionSource: bolts.Task getTask()>();

        return $r2;
    }

    public static bolts.Task forResult(java.lang.Object)
    {
        java.lang.Object $r0;
        bolts.Task$TaskCompletionSource $r1;
        bolts.Task $r2;

        $r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <bolts.Task: bolts.Task$TaskCompletionSource create()>();

        virtualinvoke $r1.<bolts.Task$TaskCompletionSource: void setResult(java.lang.Object)>($r0);

        $r2 = virtualinvoke $r1.<bolts.Task$TaskCompletionSource: bolts.Task getTask()>();

        return $r2;
    }

    private void runContinuations()
    {
        bolts.Task $r0;
        java.lang.Object $r1, $r6;
        java.util.List $r2;
        java.lang.Throwable $r3;
        java.lang.Exception $r4;
        java.util.Iterator $r5;
        boolean $z0;
        bolts.Continuation $r7;
        java.lang.RuntimeException $r8, $r8_1, $r8_2;

        $r0 := @this: bolts.Task;

        $r1 = $r0.<bolts.Task: java.lang.Object lock>;

(0)     entermonitor $r1;

     label01:
        $r2 = $r0.<bolts.Task: java.util.List continuations>;

        $r5 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (bolts.Continuation) $r6;

     label03:
        interfaceinvoke $r7.<bolts.Continuation: java.lang.Object then(bolts.Task)>($r0);

     label04:
        goto label02;

     label05:
        $r8 := @caughtexception;

     label06:
        throw $r8;

     label07:
        $r3 := @caughtexception;

(1)     $r8_2 = Phi($r8 #0, $r8_2 #1, $r8_1 #2);

        exitmonitor $r1;

     label08:
        throw $r3;

     label09:
        $r4 := @caughtexception;

     label10:
(2)     $r8_1 = new java.lang.RuntimeException;

        specialinvoke $r8_1.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r4);

        throw $r8_1;

     label11:
        $r0.<bolts.Task: java.util.List continuations> = null;

        exitmonitor $r1;

     label12:
        return;

        catch java.lang.Throwable from label01 to label03 with label07;
        catch java.lang.RuntimeException from label03 to label04 with label05;
        catch java.lang.Exception from label03 to label04 with label09;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label06 to label08 with label07;
        catch java.lang.Throwable from label10 to label12 with label07;
    }

    public static bolts.Task whenAll(java.util.Collection)
    {
        java.util.Collection $r0;
        java.util.ArrayList $r1;
        java.lang.Object $r2, $r9;
        java.util.concurrent.atomic.AtomicInteger $r3;
        java.util.concurrent.atomic.AtomicBoolean $r4;
        bolts.Task$3 $r5;
        int $i0, $i0_1;
        bolts.Task $r6, $r6_1, $r6_2, $r6_3;
        bolts.Task$TaskCompletionSource $r7;
        java.util.Iterator $r8;
        boolean $z0;

        $r0 := @parameter0: java.util.Collection;

        $i0 = interfaceinvoke $r0.<java.util.Collection: int size()>();

        if $i0 != 0 goto label1;

        $r6 = staticinvoke <bolts.Task: bolts.Task forResult(java.lang.Object)>(null);

        return $r6;

     label1:
        $r7 = staticinvoke <bolts.Task: bolts.Task$TaskCompletionSource create()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        $r3 = new java.util.concurrent.atomic.AtomicInteger;

        $i0_1 = interfaceinvoke $r0.<java.util.Collection: int size()>();

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>($i0_1);

        $r4 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

(0)     $r8 = interfaceinvoke $r0.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $r6_1 = Phi($r6 #0, $r6_2 #1);

        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r6_2 = (bolts.Task) $r9;

        $r5 = new bolts.Task$3;

        specialinvoke $r5.<bolts.Task$3: void <init>(java.lang.Object,java.util.ArrayList,java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.atomic.AtomicInteger,bolts.Task$TaskCompletionSource)>($r2, $r1, $r4, $r3, $r7);

        virtualinvoke $r6_2.<bolts.Task: bolts.Task continueWith(bolts.Continuation)>($r5);

(1)     goto label2;

     label3:
        $r6_3 = virtualinvoke $r7.<bolts.Task$TaskCompletionSource: bolts.Task getTask()>();

        return $r6_3;
    }

    public bolts.Task cast()
    {
        bolts.Task $r0;

        $r0 := @this: bolts.Task;

        return $r0;
    }

    public bolts.Task continueWhile(java.util.concurrent.Callable, bolts.Continuation)
    {
        java.util.concurrent.Callable $r0;
        bolts.Continuation $r1;
        java.util.concurrent.Executor $r2;
        bolts.Task $r3, $r3_1;

        $r3 := @this: bolts.Task;

        $r0 := @parameter0: java.util.concurrent.Callable;

        $r1 := @parameter1: bolts.Continuation;

        $r2 = <bolts.Task: java.util.concurrent.Executor IMMEDIATE_EXECUTOR>;

        $r3_1 = virtualinvoke $r3.<bolts.Task: bolts.Task continueWhile(java.util.concurrent.Callable,bolts.Continuation,java.util.concurrent.Executor)>($r0, $r1, $r2);

        return $r3_1;
    }

    public bolts.Task continueWhile(java.util.concurrent.Callable, bolts.Continuation, java.util.concurrent.Executor)
    {
        java.util.concurrent.Callable $r0;
        java.util.concurrent.Executor $r1;
        bolts.Capture $r2;
        bolts.Task$4 $r3;
        bolts.Task $r4, $r4_1, $r4_2;
        bolts.Continuation $r5, $r5_1;
        java.lang.Object $r6;

        $r4 := @this: bolts.Task;

        $r0 := @parameter0: java.util.concurrent.Callable;

        $r5 := @parameter1: bolts.Continuation;

        $r1 := @parameter2: java.util.concurrent.Executor;

        $r2 = new bolts.Capture;

        specialinvoke $r2.<bolts.Capture: void <init>()>();

        $r3 = new bolts.Task$4;

        specialinvoke $r3.<bolts.Task$4: void <init>(bolts.Task,java.util.concurrent.Callable,bolts.Continuation,java.util.concurrent.Executor,bolts.Capture)>($r4, $r0, $r5, $r1, $r2);

        virtualinvoke $r2.<bolts.Capture: void set(java.lang.Object)>($r3);

        $r4_1 = virtualinvoke $r4.<bolts.Task: bolts.Task makeVoid()>();

        $r6 = virtualinvoke $r2.<bolts.Capture: java.lang.Object get()>();

        $r5_1 = (bolts.Continuation) $r6;

        $r4_2 = virtualinvoke $r4_1.<bolts.Task: bolts.Task continueWithTask(bolts.Continuation,java.util.concurrent.Executor)>($r5_1, $r1);

        return $r4_2;
    }

    public bolts.Task continueWith(bolts.Continuation)
    {
        bolts.Continuation $r0;
        java.util.concurrent.Executor $r1;
        bolts.Task $r2, $r2_1;

        $r2 := @this: bolts.Task;

        $r0 := @parameter0: bolts.Continuation;

        $r1 = <bolts.Task: java.util.concurrent.Executor IMMEDIATE_EXECUTOR>;

        $r2_1 = virtualinvoke $r2.<bolts.Task: bolts.Task continueWith(bolts.Continuation,java.util.concurrent.Executor)>($r0, $r1);

        return $r2_1;
    }

    public bolts.Task continueWith(bolts.Continuation, java.util.concurrent.Executor)
    {
        bolts.Continuation $r0;
        java.util.concurrent.Executor $r1;
        java.lang.Object $r2;
        java.util.List $r3;
        bolts.Task$5 $r4;
        java.lang.Throwable $r5;
        bolts.Task $r6, $r6_1;
        bolts.Task$TaskCompletionSource $r7;
        boolean $z0;

        $r6 := @this: bolts.Task;

        $r0 := @parameter0: bolts.Continuation;

        $r1 := @parameter1: java.util.concurrent.Executor;

        $r7 = staticinvoke <bolts.Task: bolts.Task$TaskCompletionSource create()>();

        $r2 = $r6.<bolts.Task: java.lang.Object lock>;

        entermonitor $r2;

     label1:
        $z0 = virtualinvoke $r6.<bolts.Task: boolean isCompleted()>();

        if $z0 != 0 goto label2;

        $r3 = $r6.<bolts.Task: java.util.List continuations>;

        $r4 = new bolts.Task$5;

        specialinvoke $r4.<bolts.Task$5: void <init>(bolts.Task,bolts.Task$TaskCompletionSource,bolts.Continuation,java.util.concurrent.Executor)>($r6, $r7, $r0, $r1);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r4);

     label2:
        exitmonitor $r2;

     label3:
        if $z0 == 0 goto label4;

        staticinvoke <bolts.Task: void completeImmediately(bolts.Task$TaskCompletionSource,bolts.Continuation,bolts.Task,java.util.concurrent.Executor)>($r7, $r0, $r6, $r1);

     label4:
        $r6_1 = virtualinvoke $r7.<bolts.Task$TaskCompletionSource: bolts.Task getTask()>();

        return $r6_1;

     label5:
        $r5 := @caughtexception;

     label6:
        exitmonitor $r2;

     label7:
        throw $r5;

        catch java.lang.Throwable from label1 to label3 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public bolts.Task continueWithTask(bolts.Continuation)
    {
        bolts.Continuation $r0;
        java.util.concurrent.Executor $r1;
        bolts.Task $r2, $r2_1;

        $r2 := @this: bolts.Task;

        $r0 := @parameter0: bolts.Continuation;

        $r1 = <bolts.Task: java.util.concurrent.Executor IMMEDIATE_EXECUTOR>;

        $r2_1 = virtualinvoke $r2.<bolts.Task: bolts.Task continueWithTask(bolts.Continuation,java.util.concurrent.Executor)>($r0, $r1);

        return $r2_1;
    }

    public bolts.Task continueWithTask(bolts.Continuation, java.util.concurrent.Executor)
    {
        bolts.Continuation $r0;
        java.util.concurrent.Executor $r1;
        java.lang.Object $r2;
        java.util.List $r3;
        bolts.Task$6 $r4;
        java.lang.Throwable $r5;
        bolts.Task $r6, $r6_1;
        bolts.Task$TaskCompletionSource $r7;
        boolean $z0;

        $r6 := @this: bolts.Task;

        $r0 := @parameter0: bolts.Continuation;

        $r1 := @parameter1: java.util.concurrent.Executor;

        $r7 = staticinvoke <bolts.Task: bolts.Task$TaskCompletionSource create()>();

        $r2 = $r6.<bolts.Task: java.lang.Object lock>;

        entermonitor $r2;

     label1:
        $z0 = virtualinvoke $r6.<bolts.Task: boolean isCompleted()>();

        if $z0 != 0 goto label2;

        $r3 = $r6.<bolts.Task: java.util.List continuations>;

        $r4 = new bolts.Task$6;

        specialinvoke $r4.<bolts.Task$6: void <init>(bolts.Task,bolts.Task$TaskCompletionSource,bolts.Continuation,java.util.concurrent.Executor)>($r6, $r7, $r0, $r1);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r4);

     label2:
        exitmonitor $r2;

     label3:
        if $z0 == 0 goto label4;

        staticinvoke <bolts.Task: void completeAfterTask(bolts.Task$TaskCompletionSource,bolts.Continuation,bolts.Task,java.util.concurrent.Executor)>($r7, $r0, $r6, $r1);

     label4:
        $r6_1 = virtualinvoke $r7.<bolts.Task$TaskCompletionSource: bolts.Task getTask()>();

        return $r6_1;

     label5:
        $r5 := @caughtexception;

     label6:
        exitmonitor $r2;

     label7:
        throw $r5;

        catch java.lang.Throwable from label1 to label3 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public java.lang.Exception getError()
    {
        bolts.Task $r0;
        java.lang.Object $r1;
        java.lang.Throwable $r2;
        java.lang.Exception r3;

        $r0 := @this: bolts.Task;

        $r1 = $r0.<bolts.Task: java.lang.Object lock>;

        entermonitor $r1;

     label1:
        r3 = $r0.<bolts.Task: java.lang.Exception error>;

        exitmonitor $r1;

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.lang.Object getResult()
    {
        bolts.Task $r0;
        java.lang.Object $r1, r3;
        java.lang.Throwable $r2;

        $r0 := @this: bolts.Task;

        $r1 = $r0.<bolts.Task: java.lang.Object lock>;

        entermonitor $r1;

     label1:
        r3 = $r0.<bolts.Task: java.lang.Object result>;

        exitmonitor $r1;

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean isCancelled()
    {
        bolts.Task $r0;
        java.lang.Object $r1;
        java.lang.Throwable $r2;
        boolean z0;

        $r0 := @this: bolts.Task;

        $r1 = $r0.<bolts.Task: java.lang.Object lock>;

        entermonitor $r1;

     label1:
        z0 = $r0.<bolts.Task: boolean cancelled>;

        exitmonitor $r1;

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean isCompleted()
    {
        bolts.Task $r0;
        java.lang.Object $r1;
        java.lang.Throwable $r2;
        boolean z0;

        $r0 := @this: bolts.Task;

        $r1 = $r0.<bolts.Task: java.lang.Object lock>;

        entermonitor $r1;

     label1:
        z0 = $r0.<bolts.Task: boolean complete>;

        exitmonitor $r1;

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean isFaulted()
    {
        bolts.Task $r0;
        java.lang.Object $r1;
        java.lang.Exception $r2;
        java.lang.Throwable $r3;
        boolean $z0, $z0_1, $z0_2, $z0_3;

        $r0 := @this: bolts.Task;

        $r1 = $r0.<bolts.Task: java.lang.Object lock>;

(0)     entermonitor $r1;

     label1:
        $r2 = $r0.<bolts.Task: java.lang.Exception error>;

        if $r2 == null goto label4;

(1)     $z0 = 1;

     label2:
        $z0_1 = Phi($z0 #1, $z0_2 #4);

(2)     exitmonitor $r1;

     label3:
        return $z0_1;

     label4:
(3)     $z0_2 = 0;

(4)     goto label2;

     label5:
        $r3 := @caughtexception;

(5)     $z0_3 = Phi($z0 #0, $z0_1 #2, $z0_2 #3, $z0_3 #5);

        exitmonitor $r1;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label3 with label5;
        catch java.lang.Throwable from label4 to label6 with label5;
    }

    public bolts.Task makeVoid()
    {
        bolts.Task$1 $r0;
        bolts.Task $r1, $r1_1;

        $r1 := @this: bolts.Task;

        $r0 = new bolts.Task$1;

        specialinvoke $r0.<bolts.Task$1: void <init>(bolts.Task)>($r1);

        $r1_1 = virtualinvoke $r1.<bolts.Task: bolts.Task continueWithTask(bolts.Continuation)>($r0);

        return $r1_1;
    }

    public bolts.Task onSuccess(bolts.Continuation)
    {
        bolts.Continuation $r0;
        java.util.concurrent.Executor $r1;
        bolts.Task $r2, $r2_1;

        $r2 := @this: bolts.Task;

        $r0 := @parameter0: bolts.Continuation;

        $r1 = <bolts.Task: java.util.concurrent.Executor IMMEDIATE_EXECUTOR>;

        $r2_1 = virtualinvoke $r2.<bolts.Task: bolts.Task onSuccess(bolts.Continuation,java.util.concurrent.Executor)>($r0, $r1);

        return $r2_1;
    }

    public bolts.Task onSuccess(bolts.Continuation, java.util.concurrent.Executor)
    {
        bolts.Continuation $r0;
        java.util.concurrent.Executor $r1;
        bolts.Task$7 $r2;
        bolts.Task $r3, $r3_1;

        $r3 := @this: bolts.Task;

        $r0 := @parameter0: bolts.Continuation;

        $r1 := @parameter1: java.util.concurrent.Executor;

        $r2 = new bolts.Task$7;

        specialinvoke $r2.<bolts.Task$7: void <init>(bolts.Task,bolts.Continuation)>($r3, $r0);

        $r3_1 = virtualinvoke $r3.<bolts.Task: bolts.Task continueWithTask(bolts.Continuation,java.util.concurrent.Executor)>($r2, $r1);

        return $r3_1;
    }

    public bolts.Task onSuccessTask(bolts.Continuation)
    {
        bolts.Continuation $r0;
        java.util.concurrent.Executor $r1;
        bolts.Task $r2, $r2_1;

        $r2 := @this: bolts.Task;

        $r0 := @parameter0: bolts.Continuation;

        $r1 = <bolts.Task: java.util.concurrent.Executor IMMEDIATE_EXECUTOR>;

        $r2_1 = virtualinvoke $r2.<bolts.Task: bolts.Task onSuccessTask(bolts.Continuation,java.util.concurrent.Executor)>($r0, $r1);

        return $r2_1;
    }

    public bolts.Task onSuccessTask(bolts.Continuation, java.util.concurrent.Executor)
    {
        bolts.Continuation $r0;
        java.util.concurrent.Executor $r1;
        bolts.Task$8 $r2;
        bolts.Task $r3, $r3_1;

        $r3 := @this: bolts.Task;

        $r0 := @parameter0: bolts.Continuation;

        $r1 := @parameter1: java.util.concurrent.Executor;

        $r2 = new bolts.Task$8;

        specialinvoke $r2.<bolts.Task$8: void <init>(bolts.Task,bolts.Continuation)>($r3, $r0);

        $r3_1 = virtualinvoke $r3.<bolts.Task: bolts.Task continueWithTask(bolts.Continuation,java.util.concurrent.Executor)>($r2, $r1);

        return $r3_1;
    }

    public void waitForCompletion() throws java.lang.InterruptedException
    {
        bolts.Task $r0;
        java.lang.Object $r1, $r2;
        java.lang.Throwable $r3;
        boolean $z0;

        $r0 := @this: bolts.Task;

        $r1 = $r0.<bolts.Task: java.lang.Object lock>;

        entermonitor $r1;

     label1:
        $z0 = virtualinvoke $r0.<bolts.Task: boolean isCompleted()>();

        if $z0 != 0 goto label2;

        $r2 = $r0.<bolts.Task: java.lang.Object lock>;

        virtualinvoke $r2.<java.lang.Object: void wait()>();

     label2:
        exitmonitor $r1;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }
}
