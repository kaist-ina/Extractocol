public class ch.boye.httpclientandroidlib.impl.client.cache.DefaultHttpCacheEntrySerializer extends java.lang.Object implements ch.boye.httpclientandroidlib.client.cache.HttpCacheEntrySerializer
{

    public void <init>()
    {
        ch.boye.httpclientandroidlib.impl.client.cache.DefaultHttpCacheEntrySerializer $r0;

        $r0 := @this: ch.boye.httpclientandroidlib.impl.client.cache.DefaultHttpCacheEntrySerializer;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public ch.boye.httpclientandroidlib.client.cache.HttpCacheEntry readFrom(java.io.InputStream) throws java.io.IOException
    {
        ch.boye.httpclientandroidlib.impl.client.cache.DefaultHttpCacheEntrySerializer $r0;
        java.io.InputStream $r1;
        java.io.ObjectInputStream $r2;
        java.lang.ClassNotFoundException $r3;
        ch.boye.httpclientandroidlib.client.cache.HttpCacheEntrySerializationException $r4;
        java.lang.Throwable $r5;
        java.lang.Object $r6;
        ch.boye.httpclientandroidlib.client.cache.HttpCacheEntry $r7;
        java.lang.StringBuilder $r8, $r8_1, $r8_2, $r8_3;
        java.lang.String $r9, $r9_1, $r9_2;

        $r0 := @this: ch.boye.httpclientandroidlib.impl.client.cache.DefaultHttpCacheEntrySerializer;

        $r1 := @parameter0: java.io.InputStream;

        $r2 = new java.io.ObjectInputStream;

(0)     specialinvoke $r2.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>($r1);

     label1:
        $r6 = virtualinvoke $r2.<java.io.ObjectInputStream: java.lang.Object readObject()>();

     label2:
        $r7 = (ch.boye.httpclientandroidlib.client.cache.HttpCacheEntry) $r6;

     label3:
        virtualinvoke $r2.<java.io.ObjectInputStream: void close()>();

        return $r7;

     label4:
        $r3 := @caughtexception;

     label5:
        $r4 = new ch.boye.httpclientandroidlib.client.cache.HttpCacheEntrySerializationException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

(1)     $r8_1 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class not found: ");

        $r9 = virtualinvoke $r3.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

(2)     $r8_2 = virtualinvoke $r8_1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

(3)     $r9_1 = virtualinvoke $r8_2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<ch.boye.httpclientandroidlib.client.cache.HttpCacheEntrySerializationException: void <init>(java.lang.String,java.lang.Throwable)>($r9_1, $r3);

        throw $r4;

     label6:
        $r5 := @caughtexception;

        $r9_2 = Phi($r9 #0, $r9_1 #3);

        $r8_3 = Phi($r8 #0, $r8_1 #1, $r8_2 #2);

        virtualinvoke $r2.<java.io.ObjectInputStream: void close()>();

        throw $r5;

        catch java.lang.ClassNotFoundException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label5 to label6 with label6;
    }

    public void writeTo(ch.boye.httpclientandroidlib.client.cache.HttpCacheEntry, java.io.OutputStream) throws java.io.IOException
    {
        ch.boye.httpclientandroidlib.impl.client.cache.DefaultHttpCacheEntrySerializer $r0;
        ch.boye.httpclientandroidlib.client.cache.HttpCacheEntry $r1;
        java.io.OutputStream $r2;
        java.io.ObjectOutputStream $r3;
        java.lang.Throwable $r4;

        $r0 := @this: ch.boye.httpclientandroidlib.impl.client.cache.DefaultHttpCacheEntrySerializer;

        $r1 := @parameter0: ch.boye.httpclientandroidlib.client.cache.HttpCacheEntry;

        $r2 := @parameter1: java.io.OutputStream;

        $r3 = new java.io.ObjectOutputStream;

        specialinvoke $r3.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>($r2);

     label1:
        virtualinvoke $r3.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r1);

     label2:
        virtualinvoke $r3.<java.io.ObjectOutputStream: void close()>();

        return;

     label3:
        $r4 := @caughtexception;

        virtualinvoke $r3.<java.io.ObjectOutputStream: void close()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
