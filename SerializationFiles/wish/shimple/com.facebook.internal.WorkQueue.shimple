class com.facebook.internal.WorkQueue extends java.lang.Object
{
    static final boolean $assertionsDisabled;
    public static final int DEFAULT_MAX_CONCURRENT;
    private final java.util.concurrent.Executor executor;
    private final int maxConcurrent;
    private com.facebook.internal.WorkQueue$WorkNode pendingJobs;
    private int runningCount;
    private com.facebook.internal.WorkQueue$WorkNode runningJobs;
    private final java.lang.Object workLock;

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z0_1, $z0_2, $z0_3;

        $r0 = class "com/facebook/internal/WorkQueue";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label2;

(0)     $z0_1 = 1;

     label1:
        $z0_2 = Phi($z0_1 #0, $z0_3 #1);

        <com.facebook.internal.WorkQueue: boolean $assertionsDisabled> = $z0_2;

        return;

     label2:
        $z0_3 = 0;

(1)     goto label1;
    }

    void <init>()
    {
        com.facebook.internal.WorkQueue $r0;

        $r0 := @this: com.facebook.internal.WorkQueue;

        specialinvoke $r0.<com.facebook.internal.WorkQueue: void <init>(int)>(8);

        return;
    }

    void <init>(int)
    {
        com.facebook.internal.WorkQueue $r0;
        int $i0;
        java.util.concurrent.Executor $r1;

        $r0 := @this: com.facebook.internal.WorkQueue;

        $i0 := @parameter0: int;

        $r1 = staticinvoke <com.facebook.Settings: java.util.concurrent.Executor getExecutor()>();

        specialinvoke $r0.<com.facebook.internal.WorkQueue: void <init>(int,java.util.concurrent.Executor)>($i0, $r1);

        return;
    }

    void <init>(int, java.util.concurrent.Executor)
    {
        com.facebook.internal.WorkQueue $r0;
        int $i0;
        java.util.concurrent.Executor $r1;
        java.lang.Object $r2;

        $r0 := @this: com.facebook.internal.WorkQueue;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.util.concurrent.Executor;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        $r0.<com.facebook.internal.WorkQueue: java.lang.Object workLock> = $r2;

        $r0.<com.facebook.internal.WorkQueue: com.facebook.internal.WorkQueue$WorkNode runningJobs> = null;

        $r0.<com.facebook.internal.WorkQueue: int runningCount> = 0;

        $r0.<com.facebook.internal.WorkQueue: int maxConcurrent> = $i0;

        $r0.<com.facebook.internal.WorkQueue: java.util.concurrent.Executor executor> = $r1;

        return;
    }

    static void access$000(com.facebook.internal.WorkQueue, com.facebook.internal.WorkQueue$WorkNode)
    {
        com.facebook.internal.WorkQueue $r0;
        com.facebook.internal.WorkQueue$WorkNode $r1;

        $r0 := @parameter0: com.facebook.internal.WorkQueue;

        $r1 := @parameter1: com.facebook.internal.WorkQueue$WorkNode;

        specialinvoke $r0.<com.facebook.internal.WorkQueue: void finishItemAndStartNew(com.facebook.internal.WorkQueue$WorkNode)>($r1);

        return;
    }

    static java.lang.Object access$100(com.facebook.internal.WorkQueue)
    {
        com.facebook.internal.WorkQueue $r0;
        java.lang.Object r1;

        $r0 := @parameter0: com.facebook.internal.WorkQueue;

        r1 = $r0.<com.facebook.internal.WorkQueue: java.lang.Object workLock>;

        return r1;
    }

    static com.facebook.internal.WorkQueue$WorkNode access$200(com.facebook.internal.WorkQueue)
    {
        com.facebook.internal.WorkQueue $r0;
        com.facebook.internal.WorkQueue$WorkNode r1;

        $r0 := @parameter0: com.facebook.internal.WorkQueue;

        r1 = $r0.<com.facebook.internal.WorkQueue: com.facebook.internal.WorkQueue$WorkNode pendingJobs>;

        return r1;
    }

    static com.facebook.internal.WorkQueue$WorkNode access$202(com.facebook.internal.WorkQueue, com.facebook.internal.WorkQueue$WorkNode)
    {
        com.facebook.internal.WorkQueue $r0;
        com.facebook.internal.WorkQueue$WorkNode $r1;

        $r0 := @parameter0: com.facebook.internal.WorkQueue;

        $r1 := @parameter1: com.facebook.internal.WorkQueue$WorkNode;

        $r0.<com.facebook.internal.WorkQueue: com.facebook.internal.WorkQueue$WorkNode pendingJobs> = $r1;

        return $r1;
    }

    private void execute(com.facebook.internal.WorkQueue$WorkNode)
    {
        com.facebook.internal.WorkQueue $r0;
        com.facebook.internal.WorkQueue$WorkNode $r1;
        java.util.concurrent.Executor $r2;
        com.facebook.internal.WorkQueue$1 $r3;

        $r0 := @this: com.facebook.internal.WorkQueue;

        $r1 := @parameter0: com.facebook.internal.WorkQueue$WorkNode;

        $r2 = $r0.<com.facebook.internal.WorkQueue: java.util.concurrent.Executor executor>;

        $r3 = new com.facebook.internal.WorkQueue$1;

        specialinvoke $r3.<com.facebook.internal.WorkQueue$1: void <init>(com.facebook.internal.WorkQueue,com.facebook.internal.WorkQueue$WorkNode)>($r0, $r1);

        interfaceinvoke $r2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r3);

        return;
    }

    private void finishItemAndStartNew(com.facebook.internal.WorkQueue$WorkNode)
    {
        com.facebook.internal.WorkQueue $r0;
        java.lang.Object $r1;
        com.facebook.internal.WorkQueue$WorkNode $r2, $r4, $r5, $r4_1, $r4_2, $r5_1, $r4_3, $r4_4, $r4_5, $r4_6, $r5_2, $r4_7, $r5_3, $r4_8;
        int $i0, $i1, $i0_1, $i0_2, $i0_3, $i0_4, $i0_5, $i0_6, $i0_7;
        java.lang.Throwable $r3;

        $r0 := @this: com.facebook.internal.WorkQueue;

        $r4 := @parameter0: com.facebook.internal.WorkQueue$WorkNode;

        $r5 = null;

        $r1 = $r0.<com.facebook.internal.WorkQueue: java.lang.Object workLock>;

        entermonitor $r1;

(0)     if $r4 == null goto label2;

     label1:
        $r2 = $r0.<com.facebook.internal.WorkQueue: com.facebook.internal.WorkQueue$WorkNode runningJobs>;

(1)     $r4_1 = virtualinvoke $r4.<com.facebook.internal.WorkQueue$WorkNode: com.facebook.internal.WorkQueue$WorkNode removeFromList(com.facebook.internal.WorkQueue$WorkNode)>($r2);

        $r0.<com.facebook.internal.WorkQueue: com.facebook.internal.WorkQueue$WorkNode runningJobs> = $r4_1;

        $i0 = $r0.<com.facebook.internal.WorkQueue: int runningCount>;

(2)     $i0_1 = $i0 + -1;

(3)     $r0.<com.facebook.internal.WorkQueue: int runningCount> = $i0_1;

     label2:
        $i0_2 = Phi($i0 #0, $i0_1 #3);

        $r4_2 = Phi($r4 #0, $r4_1 #3);

(4)     $i1 = $r0.<com.facebook.internal.WorkQueue: int runningCount>;

(5)     $i0_3 = $r0.<com.facebook.internal.WorkQueue: int maxConcurrent>;

(6)     if $i1 >= $i0_3 goto label3;

(7)     $r5_1 = $r0.<com.facebook.internal.WorkQueue: com.facebook.internal.WorkQueue$WorkNode pendingJobs>;

(8)     if $r5_1 == null goto label3;

(9)     $r4_3 = $r0.<com.facebook.internal.WorkQueue: com.facebook.internal.WorkQueue$WorkNode pendingJobs>;

(10)    $r4_4 = virtualinvoke $r5_1.<com.facebook.internal.WorkQueue$WorkNode: com.facebook.internal.WorkQueue$WorkNode removeFromList(com.facebook.internal.WorkQueue$WorkNode)>($r4_3);

        $r0.<com.facebook.internal.WorkQueue: com.facebook.internal.WorkQueue$WorkNode pendingJobs> = $r4_4;

(11)    $r4_5 = $r0.<com.facebook.internal.WorkQueue: com.facebook.internal.WorkQueue$WorkNode runningJobs>;

(12)    $r4_6 = virtualinvoke $r5_1.<com.facebook.internal.WorkQueue$WorkNode: com.facebook.internal.WorkQueue$WorkNode addToList(com.facebook.internal.WorkQueue$WorkNode,boolean)>($r4_5, 0);

        $r0.<com.facebook.internal.WorkQueue: com.facebook.internal.WorkQueue$WorkNode runningJobs> = $r4_6;

(13)    $i0_4 = $r0.<com.facebook.internal.WorkQueue: int runningCount>;

(14)    $i0_5 = $i0_4 + 1;

        $r0.<com.facebook.internal.WorkQueue: int runningCount> = $i0_5;

(15)    virtualinvoke $r5_1.<com.facebook.internal.WorkQueue$WorkNode: void setIsRunning(boolean)>(1);

     label3:
        $r5_2 = Phi($r5 #6, $r5_1 #8, $r5_1 #15);

        $i0_6 = Phi($i0_3 #6, $i0_3 #8, $i0_5 #15);

        $r4_7 = Phi($r4_2 #6, $r4_2 #8, $r4_6 #15);

(16)    exitmonitor $r1;

     label4:
        if $r5_2 == null goto label8;

        specialinvoke $r0.<com.facebook.internal.WorkQueue: void execute(com.facebook.internal.WorkQueue$WorkNode)>($r5_2);

        return;

     label5:
        $r3 := @caughtexception;

        $r5_3 = Phi($r5 #0, $r5_1 #7, $r5_2 #16, $r5_3 #17);

        $i0_7 = Phi($i0 #0, $i0_1 #2, $i0_2 #4, $i0_3 #5, $i0_4 #13, $i0_5 #14, $i0_6 #16, $i0_7 #17);

(17)    $r4_8 = Phi($r4 #0, $r4_1 #1, $r4_2 #4, $r4_3 #9, $r4_4 #10, $r4_5 #11, $r4_6 #12, $r4_7 #16, $r4_8 #17);

     label6:
        exitmonitor $r1;

     label7:
        throw $r3;

     label8:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private void startItem()
    {
        com.facebook.internal.WorkQueue $r0;

        $r0 := @this: com.facebook.internal.WorkQueue;

        specialinvoke $r0.<com.facebook.internal.WorkQueue: void finishItemAndStartNew(com.facebook.internal.WorkQueue$WorkNode)>(null);

        return;
    }

    com.facebook.internal.WorkQueue$WorkItem addActiveWorkItem(java.lang.Runnable)
    {
        com.facebook.internal.WorkQueue $r0;
        java.lang.Runnable $r1;
        com.facebook.internal.WorkQueue$WorkItem $r2;

        $r0 := @this: com.facebook.internal.WorkQueue;

        $r1 := @parameter0: java.lang.Runnable;

        $r2 = virtualinvoke $r0.<com.facebook.internal.WorkQueue: com.facebook.internal.WorkQueue$WorkItem addActiveWorkItem(java.lang.Runnable,boolean)>($r1, 1);

        return $r2;
    }

    com.facebook.internal.WorkQueue$WorkItem addActiveWorkItem(java.lang.Runnable, boolean)
    {
        com.facebook.internal.WorkQueue $r0;
        java.lang.Runnable $r1;
        boolean $z0;
        com.facebook.internal.WorkQueue$WorkNode $r2, $r5, $r5_1, $r5_2;
        java.lang.Object $r3;
        java.lang.Throwable $r4;

        $r0 := @this: com.facebook.internal.WorkQueue;

        $r1 := @parameter0: java.lang.Runnable;

        $z0 := @parameter1: boolean;

        $r2 = new com.facebook.internal.WorkQueue$WorkNode;

        specialinvoke $r2.<com.facebook.internal.WorkQueue$WorkNode: void <init>(com.facebook.internal.WorkQueue,java.lang.Runnable)>($r0, $r1);

        $r3 = $r0.<com.facebook.internal.WorkQueue: java.lang.Object workLock>;

(0)     entermonitor $r3;

     label1:
        $r5 = $r0.<com.facebook.internal.WorkQueue: com.facebook.internal.WorkQueue$WorkNode pendingJobs>;

(1)     $r5_1 = virtualinvoke $r2.<com.facebook.internal.WorkQueue$WorkNode: com.facebook.internal.WorkQueue$WorkNode addToList(com.facebook.internal.WorkQueue$WorkNode,boolean)>($r5, $z0);

        $r0.<com.facebook.internal.WorkQueue: com.facebook.internal.WorkQueue$WorkNode pendingJobs> = $r5_1;

        exitmonitor $r3;

     label2:
        specialinvoke $r0.<com.facebook.internal.WorkQueue: void startItem()>();

        return $r2;

     label3:
        $r4 := @caughtexception;

(2)     $r5_2 = Phi($r5 #0, $r5_1 #1, $r5_2 #2);

     label4:
        exitmonitor $r3;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void validate()
    {
        com.facebook.internal.WorkQueue $r0;
        java.lang.Object $r1;
        com.facebook.internal.WorkQueue$WorkNode $r2, $r5, $r6, $r2_1, $r6_1, $r6_2, $r2_2, $r2_3, $r6_3, $r2_4, $r6_4;
        boolean $z0;
        int $i0, $i1, $i1_1, $i1_2, $i1_3, $i1_4;
        java.lang.AssertionError $r3;
        java.lang.Throwable $r4;

        $r0 := @this: com.facebook.internal.WorkQueue;

        $r1 = $r0.<com.facebook.internal.WorkQueue: java.lang.Object workLock>;

        entermonitor $r1;

(0)     $i1 = 0;

     label1:
        $r2 = $r0.<com.facebook.internal.WorkQueue: com.facebook.internal.WorkQueue$WorkNode runningJobs>;

(1)     if $r2 == null goto label3;

(2)     $r6 = $r0.<com.facebook.internal.WorkQueue: com.facebook.internal.WorkQueue$WorkNode runningJobs>;

     label2:
        $i1_1 = Phi($i1 #2, $i1_2 #7);

        $r2_1 = Phi($r2 #2, $r2_2 #7);

        $r6_1 = Phi($r6 #2, $r6_2 #7);

(3)     virtualinvoke $r6_1.<com.facebook.internal.WorkQueue$WorkNode: void verify(boolean)>(1);

(4)     $i1_2 = $i1_1 + 1;

        $r5 = virtualinvoke $r6_1.<com.facebook.internal.WorkQueue$WorkNode: com.facebook.internal.WorkQueue$WorkNode getNext()>();

(5)     $r6_2 = $r5;

(6)     $r2_2 = $r0.<com.facebook.internal.WorkQueue: com.facebook.internal.WorkQueue$WorkNode runningJobs>;

(7)     if $r5 != $r2_2 goto label2;

     label3:
        $i1_3 = Phi($i1 #1, $i1_2 #7);

        $r2_3 = Phi($r2 #1, $r2_2 #7);

        $r6_3 = Phi($r6 #1, $r6_2 #7);

(8)     $z0 = <com.facebook.internal.WorkQueue: boolean $assertionsDisabled>;

        if $z0 != 0 goto label6;

        $i0 = $r0.<com.facebook.internal.WorkQueue: int runningCount>;

        if $i0 == $i1_3 goto label6;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label4:
        $r4 := @caughtexception;

        $i1_4 = Phi($i1 #0, $i1_1 #3, $i1_2 #4, $i1_3 #8, $i1_4 #9);

        $r2_4 = Phi($r2 #0, $r2_1 #3, $r2_2 #6, $r2_3 #8, $r2_4 #9);

(9)     $r6_4 = Phi($r6 #0, $r6_1 #3, $r6_2 #5, $r6_3 #8, $r6_4 #9);

        exitmonitor $r1;

     label5:
        throw $r4;

     label6:
        exitmonitor $r1;

     label7:
        return;

        catch java.lang.Throwable from label1 to label5 with label4;
        catch java.lang.Throwable from label6 to label7 with label4;
    }
}
