public class java.util.concurrent.ThreadPoolExecutor extends java.util.concurrent.AbstractExecutorService
{

    public void <init>(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue)
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        int i0, i1;
        long l2;
        java.util.concurrent.TimeUnit r1;
        java.util.concurrent.BlockingQueue r2;
        java.lang.RuntimeException $r3;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        l2 := @parameter2: long;

        r1 := @parameter3: java.util.concurrent.TimeUnit;

        r2 := @parameter4: java.util.concurrent.BlockingQueue;

        specialinvoke r0.<java.util.concurrent.AbstractExecutorService: void <init>()>();

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r3;
    }

    public void <init>(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue, java.util.concurrent.ThreadFactory)
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        int i0, i1;
        long l2;
        java.util.concurrent.TimeUnit r1;
        java.util.concurrent.BlockingQueue r2;
        java.util.concurrent.ThreadFactory r3;
        java.lang.RuntimeException $r4;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        l2 := @parameter2: long;

        r1 := @parameter3: java.util.concurrent.TimeUnit;

        r2 := @parameter4: java.util.concurrent.BlockingQueue;

        r3 := @parameter5: java.util.concurrent.ThreadFactory;

        specialinvoke r0.<java.util.concurrent.AbstractExecutorService: void <init>()>();

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r4;
    }

    public void <init>(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue, java.util.concurrent.RejectedExecutionHandler)
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        int i0, i1;
        long l2;
        java.util.concurrent.TimeUnit r1;
        java.util.concurrent.BlockingQueue r2;
        java.util.concurrent.RejectedExecutionHandler r3;
        java.lang.RuntimeException $r4;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        l2 := @parameter2: long;

        r1 := @parameter3: java.util.concurrent.TimeUnit;

        r2 := @parameter4: java.util.concurrent.BlockingQueue;

        r3 := @parameter5: java.util.concurrent.RejectedExecutionHandler;

        specialinvoke r0.<java.util.concurrent.AbstractExecutorService: void <init>()>();

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r4;
    }

    public void <init>(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue, java.util.concurrent.ThreadFactory, java.util.concurrent.RejectedExecutionHandler)
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        int i0, i1;
        long l2;
        java.util.concurrent.TimeUnit r1;
        java.util.concurrent.BlockingQueue r2;
        java.util.concurrent.ThreadFactory r3;
        java.util.concurrent.RejectedExecutionHandler r4;
        java.lang.RuntimeException $r5;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        l2 := @parameter2: long;

        r1 := @parameter3: java.util.concurrent.TimeUnit;

        r2 := @parameter4: java.util.concurrent.BlockingQueue;

        r3 := @parameter5: java.util.concurrent.ThreadFactory;

        r4 := @parameter6: java.util.concurrent.RejectedExecutionHandler;

        specialinvoke r0.<java.util.concurrent.AbstractExecutorService: void <init>()>();

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r5;
    }

    public void execute(java.lang.Runnable)
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.lang.Runnable r1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        r1 := @parameter0: java.lang.Runnable;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public void shutdown()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public java.util.List shutdownNow()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public boolean isShutdown()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public boolean isTerminating()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public boolean isTerminated()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public boolean awaitTermination(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        long l0;
        java.util.concurrent.TimeUnit r1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    protected void finalize()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public void setThreadFactory(java.util.concurrent.ThreadFactory)
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.util.concurrent.ThreadFactory r1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        r1 := @parameter0: java.util.concurrent.ThreadFactory;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public java.util.concurrent.ThreadFactory getThreadFactory()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public void setRejectedExecutionHandler(java.util.concurrent.RejectedExecutionHandler)
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.util.concurrent.RejectedExecutionHandler r1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        r1 := @parameter0: java.util.concurrent.RejectedExecutionHandler;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public java.util.concurrent.RejectedExecutionHandler getRejectedExecutionHandler()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public void setCorePoolSize(int)
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        int i0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        i0 := @parameter0: int;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public int getCorePoolSize()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public boolean prestartCoreThread()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public int prestartAllCoreThreads()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public boolean allowsCoreThreadTimeOut()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public void allowCoreThreadTimeOut(boolean)
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        boolean z0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        z0 := @parameter0: boolean;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public void setMaximumPoolSize(int)
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        int i0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        i0 := @parameter0: int;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public int getMaximumPoolSize()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public void setKeepAliveTime(long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        long l0;
        java.util.concurrent.TimeUnit r1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public long getKeepAliveTime(java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.util.concurrent.TimeUnit r1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        r1 := @parameter0: java.util.concurrent.TimeUnit;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public java.util.concurrent.BlockingQueue getQueue()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public boolean remove(java.lang.Runnable)
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.lang.Runnable r1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        r1 := @parameter0: java.lang.Runnable;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public void purge()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public int getPoolSize()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public int getActiveCount()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public int getLargestPoolSize()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public long getTaskCount()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public long getCompletedTaskCount()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public java.lang.String toString()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    protected void beforeExecute(java.lang.Thread, java.lang.Runnable)
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.lang.Thread r1;
        java.lang.Runnable r2;
        java.lang.RuntimeException $r3;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        r1 := @parameter0: java.lang.Thread;

        r2 := @parameter1: java.lang.Runnable;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r3;
    }

    protected void afterExecute(java.lang.Runnable, java.lang.Throwable)
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.lang.Runnable r1;
        java.lang.Throwable r2;
        java.lang.RuntimeException $r3;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        r1 := @parameter0: java.lang.Runnable;

        r2 := @parameter1: java.lang.Throwable;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r3;
    }

    protected void terminated()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }
}
