public abstract class java.nio.ByteBuffer extends java.nio.Buffer implements java.lang.Comparable
{

    void <init>()
    {
        java.nio.ByteBuffer r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.nio.ByteBuffer;

        specialinvoke r0.<java.nio.Buffer: void <init>()>();

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public static java.nio.ByteBuffer allocate(int)
    {
        int i0;
        java.lang.RuntimeException $r0;

        i0 := @parameter0: int;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static java.nio.ByteBuffer allocateDirect(int)
    {
        int i0;
        java.lang.RuntimeException $r0;

        i0 := @parameter0: int;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static java.nio.ByteBuffer wrap(byte[])
    {
        byte[] r0;
        java.lang.RuntimeException $r1;

        r0 := @parameter0: byte[];

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public static java.nio.ByteBuffer wrap(byte[], int, int)
    {
        byte[] r0;
        int i0, i1;
        java.lang.RuntimeException $r1;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public final byte[] array()
    {
        java.nio.ByteBuffer r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.nio.ByteBuffer;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public final int arrayOffset()
    {
        java.nio.ByteBuffer r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.nio.ByteBuffer;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public abstract java.nio.CharBuffer asCharBuffer();

    public abstract java.nio.DoubleBuffer asDoubleBuffer();

    public abstract java.nio.FloatBuffer asFloatBuffer();

    public abstract java.nio.IntBuffer asIntBuffer();

    public abstract java.nio.LongBuffer asLongBuffer();

    public abstract java.nio.ByteBuffer asReadOnlyBuffer();

    public abstract java.nio.ShortBuffer asShortBuffer();

    public abstract java.nio.ByteBuffer compact();

    public int compareTo(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0, r1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.nio.ByteBuffer;

        r1 := @parameter0: java.nio.ByteBuffer;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public abstract java.nio.ByteBuffer duplicate();

    public boolean equals(java.lang.Object)
    {
        java.nio.ByteBuffer r0;
        java.lang.Object r1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.nio.ByteBuffer;

        r1 := @parameter0: java.lang.Object;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public abstract byte get();

    public java.nio.ByteBuffer get(byte[])
    {
        java.nio.ByteBuffer r0;
        byte[] r1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.nio.ByteBuffer;

        r1 := @parameter0: byte[];

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public java.nio.ByteBuffer get(byte[], int, int)
    {
        java.nio.ByteBuffer r0;
        byte[] r1;
        int i0, i1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.nio.ByteBuffer;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public abstract byte get(int);

    public abstract char getChar();

    public abstract char getChar(int);

    public abstract double getDouble();

    public abstract double getDouble(int);

    public abstract float getFloat();

    public abstract float getFloat(int);

    public abstract int getInt();

    public abstract int getInt(int);

    public abstract long getLong();

    public abstract long getLong(int);

    public abstract short getShort();

    public abstract short getShort(int);

    public final boolean hasArray()
    {
        java.nio.ByteBuffer r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.nio.ByteBuffer;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public int hashCode()
    {
        java.nio.ByteBuffer r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.nio.ByteBuffer;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public abstract boolean isDirect();

    public final java.nio.ByteOrder order()
    {
        java.nio.ByteBuffer r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.nio.ByteBuffer;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public final java.nio.ByteBuffer order(java.nio.ByteOrder)
    {
        java.nio.ByteBuffer r0;
        java.nio.ByteOrder r1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.nio.ByteBuffer;

        r1 := @parameter0: java.nio.ByteOrder;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public abstract java.nio.ByteBuffer put(byte);

    public final java.nio.ByteBuffer put(byte[])
    {
        java.nio.ByteBuffer r0;
        byte[] r1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.nio.ByteBuffer;

        r1 := @parameter0: byte[];

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public java.nio.ByteBuffer put(byte[], int, int)
    {
        java.nio.ByteBuffer r0;
        byte[] r1;
        int i0, i1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.nio.ByteBuffer;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public java.nio.ByteBuffer put(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0, r1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.nio.ByteBuffer;

        r1 := @parameter0: java.nio.ByteBuffer;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public abstract java.nio.ByteBuffer put(int, byte);

    public abstract java.nio.ByteBuffer putChar(char);

    public abstract java.nio.ByteBuffer putChar(int, char);

    public abstract java.nio.ByteBuffer putDouble(double);

    public abstract java.nio.ByteBuffer putDouble(int, double);

    public abstract java.nio.ByteBuffer putFloat(float);

    public abstract java.nio.ByteBuffer putFloat(int, float);

    public abstract java.nio.ByteBuffer putInt(int);

    public abstract java.nio.ByteBuffer putInt(int, int);

    public abstract java.nio.ByteBuffer putLong(long);

    public abstract java.nio.ByteBuffer putLong(int, long);

    public abstract java.nio.ByteBuffer putShort(short);

    public abstract java.nio.ByteBuffer putShort(int, short);

    public abstract java.nio.ByteBuffer slice();

    public volatile java.lang.Object array()
    {
        java.nio.ByteBuffer r0;
        byte[] $r1;

        r0 := @this: java.nio.ByteBuffer;

        $r1 = virtualinvoke r0.<java.nio.ByteBuffer: byte[] array()>();

        return $r1;
    }

    public volatile int compareTo(java.lang.Object)
    {
        java.nio.ByteBuffer r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: java.nio.ByteBuffer;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.nio.ByteBuffer) r1;

        $i0 = virtualinvoke r0.<java.nio.ByteBuffer: int compareTo(java.nio.ByteBuffer)>($r2);

        return $i0;
    }
}
