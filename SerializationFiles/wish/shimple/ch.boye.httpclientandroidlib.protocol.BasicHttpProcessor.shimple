public final class ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor extends java.lang.Object implements ch.boye.httpclientandroidlib.protocol.HttpProcessor, ch.boye.httpclientandroidlib.protocol.HttpRequestInterceptorList, ch.boye.httpclientandroidlib.protocol.HttpResponseInterceptorList, java.lang.Cloneable
{
    protected final java.util.List requestInterceptors;
    protected final java.util.List responseInterceptors;

    public void <init>()
    {
        ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor $r0;
        java.util.ArrayList $r1, $r1_1;

        $r0 := @this: ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r0.<ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor: java.util.List requestInterceptors> = $r1;

        $r1_1 = new java.util.ArrayList;

        specialinvoke $r1_1.<java.util.ArrayList: void <init>()>();

        $r0.<ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor: java.util.List responseInterceptors> = $r1_1;

        return;
    }

    public final void addInterceptor(ch.boye.httpclientandroidlib.HttpRequestInterceptor)
    {
        ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor $r0;
        ch.boye.httpclientandroidlib.HttpRequestInterceptor $r1;

        $r0 := @this: ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor;

        $r1 := @parameter0: ch.boye.httpclientandroidlib.HttpRequestInterceptor;

        virtualinvoke $r0.<ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor: void addRequestInterceptor(ch.boye.httpclientandroidlib.HttpRequestInterceptor)>($r1);

        return;
    }

    public final void addInterceptor(ch.boye.httpclientandroidlib.HttpRequestInterceptor, int)
    {
        ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor $r0;
        ch.boye.httpclientandroidlib.HttpRequestInterceptor $r1;
        int $i0;

        $r0 := @this: ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor;

        $r1 := @parameter0: ch.boye.httpclientandroidlib.HttpRequestInterceptor;

        $i0 := @parameter1: int;

        virtualinvoke $r0.<ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor: void addRequestInterceptor(ch.boye.httpclientandroidlib.HttpRequestInterceptor,int)>($r1, $i0);

        return;
    }

    public final void addInterceptor(ch.boye.httpclientandroidlib.HttpResponseInterceptor)
    {
        ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor $r0;
        ch.boye.httpclientandroidlib.HttpResponseInterceptor $r1;

        $r0 := @this: ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor;

        $r1 := @parameter0: ch.boye.httpclientandroidlib.HttpResponseInterceptor;

        virtualinvoke $r0.<ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor: void addResponseInterceptor(ch.boye.httpclientandroidlib.HttpResponseInterceptor)>($r1);

        return;
    }

    public final void addInterceptor(ch.boye.httpclientandroidlib.HttpResponseInterceptor, int)
    {
        ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor $r0;
        ch.boye.httpclientandroidlib.HttpResponseInterceptor $r1;
        int $i0;

        $r0 := @this: ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor;

        $r1 := @parameter0: ch.boye.httpclientandroidlib.HttpResponseInterceptor;

        $i0 := @parameter1: int;

        virtualinvoke $r0.<ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor: void addResponseInterceptor(ch.boye.httpclientandroidlib.HttpResponseInterceptor,int)>($r1, $i0);

        return;
    }

    public void addRequestInterceptor(ch.boye.httpclientandroidlib.HttpRequestInterceptor)
    {
        ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor $r0;
        ch.boye.httpclientandroidlib.HttpRequestInterceptor $r1;
        java.util.List $r2;

        $r0 := @this: ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor;

        $r1 := @parameter0: ch.boye.httpclientandroidlib.HttpRequestInterceptor;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = $r0.<ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor: java.util.List requestInterceptors>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }

    public void addRequestInterceptor(ch.boye.httpclientandroidlib.HttpRequestInterceptor, int)
    {
        ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor $r0;
        ch.boye.httpclientandroidlib.HttpRequestInterceptor $r1;
        int $i0;
        java.util.List $r2;

        $r0 := @this: ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor;

        $r1 := @parameter0: ch.boye.httpclientandroidlib.HttpRequestInterceptor;

        $i0 := @parameter1: int;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = $r0.<ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor: java.util.List requestInterceptors>;

        interfaceinvoke $r2.<java.util.List: void add(int,java.lang.Object)>($i0, $r1);

        return;
    }

    public void addResponseInterceptor(ch.boye.httpclientandroidlib.HttpResponseInterceptor)
    {
        ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor $r0;
        ch.boye.httpclientandroidlib.HttpResponseInterceptor $r1;
        java.util.List $r2;

        $r0 := @this: ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor;

        $r1 := @parameter0: ch.boye.httpclientandroidlib.HttpResponseInterceptor;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = $r0.<ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor: java.util.List responseInterceptors>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }

    public void addResponseInterceptor(ch.boye.httpclientandroidlib.HttpResponseInterceptor, int)
    {
        ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor $r0;
        ch.boye.httpclientandroidlib.HttpResponseInterceptor $r1;
        int $i0;
        java.util.List $r2;

        $r0 := @this: ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor;

        $r1 := @parameter0: ch.boye.httpclientandroidlib.HttpResponseInterceptor;

        $i0 := @parameter1: int;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = $r0.<ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor: java.util.List responseInterceptors>;

        interfaceinvoke $r2.<java.util.List: void add(int,java.lang.Object)>($i0, $r1);

        return;
    }

    public void clearInterceptors()
    {
        ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor $r0;

        $r0 := @this: ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor;

        virtualinvoke $r0.<ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor: void clearRequestInterceptors()>();

        virtualinvoke $r0.<ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor: void clearResponseInterceptors()>();

        return;
    }

    public void clearRequestInterceptors()
    {
        ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor $r0;
        java.util.List $r1;

        $r0 := @this: ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor;

        $r1 = $r0.<ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor: java.util.List requestInterceptors>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        return;
    }

    public void clearResponseInterceptors()
    {
        ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor $r0;
        java.util.List $r1;

        $r0 := @this: ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor;

        $r1 = $r0.<ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor: java.util.List responseInterceptors>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        return;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor $r0, $r2;
        java.lang.Object $r1;

        $r0 := @this: ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor;

        $r1 = specialinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor) $r1;

        virtualinvoke $r0.<ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor: void copyInterceptors(ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor)>($r2);

        return $r2;
    }

    public ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor copy()
    {
        ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor $r0, $r1;

        $r0 := @this: ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor;

        $r1 = new ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor;

        specialinvoke $r1.<ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor: void <init>()>();

        virtualinvoke $r0.<ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor: void copyInterceptors(ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor)>($r1);

        return $r1;
    }

    protected void copyInterceptors(ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor)
    {
        ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor $r0, $r1;
        java.util.List $r2, $r3, $r2_1, $r2_2, $r2_3, $r3_1;

        $r0 := @this: ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor;

        $r1 := @parameter0: ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor;

        $r2 = $r1.<ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor: java.util.List requestInterceptors>;

        interfaceinvoke $r2.<java.util.List: void clear()>();

        $r2_1 = $r1.<ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor: java.util.List requestInterceptors>;

        $r3 = $r0.<ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor: java.util.List requestInterceptors>;

        interfaceinvoke $r2_1.<java.util.List: boolean addAll(java.util.Collection)>($r3);

        $r2_2 = $r1.<ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor: java.util.List responseInterceptors>;

        interfaceinvoke $r2_2.<java.util.List: void clear()>();

        $r2_3 = $r1.<ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor: java.util.List responseInterceptors>;

        $r3_1 = $r0.<ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor: java.util.List responseInterceptors>;

        interfaceinvoke $r2_3.<java.util.List: boolean addAll(java.util.Collection)>($r3_1);

        return;
    }

    public ch.boye.httpclientandroidlib.HttpRequestInterceptor getRequestInterceptor(int)
    {
        ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor $r0;
        int $i0, $i1;
        java.util.List $r1, $r1_1, $r1_2;
        java.lang.Object $r2;
        ch.boye.httpclientandroidlib.HttpRequestInterceptor $r3;

        $r0 := @this: ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor;

        $i0 := @parameter0: int;

(0)     if $i0 < 0 goto label1;

        $r1 = $r0.<ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor: java.util.List requestInterceptors>;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

(1)     if $i0 < $i1 goto label2;

     label1:
        $r1_2 = Phi($r1 #0, $r1 #1);

        return null;

     label2:
        $r1_1 = $r0.<ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor: java.util.List requestInterceptors>;

        $r2 = interfaceinvoke $r1_1.<java.util.List: java.lang.Object get(int)>($i0);

        $r3 = (ch.boye.httpclientandroidlib.HttpRequestInterceptor) $r2;

        return $r3;
    }

    public int getRequestInterceptorCount()
    {
        ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor $r0;
        java.util.List $r1;
        int $i0;

        $r0 := @this: ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor;

        $r1 = $r0.<ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor: java.util.List requestInterceptors>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public ch.boye.httpclientandroidlib.HttpResponseInterceptor getResponseInterceptor(int)
    {
        ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor $r0;
        int $i0, $i1;
        java.util.List $r1, $r1_1, $r1_2;
        java.lang.Object $r2;
        ch.boye.httpclientandroidlib.HttpResponseInterceptor $r3;

        $r0 := @this: ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor;

        $i0 := @parameter0: int;

(0)     if $i0 < 0 goto label1;

        $r1 = $r0.<ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor: java.util.List responseInterceptors>;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

(1)     if $i0 < $i1 goto label2;

     label1:
        $r1_2 = Phi($r1 #0, $r1 #1);

        return null;

     label2:
        $r1_1 = $r0.<ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor: java.util.List responseInterceptors>;

        $r2 = interfaceinvoke $r1_1.<java.util.List: java.lang.Object get(int)>($i0);

        $r3 = (ch.boye.httpclientandroidlib.HttpResponseInterceptor) $r2;

        return $r3;
    }

    public int getResponseInterceptorCount()
    {
        ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor $r0;
        java.util.List $r1;
        int $i0;

        $r0 := @this: ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor;

        $r1 = $r0.<ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor: java.util.List responseInterceptors>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public void process(ch.boye.httpclientandroidlib.HttpRequest, ch.boye.httpclientandroidlib.protocol.HttpContext) throws java.io.IOException, ch.boye.httpclientandroidlib.HttpException
    {
        ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor $r0;
        ch.boye.httpclientandroidlib.HttpRequest $r1;
        ch.boye.httpclientandroidlib.protocol.HttpContext $r2;
        int $i0, $i1, $i0_1, $i0_2;
        java.util.List $r3, $r3_1, $r3_2;
        java.lang.Object $r4;
        ch.boye.httpclientandroidlib.HttpRequestInterceptor $r5;

        $r0 := @this: ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor;

        $r1 := @parameter0: ch.boye.httpclientandroidlib.HttpRequest;

        $r2 := @parameter1: ch.boye.httpclientandroidlib.protocol.HttpContext;

(0)     $i0 = 0;

     label1:
        $i0_1 = Phi($i0 #0, $i0_2 #1);

        $r3 = Phi($r3 #0, $r3_2 #1);

        $r3_1 = $r0.<ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor: java.util.List requestInterceptors>;

        $i1 = interfaceinvoke $r3_1.<java.util.List: int size()>();

        if $i0_1 >= $i1 goto label2;

        $r3_2 = $r0.<ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor: java.util.List requestInterceptors>;

        $r4 = interfaceinvoke $r3_2.<java.util.List: java.lang.Object get(int)>($i0_1);

        $r5 = (ch.boye.httpclientandroidlib.HttpRequestInterceptor) $r4;

        interfaceinvoke $r5.<ch.boye.httpclientandroidlib.HttpRequestInterceptor: void process(ch.boye.httpclientandroidlib.HttpRequest,ch.boye.httpclientandroidlib.protocol.HttpContext)>($r1, $r2);

        $i0_2 = $i0_1 + 1;

(1)     goto label1;

     label2:
        return;
    }

    public void process(ch.boye.httpclientandroidlib.HttpResponse, ch.boye.httpclientandroidlib.protocol.HttpContext) throws java.io.IOException, ch.boye.httpclientandroidlib.HttpException
    {
        ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor $r0;
        ch.boye.httpclientandroidlib.HttpResponse $r1;
        ch.boye.httpclientandroidlib.protocol.HttpContext $r2;
        int $i0, $i1, $i0_1, $i0_2;
        java.util.List $r3, $r3_1, $r3_2;
        java.lang.Object $r4;
        ch.boye.httpclientandroidlib.HttpResponseInterceptor $r5;

        $r0 := @this: ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor;

        $r1 := @parameter0: ch.boye.httpclientandroidlib.HttpResponse;

        $r2 := @parameter1: ch.boye.httpclientandroidlib.protocol.HttpContext;

(0)     $i0 = 0;

     label1:
        $r3 = Phi($r3 #0, $r3_2 #1);

        $i0_1 = Phi($i0 #0, $i0_2 #1);

        $r3_1 = $r0.<ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor: java.util.List responseInterceptors>;

        $i1 = interfaceinvoke $r3_1.<java.util.List: int size()>();

        if $i0_1 >= $i1 goto label2;

        $r3_2 = $r0.<ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor: java.util.List responseInterceptors>;

        $r4 = interfaceinvoke $r3_2.<java.util.List: java.lang.Object get(int)>($i0_1);

        $r5 = (ch.boye.httpclientandroidlib.HttpResponseInterceptor) $r4;

        interfaceinvoke $r5.<ch.boye.httpclientandroidlib.HttpResponseInterceptor: void process(ch.boye.httpclientandroidlib.HttpResponse,ch.boye.httpclientandroidlib.protocol.HttpContext)>($r1, $r2);

        $i0_2 = $i0_1 + 1;

(1)     goto label1;

     label2:
        return;
    }

    public void removeRequestInterceptorByClass(java.lang.Class)
    {
        ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor $r0;
        java.lang.Class $r1, $r5;
        java.util.List $r2;
        java.util.Iterator $r3;
        boolean $z0, $z0_1, $z0_2;
        java.lang.Object $r4;

        $r0 := @this: ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor;

        $r1 := @parameter0: java.lang.Class;

        $r2 = $r0.<ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor: java.util.List requestInterceptors>;

(0)     $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = Phi($z0 #0, $z0_2 #1, $z0_2 #2);

        $z0_1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0_1 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        $z0_2 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

(1)     if $z0_2 == 0 goto label1;

        interfaceinvoke $r3.<java.util.Iterator: void remove()>();

(2)     goto label1;

     label2:
        return;
    }

    public void removeResponseInterceptorByClass(java.lang.Class)
    {
        ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor $r0;
        java.lang.Class $r1, $r5;
        java.util.List $r2;
        java.util.Iterator $r3;
        boolean $z0, $z0_1, $z0_2;
        java.lang.Object $r4;

        $r0 := @this: ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor;

        $r1 := @parameter0: java.lang.Class;

        $r2 = $r0.<ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor: java.util.List responseInterceptors>;

(0)     $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = Phi($z0 #0, $z0_2 #1, $z0_2 #2);

        $z0_1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0_1 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        $z0_2 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

(1)     if $z0_2 == 0 goto label1;

        interfaceinvoke $r3.<java.util.Iterator: void remove()>();

(2)     goto label1;

     label2:
        return;
    }

    public void setInterceptors(java.util.List)
    {
        ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor $r0;
        java.util.List $r1, $r3, $r3_1;
        java.lang.IllegalArgumentException $r2;
        int $i0, $i1, $i0_1, $i0_2;
        java.lang.Object $r4;
        boolean $z0, $z0_1, $z0_2;
        ch.boye.httpclientandroidlib.HttpRequestInterceptor $r5;
        ch.boye.httpclientandroidlib.HttpResponseInterceptor $r6;

        $r0 := @this: ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor;

        $r1 := @parameter0: java.util.List;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("List must not be null.");

        throw $r2;

     label1:
        $r3 = $r0.<ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor: java.util.List requestInterceptors>;

        interfaceinvoke $r3.<java.util.List: void clear()>();

        $r3_1 = $r0.<ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor: java.util.List responseInterceptors>;

        interfaceinvoke $r3_1.<java.util.List: void clear()>();

(0)     $i0 = 0;

     label2:
        $i0_1 = Phi($i0 #0, $i0_2 #1);

        $z0 = Phi($z0 #0, $z0_2 #1);

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0_1 >= $i1 goto label5;

        $r4 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0_1);

        $z0_1 = $r4 instanceof ch.boye.httpclientandroidlib.HttpRequestInterceptor;

        if $z0_1 == 0 goto label3;

        $r5 = (ch.boye.httpclientandroidlib.HttpRequestInterceptor) $r4;

        virtualinvoke $r0.<ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor: void addInterceptor(ch.boye.httpclientandroidlib.HttpRequestInterceptor)>($r5);

     label3:
        $z0_2 = $r4 instanceof ch.boye.httpclientandroidlib.HttpResponseInterceptor;

        if $z0_2 == 0 goto label4;

        $r6 = (ch.boye.httpclientandroidlib.HttpResponseInterceptor) $r4;

        virtualinvoke $r0.<ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor: void addInterceptor(ch.boye.httpclientandroidlib.HttpResponseInterceptor)>($r6);

     label4:
        $i0_2 = $i0_1 + 1;

(1)     goto label2;

     label5:
        return;
    }
}
