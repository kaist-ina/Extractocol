public final enum class java.util.concurrent.TimeUnit extends java.lang.Enum
{
    public static final enum java.util.concurrent.TimeUnit DAYS;
    public static final enum java.util.concurrent.TimeUnit HOURS;
    public static final enum java.util.concurrent.TimeUnit MICROSECONDS;
    public static final enum java.util.concurrent.TimeUnit MILLISECONDS;
    public static final enum java.util.concurrent.TimeUnit MINUTES;
    public static final enum java.util.concurrent.TimeUnit NANOSECONDS;
    public static final enum java.util.concurrent.TimeUnit SECONDS;
    private static final java.util.concurrent.TimeUnit[] $VALUES;

    public static java.util.concurrent.TimeUnit[] values()
    {
        java.util.concurrent.TimeUnit[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (java.util.concurrent.TimeUnit[]) $r1;

        return $r2;
    }

    public static java.util.concurrent.TimeUnit valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        java.util.concurrent.TimeUnit $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "java/util/concurrent/TimeUnit", r0);

        $r2 = (java.util.concurrent.TimeUnit) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        java.util.concurrent.TimeUnit r0;
        java.lang.String r1;
        int i0;

        r0 := @this: java.util.concurrent.TimeUnit;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    public long convert(long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.TimeUnit r0, r1;
        long l0;
        java.lang.RuntimeException $r2;

        r0 := @this: java.util.concurrent.TimeUnit;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public long toNanos(long)
    {
        java.util.concurrent.TimeUnit r0;
        long l0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.TimeUnit;

        l0 := @parameter0: long;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public long toMicros(long)
    {
        java.util.concurrent.TimeUnit r0;
        long l0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.TimeUnit;

        l0 := @parameter0: long;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public long toMillis(long)
    {
        java.util.concurrent.TimeUnit r0;
        long l0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.TimeUnit;

        l0 := @parameter0: long;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public long toSeconds(long)
    {
        java.util.concurrent.TimeUnit r0;
        long l0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.TimeUnit;

        l0 := @parameter0: long;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public long toMinutes(long)
    {
        java.util.concurrent.TimeUnit r0;
        long l0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.TimeUnit;

        l0 := @parameter0: long;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public long toHours(long)
    {
        java.util.concurrent.TimeUnit r0;
        long l0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.TimeUnit;

        l0 := @parameter0: long;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public long toDays(long)
    {
        java.util.concurrent.TimeUnit r0;
        long l0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.TimeUnit;

        l0 := @parameter0: long;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public void timedWait(java.lang.Object, long) throws java.lang.InterruptedException
    {
        java.util.concurrent.TimeUnit r0;
        java.lang.Object r1;
        long l0;
        java.lang.RuntimeException $r2;

        r0 := @this: java.util.concurrent.TimeUnit;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public void timedJoin(java.lang.Thread, long) throws java.lang.InterruptedException
    {
        java.util.concurrent.TimeUnit r0;
        java.lang.Thread r1;
        long l0;
        java.lang.RuntimeException $r2;

        r0 := @this: java.util.concurrent.TimeUnit;

        r1 := @parameter0: java.lang.Thread;

        l0 := @parameter1: long;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public void sleep(long) throws java.lang.InterruptedException
    {
        java.util.concurrent.TimeUnit r0;
        long l0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.TimeUnit;

        l0 := @parameter0: long;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        java.util.concurrent.TimeUnit[] $r7;

        $r0 = new java.util.concurrent.TimeUnit;

        specialinvoke $r0.<java.util.concurrent.TimeUnit: void <init>(java.lang.String,int)>("DAYS", 0);

        <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit DAYS> = $r0;

        $r1 = new java.util.concurrent.TimeUnit;

        specialinvoke $r1.<java.util.concurrent.TimeUnit: void <init>(java.lang.String,int)>("HOURS", 1);

        <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit HOURS> = $r1;

        $r2 = new java.util.concurrent.TimeUnit;

        specialinvoke $r2.<java.util.concurrent.TimeUnit: void <init>(java.lang.String,int)>("MICROSECONDS", 2);

        <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MICROSECONDS> = $r2;

        $r3 = new java.util.concurrent.TimeUnit;

        specialinvoke $r3.<java.util.concurrent.TimeUnit: void <init>(java.lang.String,int)>("MILLISECONDS", 3);

        <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS> = $r3;

        $r4 = new java.util.concurrent.TimeUnit;

        specialinvoke $r4.<java.util.concurrent.TimeUnit: void <init>(java.lang.String,int)>("MINUTES", 4);

        <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES> = $r4;

        $r5 = new java.util.concurrent.TimeUnit;

        specialinvoke $r5.<java.util.concurrent.TimeUnit: void <init>(java.lang.String,int)>("NANOSECONDS", 5);

        <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS> = $r5;

        $r6 = new java.util.concurrent.TimeUnit;

        specialinvoke $r6.<java.util.concurrent.TimeUnit: void <init>(java.lang.String,int)>("SECONDS", 6);

        <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS> = $r6;

        $r7 = newarray (java.util.concurrent.TimeUnit)[7];

        $r8 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit DAYS>;

        $r7[0] = $r8;

        $r9 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit HOURS>;

        $r7[1] = $r9;

        $r10 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MICROSECONDS>;

        $r7[2] = $r10;

        $r11 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r7[3] = $r11;

        $r12 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $r7[4] = $r12;

        $r13 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        $r7[5] = $r13;

        $r14 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $r7[6] = $r14;

        <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit[] $VALUES> = $r7;

        return;
    }
}
