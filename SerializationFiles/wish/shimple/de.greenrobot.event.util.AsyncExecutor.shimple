public class de.greenrobot.event.util.AsyncExecutor extends java.lang.Object
{
    private final de.greenrobot.event.EventBus eventBus;
    private final java.lang.reflect.Constructor failureEventConstructor;
    private java.lang.Object scope;
    private final java.util.concurrent.Executor threadPool;

    private void <init>(java.util.concurrent.Executor, de.greenrobot.event.EventBus, java.lang.Class, java.lang.Object)
    {
        de.greenrobot.event.util.AsyncExecutor $r0;
        java.util.concurrent.Executor $r1;
        de.greenrobot.event.EventBus $r2;
        java.lang.Class $r3;
        java.lang.Object $r4;
        java.lang.Class[] $r5;
        java.lang.NoSuchMethodException $r6;
        java.lang.RuntimeException $r7;
        java.lang.reflect.Constructor $r8;

        $r0 := @this: de.greenrobot.event.util.AsyncExecutor;

        $r1 := @parameter0: java.util.concurrent.Executor;

        $r2 := @parameter1: de.greenrobot.event.EventBus;

        $r3 := @parameter2: java.lang.Class;

        $r4 := @parameter3: java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<de.greenrobot.event.util.AsyncExecutor: java.util.concurrent.Executor threadPool> = $r1;

        $r0.<de.greenrobot.event.util.AsyncExecutor: de.greenrobot.event.EventBus eventBus> = $r2;

        $r0.<de.greenrobot.event.util.AsyncExecutor: java.lang.Object scope> = $r4;

        $r5 = newarray (java.lang.Class)[1];

        $r5[0] = class "java/lang/Throwable";

     label1:
        $r8 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r5);

     label2:
        $r0.<de.greenrobot.event.util.AsyncExecutor: java.lang.reflect.Constructor failureEventConstructor> = $r8;

        return;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Failure event class must have a constructor with one parameter of type Throwable", $r6);

        throw $r7;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
    }

    void <init>(java.util.concurrent.Executor, de.greenrobot.event.EventBus, java.lang.Class, java.lang.Object, de.greenrobot.event.util.AsyncExecutor$1)
    {
        de.greenrobot.event.util.AsyncExecutor $r0;
        java.util.concurrent.Executor $r1;
        de.greenrobot.event.EventBus $r2;
        java.lang.Class $r3;
        java.lang.Object $r4;
        de.greenrobot.event.util.AsyncExecutor$1 $r5;

        $r0 := @this: de.greenrobot.event.util.AsyncExecutor;

        $r1 := @parameter0: java.util.concurrent.Executor;

        $r2 := @parameter1: de.greenrobot.event.EventBus;

        $r3 := @parameter2: java.lang.Class;

        $r4 := @parameter3: java.lang.Object;

        $r5 := @parameter4: de.greenrobot.event.util.AsyncExecutor$1;

        specialinvoke $r0.<de.greenrobot.event.util.AsyncExecutor: void <init>(java.util.concurrent.Executor,de.greenrobot.event.EventBus,java.lang.Class,java.lang.Object)>($r1, $r2, $r3, $r4);

        return;
    }

    static java.lang.reflect.Constructor access$200(de.greenrobot.event.util.AsyncExecutor)
    {
        de.greenrobot.event.util.AsyncExecutor $r0;
        java.lang.reflect.Constructor r1;

        $r0 := @parameter0: de.greenrobot.event.util.AsyncExecutor;

        r1 = $r0.<de.greenrobot.event.util.AsyncExecutor: java.lang.reflect.Constructor failureEventConstructor>;

        return r1;
    }

    static java.lang.Object access$300(de.greenrobot.event.util.AsyncExecutor)
    {
        de.greenrobot.event.util.AsyncExecutor $r0;
        java.lang.Object r1;

        $r0 := @parameter0: de.greenrobot.event.util.AsyncExecutor;

        r1 = $r0.<de.greenrobot.event.util.AsyncExecutor: java.lang.Object scope>;

        return r1;
    }

    static de.greenrobot.event.EventBus access$400(de.greenrobot.event.util.AsyncExecutor)
    {
        de.greenrobot.event.util.AsyncExecutor $r0;
        de.greenrobot.event.EventBus r1;

        $r0 := @parameter0: de.greenrobot.event.util.AsyncExecutor;

        r1 = $r0.<de.greenrobot.event.util.AsyncExecutor: de.greenrobot.event.EventBus eventBus>;

        return r1;
    }

    public static de.greenrobot.event.util.AsyncExecutor$Builder builder()
    {
        de.greenrobot.event.util.AsyncExecutor$Builder $r0;

        $r0 = new de.greenrobot.event.util.AsyncExecutor$Builder;

        specialinvoke $r0.<de.greenrobot.event.util.AsyncExecutor$Builder: void <init>(de.greenrobot.event.util.AsyncExecutor$1)>(null);

        return $r0;
    }

    public static de.greenrobot.event.util.AsyncExecutor create()
    {
        de.greenrobot.event.util.AsyncExecutor$Builder $r0;
        de.greenrobot.event.util.AsyncExecutor $r1;

        $r0 = new de.greenrobot.event.util.AsyncExecutor$Builder;

        specialinvoke $r0.<de.greenrobot.event.util.AsyncExecutor$Builder: void <init>(de.greenrobot.event.util.AsyncExecutor$1)>(null);

        $r1 = virtualinvoke $r0.<de.greenrobot.event.util.AsyncExecutor$Builder: de.greenrobot.event.util.AsyncExecutor build()>();

        return $r1;
    }

    public void execute(de.greenrobot.event.util.AsyncExecutor$RunnableEx)
    {
        de.greenrobot.event.util.AsyncExecutor $r0;
        de.greenrobot.event.util.AsyncExecutor$RunnableEx $r1;
        java.util.concurrent.Executor $r2;
        de.greenrobot.event.util.AsyncExecutor$1 $r3;

        $r0 := @this: de.greenrobot.event.util.AsyncExecutor;

        $r1 := @parameter0: de.greenrobot.event.util.AsyncExecutor$RunnableEx;

        $r2 = $r0.<de.greenrobot.event.util.AsyncExecutor: java.util.concurrent.Executor threadPool>;

        $r3 = new de.greenrobot.event.util.AsyncExecutor$1;

        specialinvoke $r3.<de.greenrobot.event.util.AsyncExecutor$1: void <init>(de.greenrobot.event.util.AsyncExecutor,de.greenrobot.event.util.AsyncExecutor$RunnableEx)>($r0, $r1);

        interfaceinvoke $r2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r3);

        return;
    }
}
