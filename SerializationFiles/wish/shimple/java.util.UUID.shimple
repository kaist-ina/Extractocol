public final class java.util.UUID extends java.lang.Object implements java.io.Serializable, java.lang.Comparable
{

    public void <init>(long, long)
    {
        java.util.UUID r0;
        long l0, l1;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.UUID;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public static java.util.UUID randomUUID()
    {
        java.lang.RuntimeException $r0;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static java.util.UUID nameUUIDFromBytes(byte[])
    {
        byte[] r0;
        java.lang.RuntimeException $r1;

        r0 := @parameter0: byte[];

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public static java.util.UUID fromString(java.lang.String)
    {
        java.lang.String r0;
        java.lang.RuntimeException $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public long getLeastSignificantBits()
    {
        java.util.UUID r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.UUID;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public long getMostSignificantBits()
    {
        java.util.UUID r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.UUID;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public int version()
    {
        java.util.UUID r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.UUID;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public int variant()
    {
        java.util.UUID r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.UUID;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public long timestamp()
    {
        java.util.UUID r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.UUID;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public int clockSequence()
    {
        java.util.UUID r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.UUID;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public long node()
    {
        java.util.UUID r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.UUID;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public int compareTo(java.util.UUID)
    {
        java.util.UUID r0, r1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.util.UUID;

        r1 := @parameter0: java.util.UUID;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.UUID r0;
        java.lang.Object r1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.util.UUID;

        r1 := @parameter0: java.lang.Object;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public int hashCode()
    {
        java.util.UUID r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.UUID;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public java.lang.String toString()
    {
        java.util.UUID r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.UUID;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public volatile int compareTo(java.lang.Object)
    {
        java.util.UUID r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: java.util.UUID;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.util.UUID) r1;

        $i0 = virtualinvoke r0.<java.util.UUID: int compareTo(java.util.UUID)>($r2);

        return $i0;
    }
}
