public final class java.lang.Character extends java.lang.Object implements java.io.Serializable, java.lang.Comparable
{
    public static final byte COMBINING_SPACING_MARK;
    public static final byte CONNECTOR_PUNCTUATION;
    public static final byte CONTROL;
    public static final byte CURRENCY_SYMBOL;
    public static final byte DASH_PUNCTUATION;
    public static final byte DECIMAL_DIGIT_NUMBER;
    public static final byte DIRECTIONALITY_ARABIC_NUMBER;
    public static final byte DIRECTIONALITY_BOUNDARY_NEUTRAL;
    public static final byte DIRECTIONALITY_COMMON_NUMBER_SEPARATOR;
    public static final byte DIRECTIONALITY_EUROPEAN_NUMBER;
    public static final byte DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR;
    public static final byte DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR;
    public static final byte DIRECTIONALITY_LEFT_TO_RIGHT;
    public static final byte DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING;
    public static final byte DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE;
    public static final byte DIRECTIONALITY_NONSPACING_MARK;
    public static final byte DIRECTIONALITY_OTHER_NEUTRALS;
    public static final byte DIRECTIONALITY_PARAGRAPH_SEPARATOR;
    public static final byte DIRECTIONALITY_POP_DIRECTIONAL_FORMAT;
    public static final byte DIRECTIONALITY_RIGHT_TO_LEFT;
    public static final byte DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC;
    public static final byte DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING;
    public static final byte DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE;
    public static final byte DIRECTIONALITY_SEGMENT_SEPARATOR;
    public static final byte DIRECTIONALITY_UNDEFINED;
    public static final byte DIRECTIONALITY_WHITESPACE;
    public static final byte ENCLOSING_MARK;
    public static final byte END_PUNCTUATION;
    public static final byte FINAL_QUOTE_PUNCTUATION;
    public static final byte FORMAT;
    public static final byte INITIAL_QUOTE_PUNCTUATION;
    public static final byte LETTER_NUMBER;
    public static final byte LINE_SEPARATOR;
    public static final byte LOWERCASE_LETTER;
    public static final byte MATH_SYMBOL;
    public static final int MAX_CODE_POINT;
    public static final char MAX_HIGH_SURROGATE;
    public static final char MAX_LOW_SURROGATE;
    public static final int MAX_RADIX;
    public static final char MAX_SURROGATE;
    public static final char MAX_VALUE;
    public static final int MIN_CODE_POINT;
    public static final char MIN_HIGH_SURROGATE;
    public static final char MIN_LOW_SURROGATE;
    public static final int MIN_RADIX;
    public static final int MIN_SUPPLEMENTARY_CODE_POINT;
    public static final char MIN_SURROGATE;
    public static final char MIN_VALUE;
    public static final byte MODIFIER_LETTER;
    public static final byte MODIFIER_SYMBOL;
    public static final byte NON_SPACING_MARK;
    public static final byte OTHER_LETTER;
    public static final byte OTHER_NUMBER;
    public static final byte OTHER_PUNCTUATION;
    public static final byte OTHER_SYMBOL;
    public static final byte PARAGRAPH_SEPARATOR;
    public static final byte PRIVATE_USE;
    public static final int SIZE;
    public static final byte SPACE_SEPARATOR;
    public static final byte START_PUNCTUATION;
    public static final byte SURROGATE;
    public static final byte TITLECASE_LETTER;
    public static final java.lang.Class TYPE;
    public static final byte UNASSIGNED;
    public static final byte UPPERCASE_LETTER;

    public void <init>(char)
    {
        java.lang.Character r0;
        char c0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.lang.Character;

        c0 := @parameter0: char;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public char charValue()
    {
        java.lang.Character r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.lang.Character;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public int compareTo(java.lang.Character)
    {
        java.lang.Character r0, r1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.lang.Character;

        r1 := @parameter0: java.lang.Character;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public static int compare(char, char)
    {
        char c0, c1;
        java.lang.RuntimeException $r0;

        c0 := @parameter0: char;

        c1 := @parameter1: char;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static java.lang.Character valueOf(char)
    {
        char c0;
        java.lang.RuntimeException $r0;

        c0 := @parameter0: char;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static boolean isValidCodePoint(int)
    {
        int i0;
        java.lang.RuntimeException $r0;

        i0 := @parameter0: int;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static boolean isSupplementaryCodePoint(int)
    {
        int i0;
        java.lang.RuntimeException $r0;

        i0 := @parameter0: int;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static boolean isHighSurrogate(char)
    {
        char c0;
        java.lang.RuntimeException $r0;

        c0 := @parameter0: char;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static boolean isLowSurrogate(char)
    {
        char c0;
        java.lang.RuntimeException $r0;

        c0 := @parameter0: char;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static boolean isSurrogate(char)
    {
        char c0;
        java.lang.RuntimeException $r0;

        c0 := @parameter0: char;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static boolean isSurrogatePair(char, char)
    {
        char c0, c1;
        java.lang.RuntimeException $r0;

        c0 := @parameter0: char;

        c1 := @parameter1: char;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static int charCount(int)
    {
        int i0;
        java.lang.RuntimeException $r0;

        i0 := @parameter0: int;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static int toCodePoint(char, char)
    {
        char c0, c1;
        java.lang.RuntimeException $r0;

        c0 := @parameter0: char;

        c1 := @parameter1: char;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static int codePointAt(java.lang.CharSequence, int)
    {
        java.lang.CharSequence r0;
        int i0;
        java.lang.RuntimeException $r1;

        r0 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public static int codePointAt(char[], int)
    {
        char[] r0;
        int i0;
        java.lang.RuntimeException $r1;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public static int codePointAt(char[], int, int)
    {
        char[] r0;
        int i0, i1;
        java.lang.RuntimeException $r1;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public static int codePointBefore(java.lang.CharSequence, int)
    {
        java.lang.CharSequence r0;
        int i0;
        java.lang.RuntimeException $r1;

        r0 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public static int codePointBefore(char[], int)
    {
        char[] r0;
        int i0;
        java.lang.RuntimeException $r1;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public static int codePointBefore(char[], int, int)
    {
        char[] r0;
        int i0, i1;
        java.lang.RuntimeException $r1;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public static int toChars(int, char[], int)
    {
        int i0, i1;
        char[] r0;
        java.lang.RuntimeException $r1;

        i0 := @parameter0: int;

        r0 := @parameter1: char[];

        i1 := @parameter2: int;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public static char[] toChars(int)
    {
        int i0;
        java.lang.RuntimeException $r0;

        i0 := @parameter0: int;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static int codePointCount(java.lang.CharSequence, int, int)
    {
        java.lang.CharSequence r0;
        int i0, i1;
        java.lang.RuntimeException $r1;

        r0 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public static int codePointCount(char[], int, int)
    {
        char[] r0;
        int i0, i1;
        java.lang.RuntimeException $r1;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public static int offsetByCodePoints(java.lang.CharSequence, int, int)
    {
        java.lang.CharSequence r0;
        int i0, i1;
        java.lang.RuntimeException $r1;

        r0 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public static int offsetByCodePoints(char[], int, int, int, int)
    {
        char[] r0;
        int i0, i1, i2, i3;
        java.lang.RuntimeException $r1;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public static int digit(char, int)
    {
        char c0;
        int i1;
        java.lang.RuntimeException $r0;

        c0 := @parameter0: char;

        i1 := @parameter1: int;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static int digit(int, int)
    {
        int i0, i1;
        java.lang.RuntimeException $r0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Character r0;
        java.lang.Object r1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.lang.Character;

        r1 := @parameter0: java.lang.Object;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public static char forDigit(int, int)
    {
        int i0, i1;
        java.lang.RuntimeException $r0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static java.lang.String getName(int)
    {
        int i0;
        java.lang.RuntimeException $r0;

        i0 := @parameter0: int;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static int getNumericValue(char)
    {
        char c0;
        java.lang.RuntimeException $r0;

        c0 := @parameter0: char;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static int getNumericValue(int)
    {
        int i0;
        java.lang.RuntimeException $r0;

        i0 := @parameter0: int;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static int getType(char)
    {
        char c0;
        java.lang.RuntimeException $r0;

        c0 := @parameter0: char;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static int getType(int)
    {
        int i0;
        java.lang.RuntimeException $r0;

        i0 := @parameter0: int;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static byte getDirectionality(char)
    {
        char c0;
        java.lang.RuntimeException $r0;

        c0 := @parameter0: char;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static byte getDirectionality(int)
    {
        int i0;
        java.lang.RuntimeException $r0;

        i0 := @parameter0: int;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static boolean isMirrored(char)
    {
        char c0;
        java.lang.RuntimeException $r0;

        c0 := @parameter0: char;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static boolean isMirrored(int)
    {
        int i0;
        java.lang.RuntimeException $r0;

        i0 := @parameter0: int;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public int hashCode()
    {
        java.lang.Character r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.lang.Character;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public static char highSurrogate(int)
    {
        int i0;
        java.lang.RuntimeException $r0;

        i0 := @parameter0: int;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static char lowSurrogate(int)
    {
        int i0;
        java.lang.RuntimeException $r0;

        i0 := @parameter0: int;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static native boolean isAlphabetic(int);

    public static boolean isBmpCodePoint(int)
    {
        int i0;
        java.lang.RuntimeException $r0;

        i0 := @parameter0: int;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static boolean isDefined(char)
    {
        char c0;
        java.lang.RuntimeException $r0;

        c0 := @parameter0: char;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static boolean isDefined(int)
    {
        int i0;
        java.lang.RuntimeException $r0;

        i0 := @parameter0: int;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static boolean isDigit(char)
    {
        char c0;
        java.lang.RuntimeException $r0;

        c0 := @parameter0: char;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static boolean isDigit(int)
    {
        int i0;
        java.lang.RuntimeException $r0;

        i0 := @parameter0: int;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static boolean isIdentifierIgnorable(char)
    {
        char c0;
        java.lang.RuntimeException $r0;

        c0 := @parameter0: char;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static native boolean isIdeographic(int);

    public static boolean isIdentifierIgnorable(int)
    {
        int i0;
        java.lang.RuntimeException $r0;

        i0 := @parameter0: int;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static boolean isISOControl(char)
    {
        char c0;
        java.lang.RuntimeException $r0;

        c0 := @parameter0: char;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static boolean isISOControl(int)
    {
        int i0;
        java.lang.RuntimeException $r0;

        i0 := @parameter0: int;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static boolean isJavaIdentifierPart(char)
    {
        char c0;
        java.lang.RuntimeException $r0;

        c0 := @parameter0: char;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static boolean isJavaIdentifierPart(int)
    {
        int i0;
        java.lang.RuntimeException $r0;

        i0 := @parameter0: int;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static boolean isJavaIdentifierStart(char)
    {
        char c0;
        java.lang.RuntimeException $r0;

        c0 := @parameter0: char;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static boolean isJavaIdentifierStart(int)
    {
        int i0;
        java.lang.RuntimeException $r0;

        i0 := @parameter0: int;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static boolean isJavaLetter(char)
    {
        char c0;
        java.lang.RuntimeException $r0;

        c0 := @parameter0: char;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static boolean isJavaLetterOrDigit(char)
    {
        char c0;
        java.lang.RuntimeException $r0;

        c0 := @parameter0: char;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static boolean isLetter(char)
    {
        char c0;
        java.lang.RuntimeException $r0;

        c0 := @parameter0: char;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static boolean isLetter(int)
    {
        int i0;
        java.lang.RuntimeException $r0;

        i0 := @parameter0: int;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static boolean isLetterOrDigit(char)
    {
        char c0;
        java.lang.RuntimeException $r0;

        c0 := @parameter0: char;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static boolean isLetterOrDigit(int)
    {
        int i0;
        java.lang.RuntimeException $r0;

        i0 := @parameter0: int;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static boolean isLowerCase(char)
    {
        char c0;
        java.lang.RuntimeException $r0;

        c0 := @parameter0: char;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static boolean isLowerCase(int)
    {
        int i0;
        java.lang.RuntimeException $r0;

        i0 := @parameter0: int;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static boolean isSpace(char)
    {
        char c0;
        java.lang.RuntimeException $r0;

        c0 := @parameter0: char;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static boolean isSpaceChar(char)
    {
        char c0;
        java.lang.RuntimeException $r0;

        c0 := @parameter0: char;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static boolean isSpaceChar(int)
    {
        int i0;
        java.lang.RuntimeException $r0;

        i0 := @parameter0: int;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static boolean isTitleCase(char)
    {
        char c0;
        java.lang.RuntimeException $r0;

        c0 := @parameter0: char;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static boolean isTitleCase(int)
    {
        int i0;
        java.lang.RuntimeException $r0;

        i0 := @parameter0: int;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static boolean isUnicodeIdentifierPart(char)
    {
        char c0;
        java.lang.RuntimeException $r0;

        c0 := @parameter0: char;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static boolean isUnicodeIdentifierPart(int)
    {
        int i0;
        java.lang.RuntimeException $r0;

        i0 := @parameter0: int;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static boolean isUnicodeIdentifierStart(char)
    {
        char c0;
        java.lang.RuntimeException $r0;

        c0 := @parameter0: char;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static boolean isUnicodeIdentifierStart(int)
    {
        int i0;
        java.lang.RuntimeException $r0;

        i0 := @parameter0: int;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static boolean isUpperCase(char)
    {
        char c0;
        java.lang.RuntimeException $r0;

        c0 := @parameter0: char;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static boolean isUpperCase(int)
    {
        int i0;
        java.lang.RuntimeException $r0;

        i0 := @parameter0: int;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static boolean isWhitespace(char)
    {
        char c0;
        java.lang.RuntimeException $r0;

        c0 := @parameter0: char;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static boolean isWhitespace(int)
    {
        int i0;
        java.lang.RuntimeException $r0;

        i0 := @parameter0: int;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static char reverseBytes(char)
    {
        char c0;
        java.lang.RuntimeException $r0;

        c0 := @parameter0: char;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static char toLowerCase(char)
    {
        char c0;
        java.lang.RuntimeException $r0;

        c0 := @parameter0: char;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static int toLowerCase(int)
    {
        int i0;
        java.lang.RuntimeException $r0;

        i0 := @parameter0: int;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public java.lang.String toString()
    {
        java.lang.Character r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.lang.Character;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public static java.lang.String toString(char)
    {
        char c0;
        java.lang.RuntimeException $r0;

        c0 := @parameter0: char;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static char toTitleCase(char)
    {
        char c0;
        java.lang.RuntimeException $r0;

        c0 := @parameter0: char;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static int toTitleCase(int)
    {
        int i0;
        java.lang.RuntimeException $r0;

        i0 := @parameter0: int;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static char toUpperCase(char)
    {
        char c0;
        java.lang.RuntimeException $r0;

        c0 := @parameter0: char;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static int toUpperCase(int)
    {
        int i0;
        java.lang.RuntimeException $r0;

        i0 := @parameter0: int;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public volatile int compareTo(java.lang.Object)
    {
        java.lang.Character r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: java.lang.Character;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Character) r1;

        $i0 = virtualinvoke r0.<java.lang.Character: int compareTo(java.lang.Character)>($r2);

        return $i0;
    }

    static void <clinit>()
    {
        <java.lang.Character: java.lang.Class TYPE> = null;

        return;
    }
}
