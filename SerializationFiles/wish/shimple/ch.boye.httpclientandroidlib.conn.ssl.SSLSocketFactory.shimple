public class ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory extends java.lang.Object implements ch.boye.httpclientandroidlib.conn.scheme.LayeredSchemeSocketFactory, ch.boye.httpclientandroidlib.conn.scheme.LayeredSocketFactory, ch.boye.httpclientandroidlib.conn.scheme.SchemeLayeredSocketFactory
{
    public static final ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier ALLOW_ALL_HOSTNAME_VERIFIER;
    public static final ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER;
    private static final char[] EMPTY_PASSWORD;
    public static final java.lang.String SSL;
    public static final java.lang.String SSLV2;
    public static final ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier STRICT_HOSTNAME_VERIFIER;
    public static final java.lang.String TLS;
    private volatile ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier hostnameVerifier;
    private final ch.boye.httpclientandroidlib.conn.scheme.HostNameResolver nameResolver;
    private final javax.net.ssl.SSLSocketFactory socketfactory;

    static void <clinit>()
    {
        ch.boye.httpclientandroidlib.conn.ssl.AllowAllHostnameVerifier $r0;
        ch.boye.httpclientandroidlib.conn.ssl.BrowserCompatHostnameVerifier $r1;
        ch.boye.httpclientandroidlib.conn.ssl.StrictHostnameVerifier $r2;
        java.lang.String $r3;
        char[] $r4;

        $r0 = new ch.boye.httpclientandroidlib.conn.ssl.AllowAllHostnameVerifier;

        specialinvoke $r0.<ch.boye.httpclientandroidlib.conn.ssl.AllowAllHostnameVerifier: void <init>()>();

        <ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier ALLOW_ALL_HOSTNAME_VERIFIER> = $r0;

        $r1 = new ch.boye.httpclientandroidlib.conn.ssl.BrowserCompatHostnameVerifier;

        specialinvoke $r1.<ch.boye.httpclientandroidlib.conn.ssl.BrowserCompatHostnameVerifier: void <init>()>();

        <ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER> = $r1;

        $r2 = new ch.boye.httpclientandroidlib.conn.ssl.StrictHostnameVerifier;

        specialinvoke $r2.<ch.boye.httpclientandroidlib.conn.ssl.StrictHostnameVerifier: void <init>()>();

        <ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier STRICT_HOSTNAME_VERIFIER> = $r2;

        $r3 = "";

        $r4 = virtualinvoke $r3.<java.lang.String: char[] toCharArray()>();

        <ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: char[] EMPTY_PASSWORD> = $r4;

        return;
    }

    public void <init>(ch.boye.httpclientandroidlib.conn.ssl.TrustStrategy) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException, java.security.KeyStoreException, java.security.UnrecoverableKeyException
    {
        ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory $r0;
        ch.boye.httpclientandroidlib.conn.ssl.TrustStrategy $r1;
        ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier $r2;

        $r0 := @this: ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;

        $r1 := @parameter0: ch.boye.httpclientandroidlib.conn.ssl.TrustStrategy;

        $r2 = <ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER>;

        specialinvoke $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: void <init>(java.lang.String,java.security.KeyStore,java.lang.String,java.security.KeyStore,java.security.SecureRandom,ch.boye.httpclientandroidlib.conn.ssl.TrustStrategy,ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier)>("TLS", null, null, null, null, $r1, $r2);

        return;
    }

    public void <init>(ch.boye.httpclientandroidlib.conn.ssl.TrustStrategy, ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException, java.security.KeyStoreException, java.security.UnrecoverableKeyException
    {
        ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory $r0;
        ch.boye.httpclientandroidlib.conn.ssl.TrustStrategy $r1;
        ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier $r2;

        $r0 := @this: ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;

        $r1 := @parameter0: ch.boye.httpclientandroidlib.conn.ssl.TrustStrategy;

        $r2 := @parameter1: ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier;

        specialinvoke $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: void <init>(java.lang.String,java.security.KeyStore,java.lang.String,java.security.KeyStore,java.security.SecureRandom,ch.boye.httpclientandroidlib.conn.ssl.TrustStrategy,ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier)>("TLS", null, null, null, null, $r1, $r2);

        return;
    }

    public void <init>(java.lang.String, java.security.KeyStore, java.lang.String, java.security.KeyStore, java.security.SecureRandom, ch.boye.httpclientandroidlib.conn.scheme.HostNameResolver) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException, java.security.KeyStoreException, java.security.UnrecoverableKeyException
    {
        ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory $r0;
        java.lang.String $r1, $r3;
        java.security.KeyStore $r2, $r4;
        java.security.SecureRandom $r5;
        ch.boye.httpclientandroidlib.conn.scheme.HostNameResolver $r6;
        javax.net.ssl.SSLContext $r7;

        $r0 := @this: ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.security.KeyStore;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.security.KeyStore;

        $r5 := @parameter4: java.security.SecureRandom;

        $r6 := @parameter5: ch.boye.httpclientandroidlib.conn.scheme.HostNameResolver;

        $r7 = staticinvoke <ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLContext createSSLContext(java.lang.String,java.security.KeyStore,java.lang.String,java.security.KeyStore,java.security.SecureRandom,ch.boye.httpclientandroidlib.conn.ssl.TrustStrategy)>($r1, $r2, $r3, $r4, $r5, null);

        specialinvoke $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: void <init>(javax.net.ssl.SSLContext,ch.boye.httpclientandroidlib.conn.scheme.HostNameResolver)>($r7, $r6);

        return;
    }

    public void <init>(java.lang.String, java.security.KeyStore, java.lang.String, java.security.KeyStore, java.security.SecureRandom, ch.boye.httpclientandroidlib.conn.ssl.TrustStrategy, ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException, java.security.KeyStoreException, java.security.UnrecoverableKeyException
    {
        ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory $r0;
        java.lang.String $r1, $r3;
        java.security.KeyStore $r2, $r4;
        java.security.SecureRandom $r5;
        ch.boye.httpclientandroidlib.conn.ssl.TrustStrategy $r6;
        ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier $r7;
        javax.net.ssl.SSLContext $r8;

        $r0 := @this: ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.security.KeyStore;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.security.KeyStore;

        $r5 := @parameter4: java.security.SecureRandom;

        $r6 := @parameter5: ch.boye.httpclientandroidlib.conn.ssl.TrustStrategy;

        $r7 := @parameter6: ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier;

        $r8 = staticinvoke <ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLContext createSSLContext(java.lang.String,java.security.KeyStore,java.lang.String,java.security.KeyStore,java.security.SecureRandom,ch.boye.httpclientandroidlib.conn.ssl.TrustStrategy)>($r1, $r2, $r3, $r4, $r5, $r6);

        specialinvoke $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: void <init>(javax.net.ssl.SSLContext,ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier)>($r8, $r7);

        return;
    }

    public void <init>(java.lang.String, java.security.KeyStore, java.lang.String, java.security.KeyStore, java.security.SecureRandom, ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException, java.security.KeyStoreException, java.security.UnrecoverableKeyException
    {
        ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory $r0;
        java.lang.String $r1, $r3;
        java.security.KeyStore $r2, $r4;
        java.security.SecureRandom $r5;
        ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier $r6;
        javax.net.ssl.SSLContext $r7;

        $r0 := @this: ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.security.KeyStore;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.security.KeyStore;

        $r5 := @parameter4: java.security.SecureRandom;

        $r6 := @parameter5: ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier;

        $r7 = staticinvoke <ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLContext createSSLContext(java.lang.String,java.security.KeyStore,java.lang.String,java.security.KeyStore,java.security.SecureRandom,ch.boye.httpclientandroidlib.conn.ssl.TrustStrategy)>($r1, $r2, $r3, $r4, $r5, null);

        specialinvoke $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: void <init>(javax.net.ssl.SSLContext,ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier)>($r7, $r6);

        return;
    }

    public void <init>(java.security.KeyStore) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException, java.security.KeyStoreException, java.security.UnrecoverableKeyException
    {
        ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory $r0;
        java.security.KeyStore $r1;
        ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier $r2;

        $r0 := @this: ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;

        $r1 := @parameter0: java.security.KeyStore;

        $r2 = <ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER>;

        specialinvoke $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: void <init>(java.lang.String,java.security.KeyStore,java.lang.String,java.security.KeyStore,java.security.SecureRandom,ch.boye.httpclientandroidlib.conn.ssl.TrustStrategy,ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier)>("TLS", null, null, $r1, null, null, $r2);

        return;
    }

    public void <init>(java.security.KeyStore, java.lang.String) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException, java.security.KeyStoreException, java.security.UnrecoverableKeyException
    {
        ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory $r0;
        java.security.KeyStore $r1;
        java.lang.String $r2;
        ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier $r3;

        $r0 := @this: ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;

        $r1 := @parameter0: java.security.KeyStore;

        $r2 := @parameter1: java.lang.String;

        $r3 = <ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER>;

        specialinvoke $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: void <init>(java.lang.String,java.security.KeyStore,java.lang.String,java.security.KeyStore,java.security.SecureRandom,ch.boye.httpclientandroidlib.conn.ssl.TrustStrategy,ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier)>("TLS", $r1, $r2, null, null, null, $r3);

        return;
    }

    public void <init>(java.security.KeyStore, java.lang.String, java.security.KeyStore) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException, java.security.KeyStoreException, java.security.UnrecoverableKeyException
    {
        ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory $r0;
        java.security.KeyStore $r1, $r3;
        java.lang.String $r2;
        ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier $r4;

        $r0 := @this: ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;

        $r1 := @parameter0: java.security.KeyStore;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.security.KeyStore;

        $r4 = <ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER>;

        specialinvoke $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: void <init>(java.lang.String,java.security.KeyStore,java.lang.String,java.security.KeyStore,java.security.SecureRandom,ch.boye.httpclientandroidlib.conn.ssl.TrustStrategy,ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier)>("TLS", $r1, $r2, $r3, null, null, $r4);

        return;
    }

    public void <init>(javax.net.ssl.SSLContext)
    {
        ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory $r0;
        javax.net.ssl.SSLContext $r1;
        ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier $r2;

        $r0 := @this: ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;

        $r1 := @parameter0: javax.net.ssl.SSLContext;

        $r2 = <ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER>;

        specialinvoke $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: void <init>(javax.net.ssl.SSLContext,ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier)>($r1, $r2);

        return;
    }

    public void <init>(javax.net.ssl.SSLContext, ch.boye.httpclientandroidlib.conn.scheme.HostNameResolver)
    {
        ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory $r0;
        javax.net.ssl.SSLContext $r1;
        ch.boye.httpclientandroidlib.conn.scheme.HostNameResolver $r2;
        ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier $r3;
        javax.net.ssl.SSLSocketFactory $r4;

        $r0 := @this: ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;

        $r1 := @parameter0: javax.net.ssl.SSLContext;

        $r2 := @parameter1: ch.boye.httpclientandroidlib.conn.scheme.HostNameResolver;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r4 = virtualinvoke $r1.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

        $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLSocketFactory socketfactory> = $r4;

        $r3 = <ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER>;

        $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier hostnameVerifier> = $r3;

        $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: ch.boye.httpclientandroidlib.conn.scheme.HostNameResolver nameResolver> = $r2;

        return;
    }

    public void <init>(javax.net.ssl.SSLContext, ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier)
    {
        ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory $r0;
        javax.net.ssl.SSLContext $r1;
        ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier $r2;
        java.lang.IllegalArgumentException $r3;
        javax.net.ssl.SSLSocketFactory $r4;

        $r0 := @this: ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;

        $r1 := @parameter0: javax.net.ssl.SSLContext;

        $r2 := @parameter1: ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("SSL context may not be null");

        throw $r3;

     label1:
        $r4 = virtualinvoke $r1.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

        $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLSocketFactory socketfactory> = $r4;

        $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier hostnameVerifier> = $r2;

        $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: ch.boye.httpclientandroidlib.conn.scheme.HostNameResolver nameResolver> = null;

        return;
    }

    public void <init>(javax.net.ssl.SSLSocketFactory, ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier)
    {
        ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory $r0;
        javax.net.ssl.SSLSocketFactory $r1;
        ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier $r2;
        java.lang.IllegalArgumentException $r3;

        $r0 := @this: ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;

        $r1 := @parameter0: javax.net.ssl.SSLSocketFactory;

        $r2 := @parameter1: ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("SSL socket factory may not be null");

        throw $r3;

     label1:
        $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLSocketFactory socketfactory> = $r1;

        $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier hostnameVerifier> = $r2;

        $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: ch.boye.httpclientandroidlib.conn.scheme.HostNameResolver nameResolver> = null;

        return;
    }

    private static javax.net.ssl.SSLContext createDefaultSSLContext() throws ch.boye.httpclientandroidlib.conn.ssl.SSLInitializationException
    {
        java.lang.Exception $r0;
        ch.boye.httpclientandroidlib.conn.ssl.SSLInitializationException $r1;
        javax.net.ssl.SSLContext $r2;

     label1:
        $r2 = staticinvoke <ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLContext createSSLContext(java.lang.String,java.security.KeyStore,java.lang.String,java.security.KeyStore,java.security.SecureRandom,ch.boye.httpclientandroidlib.conn.ssl.TrustStrategy)>("TLS", null, null, null, null, null);

     label2:
        return $r2;

     label3:
        $r0 := @caughtexception;

        $r1 = new ch.boye.httpclientandroidlib.conn.ssl.SSLInitializationException;

        specialinvoke $r1.<ch.boye.httpclientandroidlib.conn.ssl.SSLInitializationException: void <init>(java.lang.String,java.lang.Throwable)>("Failure initializing default SSL context", $r0);

        throw $r1;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private static javax.net.ssl.SSLContext createSSLContext(java.lang.String, java.security.KeyStore, java.lang.String, java.security.KeyStore, java.security.SecureRandom, ch.boye.httpclientandroidlib.conn.ssl.TrustStrategy) throws java.security.NoSuchAlgorithmException, java.security.KeyStoreException, java.security.UnrecoverableKeyException, java.security.KeyManagementException
    {
        java.security.KeyStore $r0, $r1;
        java.security.SecureRandom $r2;
        ch.boye.httpclientandroidlib.conn.ssl.TrustStrategy $r3;
        int $i0, $i1, $i1_1, $i1_2, $i1_3;
        javax.net.ssl.TrustManager $r4;
        boolean $z0;
        ch.boye.httpclientandroidlib.conn.ssl.TrustManagerDecorator $r5;
        java.lang.String $r6, $r7, $r8, $r6_1, $r6_2, $r7_1;
        javax.net.ssl.KeyManagerFactory $r9;
        char[] $r10, $r10_1, $r10_2;
        javax.net.ssl.KeyManager[] $r11;
        javax.net.ssl.TrustManagerFactory $r12;
        javax.net.ssl.TrustManager[] $r13;
        javax.net.ssl.X509TrustManager $r14;
        javax.net.ssl.SSLContext $r15;

        $r6 := @parameter0: java.lang.String;

        $r0 := @parameter1: java.security.KeyStore;

        $r7 := @parameter2: java.lang.String;

        $r1 := @parameter3: java.security.KeyStore;

        $r2 := @parameter4: java.security.SecureRandom;

        $r3 := @parameter5: ch.boye.httpclientandroidlib.conn.ssl.TrustStrategy;

(0)     if $r6 != null goto label1;

(1)     $r6_1 = "TLS";

     label1:
        $r6_2 = Phi($r6 #0, $r6_1 #1);

        $r8 = staticinvoke <javax.net.ssl.KeyManagerFactory: java.lang.String getDefaultAlgorithm()>();

        $r9 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>($r8);

        if $r7 == null goto label5;

(2)     $r10 = virtualinvoke $r7.<java.lang.String: char[] toCharArray()>();

     label2:
        $r10_1 = Phi($r10 #2, $r10_2 #8);

        virtualinvoke $r9.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>($r0, $r10_1);

        $r11 = virtualinvoke $r9.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>();

        $r7_1 = staticinvoke <javax.net.ssl.TrustManagerFactory: java.lang.String getDefaultAlgorithm()>();

        $r12 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r7_1);

        virtualinvoke $r12.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>($r1);

        $r13 = virtualinvoke $r12.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>();

(3)     if $r13 == null goto label6;

(4)     if $r3 == null goto label6;

(5)     $i1 = 0;

     label3:
        $i1_1 = Phi($i1 #5, $i1_2 #7);

        $i0 = lengthof $r13;

(6)     if $i1_1 >= $i0 goto label6;

        $r4 = $r13[$i1_1];

        $z0 = $r4 instanceof javax.net.ssl.X509TrustManager;

        if $z0 == 0 goto label4;

        $r5 = new ch.boye.httpclientandroidlib.conn.ssl.TrustManagerDecorator;

        $r14 = (javax.net.ssl.X509TrustManager) $r4;

        specialinvoke $r5.<ch.boye.httpclientandroidlib.conn.ssl.TrustManagerDecorator: void <init>(javax.net.ssl.X509TrustManager,ch.boye.httpclientandroidlib.conn.ssl.TrustStrategy)>($r14, $r3);

        $r13[$i1_1] = $r5;

     label4:
        $i1_2 = $i1_1 + 1;

(7)     goto label3;

     label5:
        $r10_2 = null;

(8)     goto label2;

     label6:
        $i1_3 = Phi($i1 #3, $i1 #4, $i1_1 #6);

        $r15 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>($r6_2);

        virtualinvoke $r15.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r11, $r13, $r2);

        return $r15;
    }

    private static javax.net.ssl.SSLContext createSystemSSLContext() throws ch.boye.httpclientandroidlib.conn.ssl.SSLInitializationException
    {
        java.lang.Exception $r0;
        ch.boye.httpclientandroidlib.conn.ssl.SSLInitializationException $r1;
        javax.net.ssl.SSLContext $r2;

     label1:
        $r2 = staticinvoke <ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLContext createSystemSSLContext(java.lang.String,java.security.SecureRandom)>("TLS", null);

     label2:
        return $r2;

     label3:
        $r0 := @caughtexception;

        $r1 = new ch.boye.httpclientandroidlib.conn.ssl.SSLInitializationException;

        specialinvoke $r1.<ch.boye.httpclientandroidlib.conn.ssl.SSLInitializationException: void <init>(java.lang.String,java.lang.Throwable)>("Failure initializing default system SSL context", $r0);

        throw $r1;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private static javax.net.ssl.SSLContext createSystemSSLContext(java.lang.String, java.security.SecureRandom) throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException, java.security.KeyStoreException, java.security.cert.CertificateException, java.security.UnrecoverableKeyException, java.security.KeyManagementException
    {
        java.security.SecureRandom $r0;
        java.lang.Throwable $r1, $r2, $r3;
        java.lang.String $r4, $r5, $r6, $r7, $r4_1, $r4_2, $r6_1, $r6_2, $r5_1, $r5_2, $r5_3, $r7_1, $r6_3, $r7_2, $r5_4, $r6_4, $r6_5, $r6_6, $r7_3, $r5_5, $r5_6, $r5_7, $r7_4, $r6_7, $r7_5, $r7_6, $r6_8, $r6_9, $r7_7, $r6_10, $r6_11, $r6_12, $r6_13, $r6_14, $r6_15;
        boolean $z0, $z0_1, $z0_2, $z0_3;
        javax.net.ssl.TrustManagerFactory $r8, $r14, $r8_1, $r14_1, $r8_2, $r14_2, $r8_3;
        javax.net.ssl.KeyManagerFactory $r9, $r19, $r9_1, $r9_2, $r9_3;
        javax.net.ssl.SSLContext $r10;
        javax.net.ssl.KeyManager[] $r11, $r11_1, $r11_2;
        javax.net.ssl.TrustManager[] $r12, $r12_1, $r12_2;
        java.io.File $r13, $r18, $r13_1, $r13_2, $r13_3, $r13_4, $r13_5, $r13_6, $r18_1, $r18_2, $r13_7, $r18_3, $r13_8, $r13_9;
        java.security.KeyStore $r15, $r15_1, $r15_2, $r15_3, $r15_4, $r15_5, $r15_6, $r15_7, $r15_8;
        java.io.FileInputStream $r16, $r16_1, $r16_2, $r16_3, $r16_4;
        char[] $r17, $r17_1, $r17_2, $r17_3, $r17_4, $r17_5, $r17_6, $r17_7, $r17_8, $r17_9, $r17_10, $r17_11, $r17_12, $r17_13, $r17_14, $r17_15, $r17_16;

        $r4 := @parameter0: java.lang.String;

        $r0 := @parameter1: java.security.SecureRandom;

(0)     if $r4 != null goto label01;

(1)     $r4_1 = "TLS";

     label01:
        $r4_2 = Phi($r4 #0, $r4_1 #1);

        $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("ssl.TrustManagerFactory.algorithm");

        $r6 = $r5;

(2)     if $r5 != null goto label02;

(3)     $r6_1 = staticinvoke <javax.net.ssl.TrustManagerFactory: java.lang.String getDefaultAlgorithm()>();

     label02:
        $r6_2 = Phi($r6 #2, $r6_1 #3);

        $r7 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("javax.net.ssl.trustStoreType");

        $r5_1 = $r7;

(4)     if $r7 != null goto label03;

(5)     $r5_2 = staticinvoke <java.security.KeyStore: java.lang.String getDefaultType()>();

     label03:
        $r5_3 = Phi($r5_1 #4, $r5_2 #5);

        $r7_1 = "none";

        $z0 = virtualinvoke $r7_1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r5_3);

        if $z0 == 0 goto label10;

(6)     $r8 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r6_2);

     label04:
        $r15 = Phi($r15 #6, $r15_6 #18, $r15_8 #26);

        $r17 = Phi($r17 #6, $r17_10 #18, $r17_14 #26);

        $r18 = Phi($r18 #6, $r18 #18, $r18_3 #26);

        $z0_1 = Phi($z0 #6, $z0 #18, $z0_3 #26);

        $r8_1 = Phi($r8 #6, $r8_2 #18, $r8_3 #26);

        $r6_3 = Phi($r6_2 #6, $r6_11 #18, $r6_15 #26);

        $r16 = Phi($r16 #6, $r16_3 #18, $r16_4 #26);

        $r14 = Phi($r14 #6, $r14_1 #18, $r14_2 #26);

        $r7_2 = Phi($r7_1 #6, $r7_7 #18, $r7_7 #26);

        $r13 = Phi($r13 #6, $r13_5 #18, $r13_8 #26);

        $r9 = null;

        $r5_4 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("ssl.KeyManagerFactory.algorithm");

        $r6_4 = $r5_4;

(7)     if $r5_4 != null goto label05;

(8)     $r6_5 = staticinvoke <javax.net.ssl.KeyManagerFactory: java.lang.String getDefaultAlgorithm()>();

     label05:
        $r6_6 = Phi($r6_4 #7, $r6_5 #8);

        $r7_3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("javax.net.ssl.keyStoreType");

        $r5_5 = $r7_3;

(9)     if $r7_3 != null goto label06;

(10)    $r5_6 = staticinvoke <java.security.KeyStore: java.lang.String getDefaultType()>();

     label06:
        $r5_7 = Phi($r5_5 #9, $r5_6 #10);

        $r7_4 = "none";

        $z0_2 = virtualinvoke $r7_4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r5_7);

        if $z0_2 == 0 goto label27;

(11)    $r9_1 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>($r6_6);

     label07:
        $r15_1 = Phi($r15 #11, $r15 #31, $r15_3 #37);

        $r17_1 = Phi($r17 #11, $r17 #31, $r17_5 #37);

        $r9_2 = Phi($r9_1 #11, $r9 #31, $r9_3 #37);

        $r6_7 = Phi($r6_6 #11, $r6_6 #31, $r6_9 #37);

        $r16_1 = Phi($r16 #11, $r16 #31, $r16_2 #37);

        $r7_5 = Phi($r7_4 #11, $r7_6 #31, $r7_6 #37);

        $r13_1 = Phi($r13 #11, $r13_4 #31, $r13_4 #37);

        $r10 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>($r4_2);

        if $r9_2 == null goto label39;

(12)    $r11 = virtualinvoke $r9_2.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>();

     label08:
        $r11_1 = Phi($r11 #12, $r11_2 #42);

        if $r8_1 == null goto label40;

(13)    $r12 = virtualinvoke $r8_1.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>();

     label09:
        $r12_1 = Phi($r12 #13, $r12_2 #43);

        virtualinvoke $r10.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r11_1, $r12_1, $r0);

        return $r10;

     label10:
        $r7_7 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("javax.net.ssl.trustStore");

        if $r7_7 == null goto label19;

        $r13_5 = new java.io.File;

        specialinvoke $r13_5.<java.io.File: void <init>(java.lang.String)>($r7_7);

        $r14_1 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r6_2);

        $r8_2 = $r14_1;

        $r6_10 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("javax.net.ssl.trustStoreProvider");

        if $r6_10 == null goto label15;

(14)    $r15_5 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.lang.String)>($r5_3, $r6_10);

     label11:
        $r15_6 = Phi($r15_5 #14, $r15_7 #19);

        $r6_11 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("javax.net.ssl.trustStorePassword");

        $r16_3 = new java.io.FileInputStream;

        specialinvoke $r16_3.<java.io.FileInputStream: void <init>(java.io.File)>($r13_5);

(15)    if $r6_11 == null goto label16;

     label12:
(16)    $r17_9 = virtualinvoke $r6_11.<java.lang.String: char[] toCharArray()>();

     label13:
        $r17_10 = Phi($r17_9 #16, $r17_11 #21);

(17)    virtualinvoke $r15_6.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r16_3, $r17_10);

     label14:
        virtualinvoke $r16_3.<java.io.FileInputStream: void close()>();

        virtualinvoke $r14_1.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>($r15_6);

(18)    goto label04;

     label15:
        $r15_7 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r5_3);

(19)    goto label11;

     label16:
(20)    $r17_11 = <ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: char[] EMPTY_PASSWORD>;

     label17:
(21)    goto label13;

     label18:
        $r1 := @caughtexception;

        $r17_12 = Phi($r17 #15, $r17_9 #16, $r17_10 #17, $r17_11 #20);

        virtualinvoke $r16_3.<java.io.FileInputStream: void close()>();

        throw $r1;

     label19:
        $r13_6 = new java.io.File;

        $r6_12 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.home");

        specialinvoke $r13_6.<java.io.File: void <init>(java.lang.String)>($r6_12);

        $r18_1 = new java.io.File;

        specialinvoke $r18_1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r13_6, "lib/security/jssecacerts");

        $z0_3 = virtualinvoke $r18_1.<java.io.File: boolean exists()>();

        if $z0_3 != 0 goto label24;

        $r18_2 = new java.io.File;

        specialinvoke $r18_2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r13_6, "lib/security/cacerts");

(22)    $r13_7 = $r18_2;

     label20:
        $r18_3 = Phi($r18_2 #22, $r18_1 #27);

        $r13_8 = Phi($r13_7 #22, $r13_9 #27);

        $r6_13 = staticinvoke <javax.net.ssl.TrustManagerFactory: java.lang.String getDefaultAlgorithm()>();

        $r14_2 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r6_13);

        $r8_3 = $r14_2;

        $r6_14 = staticinvoke <java.security.KeyStore: java.lang.String getDefaultType()>();

        $r15_8 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r6_14);

        $r6_15 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("javax.net.ssl.trustStorePassword");

        $r16_4 = new java.io.FileInputStream;

        specialinvoke $r16_4.<java.io.FileInputStream: void <init>(java.io.File)>($r13_8);

(23)    if $r6_15 == null goto label25;

     label21:
(24)    $r17_13 = virtualinvoke $r6_15.<java.lang.String: char[] toCharArray()>();

     label22:
        $r17_14 = Phi($r17_13 #24, $r17_15 #28);

(25)    virtualinvoke $r15_8.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r16_4, $r17_14);

     label23:
        virtualinvoke $r16_4.<java.io.FileInputStream: void close()>();

        virtualinvoke $r14_2.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>($r15_8);

(26)    goto label04;

     label24:
        $r13_9 = $r18_1;

(27)    goto label20;

     label25:
        $r17_15 = null;

(28)    goto label22;

     label26:
        $r2 := @caughtexception;

        $r17_16 = Phi($r17 #23, $r17_13 #24, $r17_15 #28, $r17_14 #25);

        virtualinvoke $r16_4.<java.io.FileInputStream: void close()>();

        throw $r2;

     label27:
        $r13_2 = null;

        $r7_6 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("javax.net.ssl.keyStore");

(29)    if $r7_6 == null goto label28;

        $r13_3 = new java.io.File;

(30)    specialinvoke $r13_3.<java.io.File: void <init>(java.lang.String)>($r7_6);

     label28:
        $r13_4 = Phi($r13_2 #29, $r13_3 #30);

(31)    if $r13_4 == null goto label07;

        $r19 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>($r6_6);

        $r9_3 = $r19;

        $r6_8 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("javax.net.ssl.keyStoreProvider");

        if $r6_8 == null goto label34;

(32)    $r15_2 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.lang.String)>($r5_7, $r6_8);

     label29:
        $r15_3 = Phi($r15_2 #32, $r15_4 #38);

        $r6_9 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("javax.net.ssl.keyStorePassword");

        $r16_2 = new java.io.FileInputStream;

        specialinvoke $r16_2.<java.io.FileInputStream: void <init>(java.io.File)>($r13_4);

(33)    if $r6_9 == null goto label35;

     label30:
(34)    $r17_2 = virtualinvoke $r6_9.<java.lang.String: char[] toCharArray()>();

     label31:
        $r17_3 = Phi($r17_2 #34, $r17_7 #40);

(35)    virtualinvoke $r15_3.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r16_2, $r17_3);

     label32:
        virtualinvoke $r16_2.<java.io.FileInputStream: void close()>();

        if $r6_9 == null goto label38;

(36)    $r17_4 = virtualinvoke $r6_9.<java.lang.String: char[] toCharArray()>();

     label33:
        $r17_5 = Phi($r17_4 #36, $r17_6 #41);

        virtualinvoke $r19.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>($r15_3, $r17_5);

(37)    goto label07;

     label34:
        $r15_4 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r5_7);

(38)    goto label29;

     label35:
(39)    $r17_7 = <ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: char[] EMPTY_PASSWORD>;

     label36:
(40)    goto label31;

     label37:
        $r3 := @caughtexception;

        $r17_8 = Phi($r17 #33, $r17_2 #34, $r17_3 #35, $r17_7 #39);

        virtualinvoke $r16_2.<java.io.FileInputStream: void close()>();

        throw $r3;

     label38:
        $r17_6 = <ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: char[] EMPTY_PASSWORD>;

(41)    goto label33;

     label39:
        $r11_2 = null;

(42)    goto label08;

     label40:
        $r12_2 = null;

(43)    goto label09;

        catch java.lang.Throwable from label12 to label13 with label18;
        catch java.lang.Throwable from label13 to label14 with label18;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label21 to label22 with label26;
        catch java.lang.Throwable from label22 to label23 with label26;
        catch java.lang.Throwable from label30 to label31 with label37;
        catch java.lang.Throwable from label31 to label32 with label37;
        catch java.lang.Throwable from label35 to label36 with label37;
    }

    public static ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory getSocketFactory() throws ch.boye.httpclientandroidlib.conn.ssl.SSLInitializationException
    {
        ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory $r0;
        javax.net.ssl.SSLContext $r1;

        $r0 = new ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;

        $r1 = staticinvoke <ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLContext createDefaultSSLContext()>();

        specialinvoke $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: void <init>(javax.net.ssl.SSLContext)>($r1);

        return $r0;
    }

    public static ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory getSystemSocketFactory() throws ch.boye.httpclientandroidlib.conn.ssl.SSLInitializationException
    {
        ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory $r0;
        javax.net.ssl.SSLContext $r1;

        $r0 = new ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;

        $r1 = staticinvoke <ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLContext createSystemSSLContext()>();

        specialinvoke $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: void <init>(javax.net.ssl.SSLContext)>($r1);

        return $r0;
    }

    public java.net.Socket connectSocket(java.net.Socket, java.lang.String, int, java.net.InetAddress, int, ch.boye.httpclientandroidlib.params.HttpParams) throws java.io.IOException, java.net.UnknownHostException, ch.boye.httpclientandroidlib.conn.ConnectTimeoutException
    {
        ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory $r0;
        java.lang.String $r1;
        int $i0, $i1, $i1_1, $i1_2, $i1_3;
        ch.boye.httpclientandroidlib.params.HttpParams $r2;
        ch.boye.httpclientandroidlib.conn.HttpInetSocketAddress $r3;
        ch.boye.httpclientandroidlib.HttpHost $r4;
        java.net.Socket $r5, $r5_1;
        java.net.InetAddress $r6, $r6_1, $r6_2, $r6_3;
        java.net.InetSocketAddress $r7, $r7_1, $r7_2;
        ch.boye.httpclientandroidlib.conn.scheme.HostNameResolver $r8, $r8_1, $r8_2;

        $r0 := @this: ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;

        $r5 := @parameter0: java.net.Socket;

        $r1 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $r6 := @parameter3: java.net.InetAddress;

        $i1 := @parameter4: int;

        $r2 := @parameter5: ch.boye.httpclientandroidlib.params.HttpParams;

        $r7 = null;

        if $r6 != null goto label1;

(0)     if $i1 <= 0 goto label3;

     label1:
(1)     if $i1 >= 0 goto label2;

(2)     $i1_1 = 0;

     label2:
        $i1_2 = Phi($i1 #1, $i1_1 #2);

        $r7_1 = new java.net.InetSocketAddress;

(3)     specialinvoke $r7_1.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r6, $i1_2);

     label3:
        $i1_3 = Phi($i1 #0, $i1_2 #3);

        $r7_2 = Phi($r7 #0, $r7_1 #3);

        $r8 = $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: ch.boye.httpclientandroidlib.conn.scheme.HostNameResolver nameResolver>;

        if $r8 == null goto label5;

        $r8_1 = $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: ch.boye.httpclientandroidlib.conn.scheme.HostNameResolver nameResolver>;

(4)     $r6_1 = interfaceinvoke $r8_1.<ch.boye.httpclientandroidlib.conn.scheme.HostNameResolver: java.net.InetAddress resolve(java.lang.String)>($r1);

     label4:
        $r8_2 = Phi($r8_1 #4, $r8 #5);

        $r6_2 = Phi($r6_1 #4, $r6_3 #5);

        $r3 = new ch.boye.httpclientandroidlib.conn.HttpInetSocketAddress;

        $r4 = new ch.boye.httpclientandroidlib.HttpHost;

        specialinvoke $r4.<ch.boye.httpclientandroidlib.HttpHost: void <init>(java.lang.String,int)>($r1, $i0);

        specialinvoke $r3.<ch.boye.httpclientandroidlib.conn.HttpInetSocketAddress: void <init>(ch.boye.httpclientandroidlib.HttpHost,java.net.InetAddress,int)>($r4, $r6_2, $i0);

        $r5_1 = virtualinvoke $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.net.InetSocketAddress,java.net.InetSocketAddress,ch.boye.httpclientandroidlib.params.HttpParams)>($r5, $r3, $r7_2, $r2);

        return $r5_1;

     label5:
        $r6_3 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>($r1);

(5)     goto label4;
    }

    public java.net.Socket connectSocket(java.net.Socket, java.net.InetSocketAddress, java.net.InetSocketAddress, ch.boye.httpclientandroidlib.params.HttpParams) throws java.io.IOException, java.net.UnknownHostException, ch.boye.httpclientandroidlib.conn.ConnectTimeoutException
    {
        ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory $r0;
        java.net.InetSocketAddress $r1, $r2;
        ch.boye.httpclientandroidlib.params.HttpParams $r3;
        java.net.SocketTimeoutException $r4;
        ch.boye.httpclientandroidlib.conn.ConnectTimeoutException $r5;
        java.io.IOException $r6;
        java.lang.Exception $r7;
        java.net.Socket $r8, $r8_1, $r8_2, $r8_3, $r8_4;
        java.lang.IllegalArgumentException $r9, $r9_1;
        boolean $z0, $z0_1, $z0_2, $z0_3;
        int $i0, $i1, $i0_1, $i0_2;
        ch.boye.httpclientandroidlib.conn.HttpInetSocketAddress $r10;
        ch.boye.httpclientandroidlib.HttpHost $r11;
        java.lang.String $r12, $r12_1, $r12_2, $r12_3;
        javax.net.ssl.SSLSocket $r13, $r17, $r13_1, $r13_2;
        ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier $r14, $r14_1;
        javax.net.ssl.SSLSocketFactory $r15, $r15_1, $r15_2, $r15_3;
        java.lang.StringBuilder $r16, $r16_1, $r16_2, $r16_3;

        $r0 := @this: ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;

        $r8 := @parameter0: java.net.Socket;

        $r1 := @parameter1: java.net.InetSocketAddress;

        $r2 := @parameter2: java.net.InetSocketAddress;

        $r3 := @parameter3: ch.boye.httpclientandroidlib.params.HttpParams;

        if $r1 != null goto label01;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Remote address may not be null");

        throw $r9;

     label01:
        if $r3 != null goto label02;

        $r9_1 = new java.lang.IllegalArgumentException;

        specialinvoke $r9_1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP parameters may not be null");

        throw $r9_1;

     label02:
(0)     if $r8 == null goto label11;

     label03:
        $r15 = Phi($r15 #0, $r15_3 #5);

        $r8_1 = Phi($r8 #0, $r8_4 #5);

(1)     if $r2 == null goto label04;

        $z0 = staticinvoke <ch.boye.httpclientandroidlib.params.HttpConnectionParams: boolean getSoReuseaddr(ch.boye.httpclientandroidlib.params.HttpParams)>($r3);

        virtualinvoke $r8_1.<java.net.Socket: void setReuseAddress(boolean)>($z0);

(2)     virtualinvoke $r8_1.<java.net.Socket: void bind(java.net.SocketAddress)>($r2);

     label04:
        $z0_1 = Phi($z0 #1, $z0 #2);

        $i0 = staticinvoke <ch.boye.httpclientandroidlib.params.HttpConnectionParams: int getConnectionTimeout(ch.boye.httpclientandroidlib.params.HttpParams)>($r3);

        $i1 = staticinvoke <ch.boye.httpclientandroidlib.params.HttpConnectionParams: int getSoTimeout(ch.boye.httpclientandroidlib.params.HttpParams)>($r3);

     label05:
        virtualinvoke $r8_1.<java.net.Socket: void setSoTimeout(int)>($i1);

        virtualinvoke $r8_1.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r1, $i0);

     label06:
        $z0_2 = $r1 instanceof ch.boye.httpclientandroidlib.conn.HttpInetSocketAddress;

        if $z0_2 == 0 goto label13;

        $r10 = (ch.boye.httpclientandroidlib.conn.HttpInetSocketAddress) $r1;

        $r11 = virtualinvoke $r10.<ch.boye.httpclientandroidlib.conn.HttpInetSocketAddress: ch.boye.httpclientandroidlib.HttpHost getHttpHost()>();

(3)     $r12 = virtualinvoke $r11.<ch.boye.httpclientandroidlib.HttpHost: java.lang.String getHostName()>();

     label07:
        $r12_1 = Phi($r12 #3, $r12_2 #6);

        $z0_3 = $r8_1 instanceof javax.net.ssl.SSLSocket;

        if $z0_3 == 0 goto label14;

(4)     $r13 = (javax.net.ssl.SSLSocket) $r8_1;

     label08:
        $r15_1 = Phi($r15 #4, $r15_2 #7);

        $r13_1 = Phi($r13 #4, $r13_2 #7);

        $r8_2 = Phi($r8_1 #4, $r8_3 #7);

        $i0_1 = Phi($i0 #4, $i0_2 #7);

        $r14 = $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier hostnameVerifier>;

        if $r14 == null goto label19;

        $r14_1 = $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier hostnameVerifier>;

     label09:
        interfaceinvoke $r14_1.<ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>($r12_1, $r13_1);

     label10:
        return $r13_1;

     label11:
        $r15_3 = $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLSocketFactory socketfactory>;

        $r8_4 = virtualinvoke $r15_3.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket()>();

(5)     goto label03;

     label12:
        $r4 := @caughtexception;

        $r5 = new ch.boye.httpclientandroidlib.conn.ConnectTimeoutException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r16_1 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Connect to ");

        $r16_2 = virtualinvoke $r16_1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r16_3 = virtualinvoke $r16_2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" timed out");

        $r12_3 = virtualinvoke $r16_3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<ch.boye.httpclientandroidlib.conn.ConnectTimeoutException: void <init>(java.lang.String)>($r12_3);

        throw $r5;

     label13:
        $r12_2 = virtualinvoke $r1.<java.net.InetSocketAddress: java.lang.String getHostName()>();

(6)     goto label07;

     label14:
        $i0_2 = virtualinvoke $r1.<java.net.InetSocketAddress: int getPort()>();

        $r15_2 = $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLSocketFactory socketfactory>;

        $r8_3 = virtualinvoke $r15_2.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>($r8_1, $r12_1, $i0_2, 1);

        $r17 = (javax.net.ssl.SSLSocket) $r8_3;

        $r13_2 = $r17;

        virtualinvoke $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: void prepareSocket(javax.net.ssl.SSLSocket)>($r17);

(7)     goto label08;

     label15:
        $r6 := @caughtexception;

     label16:
        virtualinvoke $r13_1.<javax.net.ssl.SSLSocket: void close()>();

     label17:
        throw $r6;

     label18:
        $r7 := @caughtexception;

        goto label17;

     label19:
        return $r13_1;

        catch java.net.SocketTimeoutException from label05 to label06 with label12;
        catch java.io.IOException from label09 to label10 with label15;
        catch java.lang.Exception from label16 to label17 with label18;
    }

    public java.net.Socket createLayeredSocket(java.net.Socket, java.lang.String, int, ch.boye.httpclientandroidlib.params.HttpParams) throws java.io.IOException, java.net.UnknownHostException
    {
        ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory $r0;
        java.lang.String $r1;
        int $i0;
        ch.boye.httpclientandroidlib.params.HttpParams $r2;
        javax.net.ssl.SSLSocketFactory $r3;
        java.net.Socket $r4, $r4_1;
        javax.net.ssl.SSLSocket $r5;
        ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier $r6, $r6_1, $r6_2;

        $r0 := @this: ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;

        $r4 := @parameter0: java.net.Socket;

        $r1 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $r2 := @parameter3: ch.boye.httpclientandroidlib.params.HttpParams;

        $r3 = $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLSocketFactory socketfactory>;

        $r4_1 = virtualinvoke $r3.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>($r4, $r1, $i0, 1);

        $r5 = (javax.net.ssl.SSLSocket) $r4_1;

        virtualinvoke $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: void prepareSocket(javax.net.ssl.SSLSocket)>($r5);

        $r6 = $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier hostnameVerifier>;

(0)     if $r6 == null goto label1;

        $r6_1 = $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier hostnameVerifier>;

(1)     interfaceinvoke $r6_1.<ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>($r1, $r5);

     label1:
        $r6_2 = Phi($r6 #0, $r6_1 #1);

        return $r5;
    }

    public java.net.Socket createLayeredSocket(java.net.Socket, java.lang.String, int, boolean) throws java.io.IOException, java.net.UnknownHostException
    {
        ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory $r0;
        java.lang.String $r1;
        int $i0;
        boolean $z0;
        javax.net.ssl.SSLSocketFactory $r2;
        java.net.Socket $r3, $r3_1;
        javax.net.ssl.SSLSocket $r4;
        ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier $r5, $r5_1, $r5_2;

        $r0 := @this: ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;

        $r3 := @parameter0: java.net.Socket;

        $r1 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $r2 = $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLSocketFactory socketfactory>;

        $r3_1 = virtualinvoke $r2.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>($r3, $r1, $i0, $z0);

        $r4 = (javax.net.ssl.SSLSocket) $r3_1;

        virtualinvoke $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: void prepareSocket(javax.net.ssl.SSLSocket)>($r4);

        $r5 = $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier hostnameVerifier>;

(0)     if $r5 == null goto label1;

        $r5_1 = $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier hostnameVerifier>;

(1)     interfaceinvoke $r5_1.<ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>($r1, $r4);

     label1:
        $r5_2 = Phi($r5 #0, $r5_1 #1);

        return $r4;
    }

    public java.net.Socket createSocket() throws java.io.IOException
    {
        ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory $r0;
        javax.net.ssl.SSLSocketFactory $r1;
        java.net.Socket $r2;
        javax.net.ssl.SSLSocket $r3;

        $r0 := @this: ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;

        $r1 = $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLSocketFactory socketfactory>;

        $r2 = virtualinvoke $r1.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket()>();

        $r3 = (javax.net.ssl.SSLSocket) $r2;

        virtualinvoke $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: void prepareSocket(javax.net.ssl.SSLSocket)>($r3);

        return $r3;
    }

    public java.net.Socket createSocket(ch.boye.httpclientandroidlib.params.HttpParams) throws java.io.IOException
    {
        ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory $r0;
        ch.boye.httpclientandroidlib.params.HttpParams $r1;
        javax.net.ssl.SSLSocketFactory $r2;
        java.net.Socket $r3;
        javax.net.ssl.SSLSocket $r4;

        $r0 := @this: ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;

        $r1 := @parameter0: ch.boye.httpclientandroidlib.params.HttpParams;

        $r2 = $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLSocketFactory socketfactory>;

        $r3 = virtualinvoke $r2.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket()>();

        $r4 = (javax.net.ssl.SSLSocket) $r3;

        virtualinvoke $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: void prepareSocket(javax.net.ssl.SSLSocket)>($r4);

        return $r4;
    }

    public java.net.Socket createSocket(java.net.Socket, java.lang.String, int, boolean) throws java.io.IOException, java.net.UnknownHostException
    {
        ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory $r0;
        java.lang.String $r1;
        int $i0;
        boolean $z0;
        java.net.Socket $r2, $r2_1;

        $r0 := @this: ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;

        $r2 := @parameter0: java.net.Socket;

        $r1 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $r2_1 = virtualinvoke $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,boolean)>($r2, $r1, $i0, $z0);

        return $r2_1;
    }

    public ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier getHostnameVerifier()
    {
        ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory $r0;
        ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier r1;

        $r0 := @this: ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;

        r1 = $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier hostnameVerifier>;

        return r1;
    }

    public boolean isSecure(java.net.Socket) throws java.lang.IllegalArgumentException
    {
        ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory $r0;
        java.net.Socket $r1;
        boolean $z0, $z0_1;
        java.lang.IllegalArgumentException $r2, $r2_1, $r2_2;

        $r0 := @this: ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;

        $r1 := @parameter0: java.net.Socket;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Socket may not be null");

        throw $r2;

     label1:
        $z0 = $r1 instanceof javax.net.ssl.SSLSocket;

        if $z0 != 0 goto label2;

        $r2_1 = new java.lang.IllegalArgumentException;

        specialinvoke $r2_1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Socket not created by this factory");

        throw $r2_1;

     label2:
        $z0_1 = virtualinvoke $r1.<java.net.Socket: boolean isClosed()>();

        if $z0_1 == 0 goto label3;

        $r2_2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2_2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Socket is closed");

        throw $r2_2;

     label3:
        return 1;
    }

    protected void prepareSocket(javax.net.ssl.SSLSocket) throws java.io.IOException
    {
        ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory $r0;
        javax.net.ssl.SSLSocket $r1;

        $r0 := @this: ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;

        $r1 := @parameter0: javax.net.ssl.SSLSocket;

        return;
    }

    public void setHostnameVerifier(ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier)
    {
        ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory $r0;
        ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier $r1;
        java.lang.IllegalArgumentException $r2;

        $r0 := @this: ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;

        $r1 := @parameter0: ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Hostname verifier may not be null");

        throw $r2;

     label1:
        $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier hostnameVerifier> = $r1;

        return;
    }
}
