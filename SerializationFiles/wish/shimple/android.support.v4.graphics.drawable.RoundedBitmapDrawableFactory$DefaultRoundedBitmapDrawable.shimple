class android.support.v4.graphics.drawable.RoundedBitmapDrawableFactory$DefaultRoundedBitmapDrawable extends android.support.v4.graphics.drawable.RoundedBitmapDrawable
{

    void <init>(android.content.res.Resources, android.graphics.Bitmap)
    {
        android.support.v4.graphics.drawable.RoundedBitmapDrawableFactory$DefaultRoundedBitmapDrawable $r0;
        android.content.res.Resources $r1;
        android.graphics.Bitmap $r2;

        $r0 := @this: android.support.v4.graphics.drawable.RoundedBitmapDrawableFactory$DefaultRoundedBitmapDrawable;

        $r1 := @parameter0: android.content.res.Resources;

        $r2 := @parameter1: android.graphics.Bitmap;

        specialinvoke $r0.<android.support.v4.graphics.drawable.RoundedBitmapDrawable: void <init>(android.content.res.Resources,android.graphics.Bitmap)>($r1, $r2);

        return;
    }

    void gravityCompatApply(int, int, int, android.graphics.Rect, android.graphics.Rect)
    {
        android.support.v4.graphics.drawable.RoundedBitmapDrawableFactory$DefaultRoundedBitmapDrawable $r0;
        int $i0, $i1, $i2;
        android.graphics.Rect $r1, $r2;

        $r0 := @this: android.support.v4.graphics.drawable.RoundedBitmapDrawableFactory$DefaultRoundedBitmapDrawable;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $r1 := @parameter3: android.graphics.Rect;

        $r2 := @parameter4: android.graphics.Rect;

        staticinvoke <android.support.v4.view.GravityCompat: void apply(int,int,int,android.graphics.Rect,android.graphics.Rect,int)>($i0, $i1, $i2, $r1, $r2, 0);

        return;
    }

    public boolean hasMipMap()
    {
        android.support.v4.graphics.drawable.RoundedBitmapDrawableFactory$DefaultRoundedBitmapDrawable $r0;
        boolean $z0;
        android.graphics.Bitmap $r1, $r1_1, $r1_2;

        $r0 := @this: android.support.v4.graphics.drawable.RoundedBitmapDrawableFactory$DefaultRoundedBitmapDrawable;

        $r1 = $r0.<android.support.v4.graphics.drawable.RoundedBitmapDrawable: android.graphics.Bitmap mBitmap>;

(0)     if $r1 == null goto label1;

        $r1_1 = $r0.<android.support.v4.graphics.drawable.RoundedBitmapDrawable: android.graphics.Bitmap mBitmap>;

        $z0 = staticinvoke <android.support.v4.graphics.BitmapCompat: boolean hasMipMap(android.graphics.Bitmap)>($r1_1);

(1)     if $z0 == 0 goto label1;

        return 1;

     label1:
        $r1_2 = Phi($r1 #0, $r1_1 #1);

        return 0;
    }

    public void setMipMap(boolean)
    {
        android.support.v4.graphics.drawable.RoundedBitmapDrawableFactory$DefaultRoundedBitmapDrawable $r0;
        boolean $z0;
        android.graphics.Bitmap $r1, $r1_1, $r1_2;

        $r0 := @this: android.support.v4.graphics.drawable.RoundedBitmapDrawableFactory$DefaultRoundedBitmapDrawable;

        $z0 := @parameter0: boolean;

        $r1 = $r0.<android.support.v4.graphics.drawable.RoundedBitmapDrawable: android.graphics.Bitmap mBitmap>;

(0)     if $r1 == null goto label1;

        $r1_1 = $r0.<android.support.v4.graphics.drawable.RoundedBitmapDrawable: android.graphics.Bitmap mBitmap>;

        staticinvoke <android.support.v4.graphics.BitmapCompat: void setHasMipMap(android.graphics.Bitmap,boolean)>($r1_1, $z0);

(1)     virtualinvoke $r0.<android.support.v4.graphics.drawable.RoundedBitmapDrawableFactory$DefaultRoundedBitmapDrawable: void invalidateSelf()>();

     label1:
        $r1_2 = Phi($r1 #0, $r1_1 #1);

        return;
    }
}
