public class io.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor extends java.util.concurrent.ThreadPoolExecutor
{
    private static final int CORE_POOL_SIZE;
    private static final int CPU_COUNT;
    private static final long KEEP_ALIVE;
    private static final int MAXIMUM_POOL_SIZE;

    static void <clinit>()
    {
        java.lang.Runtime $r0;
        int $i0, $i0_1, $i0_2, $i0_3, $i0_4, $i0_5;

        $r0 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $i0 = virtualinvoke $r0.<java.lang.Runtime: int availableProcessors()>();

        <io.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor: int CPU_COUNT> = $i0;

        $i0_1 = <io.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor: int CPU_COUNT>;

        $i0_2 = $i0_1 + 1;

        <io.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor: int CORE_POOL_SIZE> = $i0_2;

        $i0_3 = <io.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor: int CPU_COUNT>;

        $i0_4 = $i0_3 * 2;

        $i0_5 = $i0_4 + 1;

        <io.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor: int MAXIMUM_POOL_SIZE> = $i0_5;

        return;
    }

    void <init>(int, int, long, java.util.concurrent.TimeUnit, io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue, java.util.concurrent.ThreadFactory)
    {
        io.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor $r0;
        int $i0, $i1;
        long $l2;
        java.util.concurrent.TimeUnit $r1;
        io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue $r2;
        java.util.concurrent.ThreadFactory $r3;

        $r0 := @this: io.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $l2 := @parameter2: long;

        $r1 := @parameter3: java.util.concurrent.TimeUnit;

        $r2 := @parameter4: io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue;

        $r3 := @parameter5: java.util.concurrent.ThreadFactory;

        specialinvoke $r0.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)>($i0, $i1, $l2, $r1, $r2, $r3);

        virtualinvoke $r0.<io.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor: int prestartAllCoreThreads()>();

        return;
    }

    public static io.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor create()
    {
        int $i0, $i1;
        io.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor $r0;

        $i0 = <io.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor: int CORE_POOL_SIZE>;

        $i1 = <io.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor: int MAXIMUM_POOL_SIZE>;

        $r0 = staticinvoke <io.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor: io.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor create(int,int)>($i0, $i1);

        return $r0;
    }

    public static io.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor create(int)
    {
        int $i0;
        io.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor $r0;

        $i0 := @parameter0: int;

        $r0 = staticinvoke <io.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor: io.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor create(int,int)>($i0, $i0);

        return $r0;
    }

    public static io.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor create(int, int)
    {
        int $i0, $i1;
        io.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor $r0;
        java.util.concurrent.TimeUnit $r1;
        io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue $r2;
        io.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor$PriorityThreadFactory $r3;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 = new io.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $r2 = new io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue;

        specialinvoke $r2.<io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue: void <init>()>();

        $r3 = new io.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor$PriorityThreadFactory;

        specialinvoke $r3.<io.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor$PriorityThreadFactory: void <init>(int)>(10);

        specialinvoke $r0.<io.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue,java.util.concurrent.ThreadFactory)>($i0, $i1, 1L, $r1, $r2, $r3);

        return $r0;
    }

    protected void afterExecute(java.lang.Runnable, java.lang.Throwable)
    {
        io.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor $r0;
        java.lang.Runnable $r1;
        java.lang.Throwable $r2;
        io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue $r3;
        io.fabric.sdk.android.services.concurrency.Task $r4;

        $r0 := @this: io.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor;

        $r1 := @parameter0: java.lang.Runnable;

        $r2 := @parameter1: java.lang.Throwable;

        $r4 = (io.fabric.sdk.android.services.concurrency.Task) $r1;

        interfaceinvoke $r4.<io.fabric.sdk.android.services.concurrency.Task: void setFinished(boolean)>(1);

        interfaceinvoke $r4.<io.fabric.sdk.android.services.concurrency.Task: void setError(java.lang.Throwable)>($r2);

        $r3 = virtualinvoke $r0.<io.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor: io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue getQueue()>();

        virtualinvoke $r3.<io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue: void recycleBlockedQueue()>();

        specialinvoke $r0.<java.util.concurrent.ThreadPoolExecutor: void afterExecute(java.lang.Runnable,java.lang.Throwable)>($r1, $r2);

        return;
    }

    public void execute(java.lang.Runnable)
    {
        io.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor $r0;
        java.lang.Runnable $r1;
        boolean $z0;
        java.util.concurrent.RunnableFuture $r2;

        $r0 := @this: io.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor;

        $r1 := @parameter0: java.lang.Runnable;

        $z0 = staticinvoke <io.fabric.sdk.android.services.concurrency.PriorityTask: boolean isProperDelegate(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        specialinvoke $r0.<java.util.concurrent.ThreadPoolExecutor: void execute(java.lang.Runnable)>($r1);

        return;

     label1:
        $r2 = virtualinvoke $r0.<io.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor: java.util.concurrent.RunnableFuture newTaskFor(java.lang.Runnable,java.lang.Object)>($r1, null);

        specialinvoke $r0.<java.util.concurrent.ThreadPoolExecutor: void execute(java.lang.Runnable)>($r2);

        return;
    }

    public io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue getQueue()
    {
        io.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor $r0;
        java.util.concurrent.BlockingQueue $r1;
        io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue $r2;

        $r0 := @this: io.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor;

        $r1 = specialinvoke $r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue getQueue()>();

        $r2 = (io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue) $r1;

        return $r2;
    }

    public volatile java.util.concurrent.BlockingQueue getQueue()
    {
        io.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor $r0;
        io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue $r1;

        $r0 := @this: io.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor;

        $r1 = virtualinvoke $r0.<io.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor: io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue getQueue()>();

        return $r1;
    }

    protected java.util.concurrent.RunnableFuture newTaskFor(java.lang.Runnable, java.lang.Object)
    {
        io.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor $r0;
        java.lang.Runnable $r1;
        java.lang.Object $r2;
        io.fabric.sdk.android.services.concurrency.PriorityFutureTask $r3;

        $r0 := @this: io.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor;

        $r1 := @parameter0: java.lang.Runnable;

        $r2 := @parameter1: java.lang.Object;

        $r3 = new io.fabric.sdk.android.services.concurrency.PriorityFutureTask;

        specialinvoke $r3.<io.fabric.sdk.android.services.concurrency.PriorityFutureTask: void <init>(java.lang.Runnable,java.lang.Object)>($r1, $r2);

        return $r3;
    }

    protected java.util.concurrent.RunnableFuture newTaskFor(java.util.concurrent.Callable)
    {
        io.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor $r0;
        java.util.concurrent.Callable $r1;
        io.fabric.sdk.android.services.concurrency.PriorityFutureTask $r2;

        $r0 := @this: io.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor;

        $r1 := @parameter0: java.util.concurrent.Callable;

        $r2 = new io.fabric.sdk.android.services.concurrency.PriorityFutureTask;

        specialinvoke $r2.<io.fabric.sdk.android.services.concurrency.PriorityFutureTask: void <init>(java.util.concurrent.Callable)>($r1);

        return $r2;
    }
}
