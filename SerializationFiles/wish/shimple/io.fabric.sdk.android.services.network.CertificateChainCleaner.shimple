final class io.fabric.sdk.android.services.network.CertificateChainCleaner extends java.lang.Object
{

    private void <init>()
    {
        io.fabric.sdk.android.services.network.CertificateChainCleaner $r0;

        $r0 := @this: io.fabric.sdk.android.services.network.CertificateChainCleaner;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.security.cert.X509Certificate[] getCleanChain(java.security.cert.X509Certificate[], io.fabric.sdk.android.services.network.SystemKeyStore) throws java.security.cert.CertificateException
    {
        io.fabric.sdk.android.services.network.SystemKeyStore $r0;
        java.util.LinkedList $r1;
        java.security.cert.X509Certificate $r2, $r5, $r2_1, $r2_2, $r2_3, $r2_4, $r2_5, $r2_6, $r2_7, $r2_8;
        java.security.cert.CertificateException $r3;
        java.security.cert.X509Certificate[] $r4, $r4_1, $r4_2;
        boolean $z0, $z1, $z0_1, $z0_2, $z0_3, $z1_1, $z1_2, $z0_4, $z0_5, $z1_3, $z0_6, $z1_4, $z0_7, $z0_8;
        int $i0, $i1, $i0_1, $i1_1, $i1_2, $i0_2, $i1_3, $i0_3, $i0_4;
        java.lang.Object[] $r6;

        $r4 := @parameter0: java.security.cert.X509Certificate[];

        $r0 := @parameter1: io.fabric.sdk.android.services.network.SystemKeyStore;

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        $z0 = 0;

        $r2 = $r4[0];

        $z1 = virtualinvoke $r0.<io.fabric.sdk.android.services.network.SystemKeyStore: boolean isTrustRoot(java.security.cert.X509Certificate)>($r2);

(0)     if $z1 == 0 goto label1;

(1)     $z0_1 = 1;

     label1:
        $z0_2 = Phi($z0 #0, $z0_1 #1);

        $r2_1 = $r4[0];

        virtualinvoke $r1.<java.util.LinkedList: boolean add(java.lang.Object)>($r2_1);

(2)     $i0 = 1;

     label2:
        $z0_3 = Phi($z0_2 #2, $z0_5 #7);

        $i0_1 = Phi($i0 #2, $i0_2 #7);

        $z1_1 = Phi($z1 #2, $z1_3 #7);

        $r2_2 = Phi($r2_1 #2, $r2_5 #7);

        $i1 = Phi($i1 #2, $i1_2 #7);

        $i1_1 = lengthof $r4;

(3)     if $i0_1 >= $i1_1 goto label4;

        $r2_3 = $r4[$i0_1];

        $z1_2 = virtualinvoke $r0.<io.fabric.sdk.android.services.network.SystemKeyStore: boolean isTrustRoot(java.security.cert.X509Certificate)>($r2_3);

(4)     if $z1_2 == 0 goto label3;

(5)     $z0_4 = 1;

     label3:
        $z0_5 = Phi($z0_3 #4, $z0_4 #5);

        $r5 = $r4[$i0_1];

        $i1_2 = $i0_1 + -1;

        $r2_4 = $r4[$i1_2];

        $z1_3 = staticinvoke <io.fabric.sdk.android.services.network.CertificateChainCleaner: boolean isValidLink(java.security.cert.X509Certificate,java.security.cert.X509Certificate)>($r5, $r2_4);

(6)     if $z1_3 == 0 goto label4;

        $r2_5 = $r4[$i0_1];

        virtualinvoke $r1.<java.util.LinkedList: boolean add(java.lang.Object)>($r2_5);

        $i0_2 = $i0_1 + 1;

(7)     goto label2;

     label4:
        $z0_6 = Phi($z0_3 #3, $z0_5 #6);

        $z1_4 = Phi($z1_1 #3, $z1_3 #6);

        $r2_6 = Phi($r2_2 #3, $r2_4 #6);

        $i1_3 = Phi($i1_1 #3, $i1_2 #6);

        $i0_3 = $i0_1 + -1;

        $r2_7 = $r4[$i0_3];

        $r2_8 = virtualinvoke $r0.<io.fabric.sdk.android.services.network.SystemKeyStore: java.security.cert.X509Certificate getTrustRootFor(java.security.cert.X509Certificate)>($r2_7);

(8)     if $r2_8 == null goto label5;

        virtualinvoke $r1.<java.util.LinkedList: boolean add(java.lang.Object)>($r2_8);

(9)     $z0_7 = 1;

     label5:
        $z0_8 = Phi($z0_6 #8, $z0_7 #9);

        if $z0_8 == 0 goto label6;

        $i0_4 = virtualinvoke $r1.<java.util.LinkedList: int size()>();

        $r4_1 = newarray (java.security.cert.X509Certificate)[$i0_4];

        $r6 = virtualinvoke $r1.<java.util.LinkedList: java.lang.Object[] toArray(java.lang.Object[])>($r4_1);

        $r4_2 = (java.security.cert.X509Certificate[]) $r6;

        return $r4_2;

     label6:
        $r3 = new java.security.cert.CertificateException;

        specialinvoke $r3.<java.security.cert.CertificateException: void <init>(java.lang.String)>("Didn\'t find a trust anchor in chain cleanup!");

        throw $r3;
    }

    private static boolean isValidLink(java.security.cert.X509Certificate, java.security.cert.X509Certificate)
    {
        java.security.cert.X509Certificate $r0, $r1;
        java.security.GeneralSecurityException $r2;
        javax.security.auth.x500.X500Principal $r3, $r4;
        boolean $z0;
        java.security.PublicKey $r5;

        $r0 := @parameter0: java.security.cert.X509Certificate;

        $r1 := @parameter1: java.security.cert.X509Certificate;

        $r3 = virtualinvoke $r0.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()>();

        $r4 = virtualinvoke $r1.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getIssuerX500Principal()>();

        $z0 = virtualinvoke $r3.<javax.security.auth.x500.X500Principal: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r5 = virtualinvoke $r0.<java.security.cert.X509Certificate: java.security.PublicKey getPublicKey()>();

        virtualinvoke $r1.<java.security.cert.X509Certificate: void verify(java.security.PublicKey)>($r5);

     label2:
        return 1;

     label3:
        $r2 := @caughtexception;

        return 0;

        catch java.security.GeneralSecurityException from label1 to label2 with label3;
    }
}
