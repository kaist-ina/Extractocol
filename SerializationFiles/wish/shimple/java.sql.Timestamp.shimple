public class java.sql.Timestamp extends java.util.Date
{

    public void <init>(int, int, int, int, int, int, int) throws java.lang.IllegalArgumentException
    {
        java.sql.Timestamp r0;
        int i0, i1, i2, i3, i4, i5, i6;
        java.lang.RuntimeException $r1;

        r0 := @this: java.sql.Timestamp;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        i6 := @parameter6: int;

        specialinvoke r0.<java.util.Date: void <init>()>();

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public void <init>(long)
    {
        java.sql.Timestamp r0;
        long l0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.sql.Timestamp;

        l0 := @parameter0: long;

        specialinvoke r0.<java.util.Date: void <init>()>();

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public boolean after(java.sql.Timestamp)
    {
        java.sql.Timestamp r0, r1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.sql.Timestamp;

        r1 := @parameter0: java.sql.Timestamp;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public boolean before(java.sql.Timestamp)
    {
        java.sql.Timestamp r0, r1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.sql.Timestamp;

        r1 := @parameter0: java.sql.Timestamp;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public int compareTo(java.util.Date) throws java.lang.ClassCastException
    {
        java.sql.Timestamp r0;
        java.util.Date r1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.sql.Timestamp;

        r1 := @parameter0: java.util.Date;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public int compareTo(java.sql.Timestamp)
    {
        java.sql.Timestamp r0, r1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.sql.Timestamp;

        r1 := @parameter0: java.sql.Timestamp;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public boolean equals(java.lang.Object)
    {
        java.sql.Timestamp r0;
        java.lang.Object r1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.sql.Timestamp;

        r1 := @parameter0: java.lang.Object;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public boolean equals(java.sql.Timestamp)
    {
        java.sql.Timestamp r0, r1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.sql.Timestamp;

        r1 := @parameter0: java.sql.Timestamp;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public int getNanos()
    {
        java.sql.Timestamp r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.sql.Timestamp;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public long getTime()
    {
        java.sql.Timestamp r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.sql.Timestamp;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public void setNanos(int) throws java.lang.IllegalArgumentException
    {
        java.sql.Timestamp r0;
        int i0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.sql.Timestamp;

        i0 := @parameter0: int;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public void setTime(long)
    {
        java.sql.Timestamp r0;
        long l0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.sql.Timestamp;

        l0 := @parameter0: long;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public java.lang.String toString()
    {
        java.sql.Timestamp r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.sql.Timestamp;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public static java.sql.Timestamp valueOf(java.lang.String) throws java.lang.IllegalArgumentException
    {
        java.lang.String r0;
        java.lang.RuntimeException $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public volatile int compareTo(java.lang.Object)
    {
        java.sql.Timestamp r0;
        java.lang.Object r1;
        java.util.Date $r2;
        int $i0;

        r0 := @this: java.sql.Timestamp;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.util.Date) r1;

        $i0 = virtualinvoke r0.<java.sql.Timestamp: int compareTo(java.util.Date)>($r2);

        return $i0;
    }
}
