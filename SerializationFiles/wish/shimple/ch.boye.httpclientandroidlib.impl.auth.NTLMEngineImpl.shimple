final class ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl extends java.lang.Object implements ch.boye.httpclientandroidlib.impl.auth.NTLMEngine
{
    static final java.lang.String DEFAULT_CHARSET;
    protected static final int FLAG_NEGOTIATE_128;
    protected static final int FLAG_NEGOTIATE_ALWAYS_SIGN;
    protected static final int FLAG_NEGOTIATE_KEY_EXCH;
    protected static final int FLAG_NEGOTIATE_NTLM;
    protected static final int FLAG_NEGOTIATE_NTLM2;
    protected static final int FLAG_NEGOTIATE_SEAL;
    protected static final int FLAG_NEGOTIATE_SIGN;
    protected static final int FLAG_TARGET_DESIRED;
    protected static final int FLAG_UNICODE_ENCODING;
    private static final java.security.SecureRandom RND_GEN;
    private static byte[] SIGNATURE;
    private java.lang.String credentialCharset;

    static void <clinit>()
    {
        java.lang.Exception $r0;
        java.security.SecureRandom $r1, $r1_1, $r1_2, $r1_3;
        byte[] $r2, $r3, $r3_1, $r3_2;
        int $i0, $i0_1, $i0_2, $i0_3;

(0)     $r1 = null;

     label1:
(1)     $r1_1 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>("SHA1PRNG");

     label2:
        $r1_2 = Phi($r1_1 #1, $r1_3 #2);

        <ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl: java.security.SecureRandom RND_GEN> = $r1_2;

        $r2 = staticinvoke <ch.boye.httpclientandroidlib.util.EncodingUtils: byte[] getBytes(java.lang.String,java.lang.String)>("NTLMSSP", "ASCII");

        $i0 = lengthof $r2;

        $i0_1 = $i0 + 1;

        $r3 = newarray (byte)[$i0_1];

        <ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl: byte[] SIGNATURE> = $r3;

        $r3_1 = <ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl: byte[] SIGNATURE>;

        $i0_2 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r3_1, 0, $i0_2);

        $r3_2 = <ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl: byte[] SIGNATURE>;

        $i0_3 = lengthof $r2;

        $r3_2[$i0_3] = 0;

        return;

     label3:
        $r0 := @caughtexception;

        $r1_3 = Phi($r1 #0, $r1_1 #1);

(2)     goto label2;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    void <init>()
    {
        ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl $r0;

        $r0 := @this: ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl: java.lang.String credentialCharset> = "ASCII";

        return;
    }

    static int F(int, int, int)
    {
        int $i0, $i1, $i2, $i2_1, $i1_1, $i1_2, $i1_3;

        $i1 := @parameter0: int;

        $i2 := @parameter1: int;

        $i0 := @parameter2: int;

        $i2_1 = $i1 & $i2;

        $i1_1 = $i1 ^ -1;

        $i1_2 = $i1_1 & $i0;

        $i1_3 = $i2_1 | $i1_2;

        return $i1_3;
    }

    static int G(int, int, int)
    {
        int $i0, $i1, $i2, $i3, $i2_1, $i2_2, $i3_1, $i2_3;

        $i2 := @parameter0: int;

        $i3 := @parameter1: int;

        $i0 := @parameter2: int;

        $i1 = $i2 & $i3;

        $i2_1 = $i2 & $i0;

        $i2_2 = $i1 | $i2_1;

        $i3_1 = $i3 & $i0;

        $i2_3 = $i2_2 | $i3_1;

        return $i2_3;
    }

    static int H(int, int, int)
    {
        int $i0, $i1, $i2, $i2_1, $i2_2;

        $i2 := @parameter0: int;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2_1 = $i2 ^ $i0;

        $i2_2 = $i2_1 ^ $i1;

        return $i2_2;
    }

    static byte[] access$000()
    {
        byte[] r0;

        r0 = <ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl: byte[] SIGNATURE>;

        return r0;
    }

    static int access$100(byte[], int) throws ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException
    {
        byte[] $r0;
        int $i0, $i0_1;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i0_1 = staticinvoke <ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl: int readUShort(byte[],int)>($r0, $i0);

        return $i0_1;
    }

    static int access$200(byte[], int) throws ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException
    {
        byte[] $r0;
        int $i0, $i0_1;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i0_1 = staticinvoke <ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl: int readULong(byte[],int)>($r0, $i0);

        return $i0_1;
    }

    static byte[] access$300(byte[], int) throws ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException
    {
        int $i0;
        byte[] $r0, $r0_1;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r0_1 = staticinvoke <ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl: byte[] readSecurityBuffer(byte[],int)>($r0, $i0);

        return $r0_1;
    }

    static java.lang.String access$400(java.lang.String)
    {
        java.lang.String $r0, $r0_1;

        $r0 := @parameter0: java.lang.String;

        $r0_1 = staticinvoke <ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl: java.lang.String convertHost(java.lang.String)>($r0);

        return $r0_1;
    }

    static java.lang.String access$500(java.lang.String)
    {
        java.lang.String $r0, $r0_1;

        $r0 := @parameter0: java.lang.String;

        $r0_1 = staticinvoke <ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl: java.lang.String convertDomain(java.lang.String)>($r0);

        return $r0_1;
    }

    static byte[] access$600() throws ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException
    {
        byte[] $r0;

        $r0 = staticinvoke <ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl: byte[] makeRandomChallenge()>();

        return $r0;
    }

    static byte[] access$700() throws ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException
    {
        byte[] $r0;

        $r0 = staticinvoke <ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl: byte[] makeNTLM2RandomChallenge()>();

        return $r0;
    }

    private static java.lang.String convertDomain(java.lang.String)
    {
        java.lang.String $r0, $r0_1;

        $r0 := @parameter0: java.lang.String;

        $r0_1 = staticinvoke <ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl: java.lang.String stripDotSuffix(java.lang.String)>($r0);

        return $r0_1;
    }

    private static java.lang.String convertHost(java.lang.String)
    {
        java.lang.String $r0, $r0_1;

        $r0 := @parameter0: java.lang.String;

        $r0_1 = staticinvoke <ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl: java.lang.String stripDotSuffix(java.lang.String)>($r0);

        return $r0_1;
    }

    private static byte[] createBlob(byte[], byte[])
    {
        byte[] $r0, $r1, $r2, $r3, $r4, $r5, $r6;
        byte $b0;
        long $l1, $l1_1, $l1_2, $l1_3, $l1_4;
        int $i2, $i3, $i2_1, $i3_1, $i2_2, $i2_3, $i3_2, $i2_4, $i3_3, $i2_5, $i2_6, $i3_4, $i2_7, $i3_5, $i2_8, $i2_9, $i2_10, $i3_6, $i3_7, $i2_11, $i3_8, $i3_9, $i2_12, $i2_13, $i3_10, $i3_11, $i2_14, $i3_12;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $r2 = newarray (byte)[4];

        $r2[0] = 1;

        $r2[1] = 1;

        $r2[2] = 0;

        $r2[3] = 0;

        $r3 = newarray (byte)[4];

        $r3[0] = 0;

        $r3[1] = 0;

        $r3[2] = 0;

        $r3[3] = 0;

        $r4 = newarray (byte)[4];

        $r4[0] = 0;

        $r4[1] = 0;

        $r4[2] = 0;

        $r4[3] = 0;

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l1_1 = $l1 + 11644473600000L;

        $l1_2 = $l1_1 * 10000L;

        $r5 = newarray (byte)[8];

(0)     $i2 = 0;

     label1:
        $i3 = Phi($i3 #0, $i3_1 #1);

        $i2_1 = Phi($i2 #0, $i2_2 #1);

        $l1_3 = Phi($l1_2 #0, $l1_4 #1);

        if $i2_1 >= 8 goto label2;

        $i3_1 = (int) $l1_3;

        $b0 = (byte) $i3_1;

        $r5[$i2_1] = $b0;

        $l1_4 = $l1_3 >>> 8;

        $i2_2 = $i2_1 + 1;

(1)     goto label1;

     label2:
        $i2_3 = lengthof $r2;

        $i3_2 = lengthof $r3;

        $i2_4 = $i2_3 + $i3_2;

        $i3_3 = lengthof $r5;

        $i2_5 = $i2_4 + $i3_3;

        $i2_6 = $i2_5 + 8;

        $i3_4 = lengthof $r4;

        $i2_7 = $i2_6 + $i3_4;

        $i3_5 = lengthof $r1;

        $i2_8 = $i2_7 + $i3_5;

        $r6 = newarray (byte)[$i2_8];

        $i2_9 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r6, 0, $i2_9);

        $i2_10 = lengthof $r2;

        $i3_6 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r6, $i2_10, $i3_6);

        $i3_7 = lengthof $r3;

        $i2_11 = $i2_10 + $i3_7;

        $i3_8 = lengthof $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r6, $i2_11, $i3_8);

        $i3_9 = lengthof $r5;

        $i2_12 = $i2_11 + $i3_9;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, $r6, $i2_12, 8);

        $i2_13 = $i2_12 + 8;

        $i3_10 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r6, $i2_13, $i3_10);

        $i3_11 = lengthof $r4;

        $i2_14 = $i2_13 + $i3_11;

        $i3_12 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r6, $i2_14, $i3_12);

        return $r6;
    }

    private static java.security.Key createDESKey(byte[], int)
    {
        byte[] $r0, $r2, $r2_1;
        short $s0, $s0_1, $s0_2, $s0_3, $s0_4, $s0_5, $s0_6, $s0_7, $s0_8, $s0_9, $s0_10, $s0_11;
        javax.crypto.spec.SecretKeySpec $r1;
        int $i1, $i1_1, $i1_2, $i1_3, $i1_4, $i1_5, $i1_6, $i1_7, $i1_8, $i1_9, $i1_10, $i1_11, $i1_12, $i1_13;
        byte $b2, $b2_1, $b2_2, $b2_3, $b2_4, $b2_5, $b2_6, $b2_7, $b2_8, $b2_9, $b2_10, $b2_11, $b2_12, $b2_13, $b2_14, $b2_15, $b2_16, $b2_17, $b2_18, $b2_19, $b2_20;

        $r2 := @parameter0: byte[];

        $i1 := @parameter1: int;

        $r0 = newarray (byte)[7];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i1, $r0, 0, 7);

        $r2_1 = newarray (byte)[8];

        $b2 = $r0[0];

        $r2_1[0] = $b2;

        $b2_1 = $r0[0];

        $i1_1 = $b2_1 << 7;

        $b2_2 = $r0[1];

        $s0 = $b2_2 & 255;

        $s0_1 = $s0 >>> 1;

        $i1_2 = $i1_1 | $s0_1;

        $b2_3 = (byte) $i1_2;

        $r2_1[1] = $b2_3;

        $b2_4 = $r0[1];

        $i1_3 = $b2_4 << 6;

        $b2_5 = $r0[2];

        $s0_2 = $b2_5 & 255;

        $s0_3 = $s0_2 >>> 2;

        $i1_4 = $i1_3 | $s0_3;

        $b2_6 = (byte) $i1_4;

        $r2_1[2] = $b2_6;

        $b2_7 = $r0[2];

        $i1_5 = $b2_7 << 5;

        $b2_8 = $r0[3];

        $s0_4 = $b2_8 & 255;

        $s0_5 = $s0_4 >>> 3;

        $i1_6 = $i1_5 | $s0_5;

        $b2_9 = (byte) $i1_6;

        $r2_1[3] = $b2_9;

        $b2_10 = $r0[3];

        $i1_7 = $b2_10 << 4;

        $b2_11 = $r0[4];

        $s0_6 = $b2_11 & 255;

        $s0_7 = $s0_6 >>> 4;

        $i1_8 = $i1_7 | $s0_7;

        $b2_12 = (byte) $i1_8;

        $r2_1[4] = $b2_12;

        $b2_13 = $r0[4];

        $i1_9 = $b2_13 << 3;

        $b2_14 = $r0[5];

        $s0_8 = $b2_14 & 255;

        $s0_9 = $s0_8 >>> 5;

        $i1_10 = $i1_9 | $s0_9;

        $b2_15 = (byte) $i1_10;

        $r2_1[5] = $b2_15;

        $b2_16 = $r0[5];

        $i1_11 = $b2_16 << 2;

        $b2_17 = $r0[6];

        $s0_10 = $b2_17 & 255;

        $s0_11 = $s0_10 >>> 6;

        $i1_12 = $i1_11 | $s0_11;

        $b2_18 = (byte) $i1_12;

        $r2_1[6] = $b2_18;

        $b2_19 = $r0[6];

        $i1_13 = $b2_19 << 1;

        $b2_20 = (byte) $i1_13;

        $r2_1[7] = $b2_20;

        staticinvoke <ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl: void oddParity(byte[])>($r2_1);

        $r1 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2_1, "DES");

        return $r1;
    }

    static byte[] getLMResponse(java.lang.String, byte[]) throws ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException
    {
        java.lang.String $r0;
        byte[] $r1, $r2, $r1_1;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: byte[];

        $r2 = staticinvoke <ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl: byte[] lmHash(java.lang.String)>($r0);

        $r1_1 = staticinvoke <ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl: byte[] lmResponse(byte[],byte[])>($r2, $r1);

        return $r1_1;
    }

    static byte[] getLMv2Response(java.lang.String, java.lang.String, java.lang.String, byte[], byte[]) throws ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException
    {
        java.lang.String $r0, $r1, $r2;
        byte[] $r3, $r4, $r5, $r4_1;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r4 := @parameter3: byte[];

        $r3 := @parameter4: byte[];

        $r5 = staticinvoke <ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl: byte[] ntlmv2Hash(java.lang.String,java.lang.String,java.lang.String)>($r0, $r1, $r2);

        $r4_1 = staticinvoke <ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl: byte[] lmv2Response(byte[],byte[],byte[])>($r5, $r4, $r3);

        return $r4_1;
    }

    static byte[] getNTLM2SessionResponse(java.lang.String, byte[], byte[]) throws ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException
    {
        java.lang.Exception $r0;
        boolean $z0;
        java.lang.String $r1, $r1_1;
        byte[] $r2, $r3, $r4, $r2_1, $r3_1, $r2_2, $r3_2, $r2_3;
        java.security.MessageDigest $r5;
        ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException $r6, $r6_1;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: byte[];

(0)     $r3 := @parameter2: byte[];

     label1:
        $r4 = staticinvoke <ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl: byte[] ntlmHash(java.lang.String)>($r1);

        $r5 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("MD5");

        virtualinvoke $r5.<java.security.MessageDigest: void update(byte[])>($r2);

        virtualinvoke $r5.<java.security.MessageDigest: void update(byte[])>($r3);

(1)     $r2_1 = virtualinvoke $r5.<java.security.MessageDigest: byte[] digest()>();

(2)     $r3_1 = newarray (byte)[8];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2_1, 0, $r3_1, 0, 8);

(3)     $r2_2 = staticinvoke <ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl: byte[] lmResponse(byte[],byte[])>($r4, $r3_1);

     label2:
        return $r2_2;

     label3:
        $r0 := @caughtexception;

        $r3_2 = Phi($r3 #0, $r3_1 #2);

        $r2_3 = Phi($r2 #0, $r2_1 #1, $r2_2 #3);

        $z0 = $r0 instanceof ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException;

        if $z0 == 0 goto label4;

        $r6 = (ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException) $r0;

        throw $r6;

     label4:
        $r6_1 = new ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException;

        $r1_1 = virtualinvoke $r0.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r6_1.<ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException: void <init>(java.lang.String,java.lang.Throwable)>($r1_1, $r0);

        throw $r6_1;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    static byte[] getNTLMResponse(java.lang.String, byte[]) throws ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException
    {
        java.lang.String $r0;
        byte[] $r1, $r2, $r1_1;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: byte[];

        $r2 = staticinvoke <ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl: byte[] ntlmHash(java.lang.String)>($r0);

        $r1_1 = staticinvoke <ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl: byte[] lmResponse(byte[],byte[])>($r2, $r1);

        return $r1_1;
    }

    static byte[] getNTLMv2Response(java.lang.String, java.lang.String, java.lang.String, byte[], byte[], byte[]) throws ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException
    {
        java.lang.String $r0, $r1, $r2;
        byte[] $r3, $r4, $r5, $r6, $r5_1, $r4_1;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r4 := @parameter3: byte[];

        $r5 := @parameter4: byte[];

        $r3 := @parameter5: byte[];

        $r6 = staticinvoke <ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl: byte[] ntlmv2Hash(java.lang.String,java.lang.String,java.lang.String)>($r0, $r1, $r2);

        $r5_1 = staticinvoke <ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl: byte[] createBlob(byte[],byte[])>($r5, $r3);

        $r4_1 = staticinvoke <ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl: byte[] lmv2Response(byte[],byte[],byte[])>($r6, $r4, $r5_1);

        return $r4_1;
    }

    private static byte[] lmHash(java.lang.String) throws ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException
    {
        java.lang.Exception $r0;
        ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException $r1;
        java.lang.String $r2, $r2_1, $r2_2, $r2_3, $r2_4;
        byte[] $r3, $r4, $r8, $r4_1, $r3_1, $r4_2, $r4_3, $r3_2;
        int $i0, $i0_1, $i0_2;
        java.security.Key $r5, $r6;
        javax.crypto.Cipher $r7;

(0)     $r2 := @parameter0: java.lang.String;

     label1:
(1)     $r2_1 = virtualinvoke $r2.<java.lang.String: java.lang.String toUpperCase()>();

        $r3 = virtualinvoke $r2_1.<java.lang.String: byte[] getBytes(java.lang.String)>("US-ASCII");

        $i0 = lengthof $r3;

(2)     $i0_1 = staticinvoke <java.lang.Math: int min(int,int)>($i0, 14);

        $r4 = newarray (byte)[14];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r4, 0, $i0_1);

        $r5 = staticinvoke <ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl: java.security.Key createDESKey(byte[],int)>($r4, 0);

        $r6 = staticinvoke <ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl: java.security.Key createDESKey(byte[],int)>($r4, 7);

     label2:
(3)     $r2_2 = "KGS!@#$%";

     label3:
(4)     $r4_1 = virtualinvoke $r2_2.<java.lang.String: byte[] getBytes(java.lang.String)>("US-ASCII");

        $r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("DES/ECB/NoPadding");

        virtualinvoke $r7.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, $r5);

(5)     $r3_1 = virtualinvoke $r7.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r4_1);

        virtualinvoke $r7.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, $r6);

(6)     $r4_2 = virtualinvoke $r7.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r4_1);

        $r8 = newarray (byte)[16];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3_1, 0, $r8, 0, 8);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4_2, 0, $r8, 8, 8);

     label4:
        return $r8;

     label5:
        $r0 := @caughtexception;

        $r4_3 = Phi($r4 #0, $r4_1 #4, $r4_2 #6);

        $r3_2 = Phi($r3 #0, $r3_1 #5);

        $i0_2 = Phi($i0 #0, $i0_1 #2);

        $r2_3 = Phi($r2 #0, $r2_1 #1, $r2_2 #3);

        $r1 = new ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException;

        $r2_4 = virtualinvoke $r0.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r1.<ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException: void <init>(java.lang.String,java.lang.Throwable)>($r2_4, $r0);

        throw $r1;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }

    private static byte[] lmResponse(byte[], byte[]) throws ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException
    {
        java.lang.Exception $r0;
        ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException $r1;
        byte[] $r2, $r3, $r4, $r9, $r2_1, $r4_1, $r3_1, $r4_2, $r2_2, $r3_2;
        java.security.Key $r5, $r6, $r7;
        javax.crypto.Cipher $r8;
        java.lang.String $r10;

        $r2 := @parameter0: byte[];

(0)     $r3 := @parameter1: byte[];

     label1:
        $r4 = newarray (byte)[21];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r4, 0, 16);

        $r5 = staticinvoke <ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl: java.security.Key createDESKey(byte[],int)>($r4, 0);

        $r6 = staticinvoke <ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl: java.security.Key createDESKey(byte[],int)>($r4, 7);

        $r7 = staticinvoke <ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl: java.security.Key createDESKey(byte[],int)>($r4, 14);

        $r8 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("DES/ECB/NoPadding");

        virtualinvoke $r8.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, $r5);

(1)     $r2_1 = virtualinvoke $r8.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r3);

        virtualinvoke $r8.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, $r6);

(2)     $r4_1 = virtualinvoke $r8.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r3);

        virtualinvoke $r8.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, $r7);

(3)     $r3_1 = virtualinvoke $r8.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r3);

        $r9 = newarray (byte)[24];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2_1, 0, $r9, 0, 8);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4_1, 0, $r9, 8, 8);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3_1, 0, $r9, 16, 8);

     label2:
        return $r9;

     label3:
        $r0 := @caughtexception;

        $r4_2 = Phi($r4 #0, $r4_1 #2);

        $r2_2 = Phi($r2 #0, $r2_1 #1);

        $r3_2 = Phi($r3 #0, $r3_1 #3);

        $r1 = new ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException;

        $r10 = virtualinvoke $r0.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r1.<ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException: void <init>(java.lang.String,java.lang.Throwable)>($r10, $r0);

        throw $r1;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private static byte[] lmv2Response(byte[], byte[], byte[]) throws ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException
    {
        byte[] $r0, $r2, $r3, $r2_1, $r3_1;
        ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl$HMACMD5 $r1;
        int $i0, $i1, $i0_1, $i0_2, $i0_3, $i1_1;

        $r2 := @parameter0: byte[];

        $r3 := @parameter1: byte[];

        $r0 := @parameter2: byte[];

        $r1 = new ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl$HMACMD5;

        specialinvoke $r1.<ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl$HMACMD5: void <init>(byte[])>($r2);

        virtualinvoke $r1.<ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl$HMACMD5: void update(byte[])>($r3);

        virtualinvoke $r1.<ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl$HMACMD5: void update(byte[])>($r0);

        $r2_1 = virtualinvoke $r1.<ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl$HMACMD5: byte[] getOutput()>();

        $i0 = lengthof $r2_1;

        $i1 = lengthof $r0;

        $i0_1 = $i0 + $i1;

        $r3_1 = newarray (byte)[$i0_1];

        $i0_2 = lengthof $r2_1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2_1, 0, $r3_1, 0, $i0_2);

        $i0_3 = lengthof $r2_1;

        $i1_1 = lengthof $r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, $r3_1, $i0_3, $i1_1);

        return $r3_1;
    }

    private static byte[] makeNTLM2RandomChallenge() throws ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException
    {
        ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException $r0;
        byte[] $r1;
        java.security.SecureRandom $r2, $r4, $r2_1, $r2_2;
        java.lang.Throwable $r3;

        $r2 = <ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl: java.security.SecureRandom RND_GEN>;

        if $r2 != null goto label1;

        $r0 = new ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException;

        specialinvoke $r0.<ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException: void <init>(java.lang.String)>("Random generator not available");

        throw $r0;

     label1:
        $r1 = newarray (byte)[24];

        $r4 = <ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl: java.security.SecureRandom RND_GEN>;

(0)     entermonitor $r4;

     label2:
(1)     $r2_1 = <ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl: java.security.SecureRandom RND_GEN>;

        virtualinvoke $r2_1.<java.security.SecureRandom: void nextBytes(byte[])>($r1);

        exitmonitor $r4;

     label3:
        staticinvoke <java.util.Arrays: void fill(byte[],int,int,byte)>($r1, 8, 24, 0);

        return $r1;

     label4:
        $r3 := @caughtexception;

(2)     $r2_2 = Phi($r2 #0, $r2_1 #1, $r2_2 #2);

     label5:
        exitmonitor $r4;

     label6:
        throw $r3;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private static byte[] makeRandomChallenge() throws ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException
    {
        ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException $r0;
        byte[] $r1;
        java.security.SecureRandom $r2, $r4, $r2_1, $r2_2;
        java.lang.Throwable $r3;

        $r2 = <ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl: java.security.SecureRandom RND_GEN>;

        if $r2 != null goto label1;

        $r0 = new ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException;

        specialinvoke $r0.<ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException: void <init>(java.lang.String)>("Random generator not available");

        throw $r0;

     label1:
        $r1 = newarray (byte)[8];

        $r4 = <ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl: java.security.SecureRandom RND_GEN>;

(0)     entermonitor $r4;

     label2:
(1)     $r2_1 = <ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl: java.security.SecureRandom RND_GEN>;

        virtualinvoke $r2_1.<java.security.SecureRandom: void nextBytes(byte[])>($r1);

        exitmonitor $r4;

     label3:
        return $r1;

     label4:
        $r3 := @caughtexception;

(2)     $r2_2 = Phi($r2 #0, $r2_1 #1, $r2_2 #2);

        exitmonitor $r4;

     label5:
        throw $r3;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private static byte[] ntlmHash(java.lang.String) throws ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException
    {
        ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl$MD4 $r0;
        java.io.UnsupportedEncodingException $r1;
        ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException $r2;
        java.lang.String $r3, $r3_1, $r3_2;
        byte[] $r4, $r4_1, $r4_2;
        java.lang.StringBuilder $r5, $r5_1, $r5_2;

(0)     $r3 := @parameter0: java.lang.String;

     label1:
        $r4 = virtualinvoke $r3.<java.lang.String: byte[] getBytes(java.lang.String)>("UnicodeLittleUnmarked");

     label2:
        $r0 = new ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl$MD4;

     label3:
        specialinvoke $r0.<ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl$MD4: void <init>()>();

        virtualinvoke $r0.<ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl$MD4: void update(byte[])>($r4);

(1)     $r4_1 = virtualinvoke $r0.<ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl$MD4: byte[] getOutput()>();

     label4:
        return $r4_1;

     label5:
        $r1 := @caughtexception;

        $r4_2 = Phi($r4 #0, $r4_1 #1);

        $r2 = new ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5_1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unicode not supported: ");

        $r3_1 = virtualinvoke $r1.<java.io.UnsupportedEncodingException: java.lang.String getMessage()>();

        $r5_2 = virtualinvoke $r5_1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3_1);

        $r3_2 = virtualinvoke $r5_2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException: void <init>(java.lang.String,java.lang.Throwable)>($r3_2, $r1);

        throw $r2;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label5;
        catch java.io.UnsupportedEncodingException from label3 to label4 with label5;
    }

    private static byte[] ntlmv2Hash(java.lang.String, java.lang.String, java.lang.String) throws ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException
    {
        java.lang.String $r0, $r4, $r5, $r5_1, $r5_2, $r4_1, $r4_2;
        ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl$HMACMD5 $r1;
        java.io.UnsupportedEncodingException $r2;
        ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException $r3;
        byte[] $r6, $r6_1, $r6_2, $r6_3, $r6_4;
        java.lang.StringBuilder $r7, $r7_1, $r7_2;

        $r4 := @parameter0: java.lang.String;

        $r5 := @parameter1: java.lang.String;

(0)     $r0 := @parameter2: java.lang.String;

     label1:
        $r6 = staticinvoke <ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl: byte[] ntlmHash(java.lang.String)>($r0);

     label2:
        $r1 = new ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl$HMACMD5;

     label3:
        specialinvoke $r1.<ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl$HMACMD5: void <init>(byte[])>($r6);

(1)     $r5_1 = virtualinvoke $r5.<java.lang.String: java.lang.String toUpperCase()>();

(2)     $r6_1 = virtualinvoke $r5_1.<java.lang.String: byte[] getBytes(java.lang.String)>("UnicodeLittleUnmarked");

        virtualinvoke $r1.<ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl$HMACMD5: void update(byte[])>($r6_1);

(3)     $r6_2 = virtualinvoke $r4.<java.lang.String: byte[] getBytes(java.lang.String)>("UnicodeLittleUnmarked");

        virtualinvoke $r1.<ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl$HMACMD5: void update(byte[])>($r6_2);

(4)     $r6_3 = virtualinvoke $r1.<ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl$HMACMD5: byte[] getOutput()>();

     label4:
        return $r6_3;

     label5:
        $r2 := @caughtexception;

        $r5_2 = Phi($r5 #0, $r5_1 #1);

        $r6_4 = Phi($r6 #0, $r6_1 #2, $r6_2 #3, $r6_3 #4);

        $r3 = new ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7_1 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unicode not supported! ");

        $r4_1 = virtualinvoke $r2.<java.io.UnsupportedEncodingException: java.lang.String getMessage()>();

        $r7_2 = virtualinvoke $r7_1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4_1);

        $r4_2 = virtualinvoke $r7_2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException: void <init>(java.lang.String,java.lang.Throwable)>($r4_2, $r2);

        throw $r3;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label5;
        catch java.io.UnsupportedEncodingException from label3 to label4 with label5;
    }

    private static void oddParity(byte[])
    {
        byte[] $r0;
        int $i0, $i4, $i4_1, $i4_2;
        byte $b1, $b2, $b3, $b3_1, $b1_1, $b2_1, $b1_2, $b2_2, $b1_3, $b2_3, $b1_4, $b2_4, $b1_5, $b2_5, $b1_6, $b3_2, $b3_3, $b3_4, $b3_5, $b3_6, $b3_7, $b3_8, $b3_9;
        boolean $z0, $z0_1, $z0_2, $z0_3;

        $r0 := @parameter0: byte[];

(0)     $i4 = 0;

     label1:
        $i4_1 = Phi($i4 #0, $i4_2 #3);

        $b1 = Phi($b1 #0, $b1_6 #3);

        $b2 = Phi($b2 #0, $b2_5 #3);

        $z0 = Phi($z0 #0, $z0_2 #3);

        $b3 = Phi($b3 #0, $b3_7 #3);

        $i0 = lengthof $r0;

        if $i4_1 >= $i0 goto label6;

        $b3_1 = $r0[$i4_1];

        $b1_1 = $b3_1 >>> 7;

        $b2_1 = $b3_1 >>> 6;

        $b1_2 = $b1_1 ^ $b2_1;

        $b2_2 = $b3_1 >>> 5;

        $b1_3 = $b1_2 ^ $b2_2;

        $b2_3 = $b3_1 >>> 4;

        $b1_4 = $b1_3 ^ $b2_3;

        $b2_4 = $b3_1 >>> 3;

        $b1_5 = $b1_4 ^ $b2_4;

        $b2_5 = $b3_1 >>> 2;

        $b1_6 = $b1_5 ^ $b2_5;

        $b3_2 = $b3_1 >>> 1;

        $b3_3 = $b1_6 ^ $b3_2;

        $b3_4 = $b3_3 & 1;

        if $b3_4 != 0 goto label4;

(1)     $z0_1 = 1;

     label2:
        $z0_2 = Phi($z0_1 #1, $z0_3 #4);

        if $z0_2 == 0 goto label5;

        $b3_5 = $r0[$i4_1];

        $b3_6 = $b3_5 | 1;

(2)     $r0[$i4_1] = $b3_6;

     label3:
        $b3_7 = Phi($b3_6 #2, $b3_9 #5);

        $i4_2 = $i4_1 + 1;

(3)     goto label1;

     label4:
        $z0_3 = 0;

(4)     goto label2;

     label5:
        $b3_8 = $r0[$i4_1];

        $b3_9 = $b3_8 & -2;

        $r0[$i4_1] = $b3_9;

(5)     goto label3;

     label6:
        return;
    }

    private static byte[] readSecurityBuffer(byte[], int) throws ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException
    {
        byte[] $r0, $r2;
        int $i0, $i1, $i2, $i3, $i0_1, $i0_2;
        ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException $r1;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i2 = staticinvoke <ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl: int readUShort(byte[],int)>($r0, $i0);

        $i0_1 = $i0 + 4;

        $i3 = staticinvoke <ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl: int readULong(byte[],int)>($r0, $i0_1);

        $i0_2 = lengthof $r0;

        $i1 = $i3 + $i2;

        if $i0_2 >= $i1 goto label1;

        $r1 = new ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException;

        specialinvoke $r1.<ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException: void <init>(java.lang.String)>("NTLM authentication - buffer too small for data item");

        throw $r1;

     label1:
        $r2 = newarray (byte)[$i2];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i3, $r2, 0, $i2);

        return $r2;
    }

    private static int readULong(byte[], int) throws ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException
    {
        byte[] $r0;
        ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException $r1;
        short $s0, $s1, $s0_1, $s0_2;
        int $i2, $i3, $i4, $i3_1, $i3_2, $i3_3, $i4_1, $i4_2, $i3_4, $i2_1, $i2_2, $i2_3;
        byte $b5, $b5_1, $b5_2, $b5_3;

        $r0 := @parameter0: byte[];

        $i2 := @parameter1: int;

        $i3 = lengthof $r0;

        $i4 = $i2 + 4;

        if $i3 >= $i4 goto label1;

        $r1 = new ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException;

        specialinvoke $r1.<ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException: void <init>(java.lang.String)>("NTLM authentication - buffer too small for DWORD");

        throw $r1;

     label1:
        $b5 = $r0[$i2];

        $s0 = $b5 & 255;

        $i3_1 = $i2 + 1;

        $b5_1 = $r0[$i3_1];

        $s1 = $b5_1 & 255;

        $i3_2 = $s1 << 8;

        $i3_3 = $s0 | $i3_2;

        $i4_1 = $i2 + 2;

        $b5_2 = $r0[$i4_1];

        $s0_1 = $b5_2 & 255;

        $i4_2 = $s0_1 << 16;

        $i3_4 = $i3_3 | $i4_2;

        $i2_1 = $i2 + 3;

        $b5_3 = $r0[$i2_1];

        $s0_2 = $b5_3 & 255;

        $i2_2 = $s0_2 << 24;

        $i2_3 = $i3_4 | $i2_2;

        return $i2_3;
    }

    private static int readUShort(byte[], int) throws ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException
    {
        byte[] $r0;
        int $i0, $i1, $i4, $i4_1, $i4_2, $i4_3;
        ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException $r1;
        short $s2, $s3;
        byte $b5, $b5_1;

        $r0 := @parameter0: byte[];

        $i4 := @parameter1: int;

        $i0 = lengthof $r0;

        $i1 = $i4 + 2;

        if $i0 >= $i1 goto label1;

        $r1 = new ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException;

        specialinvoke $r1.<ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException: void <init>(java.lang.String)>("NTLM authentication - buffer too small for WORD");

        throw $r1;

     label1:
        $b5 = $r0[$i4];

        $s2 = $b5 & 255;

        $i4_1 = $i4 + 1;

        $b5_1 = $r0[$i4_1];

        $s3 = $b5_1 & 255;

        $i4_2 = $s3 << 8;

        $i4_3 = $s2 | $i4_2;

        return $i4_3;
    }

    static int rotintlft(int, int)
    {
        int $i0, $i1, $i2, $i2_1, $i1_1, $i1_2;

        $i1 := @parameter0: int;

        $i2 := @parameter1: int;

        $i0 = $i1 << $i2;

        $i2_1 = 32 - $i2;

        $i1_1 = $i1 >>> $i2_1;

        $i1_2 = $i0 | $i1_1;

        return $i1_2;
    }

    private static java.lang.String stripDotSuffix(java.lang.String)
    {
        java.lang.String $r0, $r0_1, $r0_2;
        int $i0;

        $r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>(".");

(0)     if $i0 == -1 goto label1;

(1)     $r0_1 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label1:
        $r0_2 = Phi($r0 #0, $r0_1 #1);

        return $r0_2;
    }

    static void writeULong(byte[], int, int)
    {
        byte[] $r0;
        int $i0, $i1, $i2, $i4, $i2_1, $i4_1, $i2_2, $i4_2, $i4_3, $i1_1, $i0_1, $i0_2;
        byte $b3, $b3_1, $b3_2, $b3_3;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = $i0 & 255;

        $b3 = (byte) $i2;

        $r0[$i1] = $b3;

        $i2_1 = $i1 + 1;

        $i4 = $i0 >> 8;

        $i4_1 = $i4 & 255;

        $b3_1 = (byte) $i4_1;

        $r0[$i2_1] = $b3_1;

        $i2_2 = $i1 + 2;

        $i4_2 = $i0 >> 16;

        $i4_3 = $i4_2 & 255;

        $b3_2 = (byte) $i4_3;

        $r0[$i2_2] = $b3_2;

        $i1_1 = $i1 + 3;

        $i0_1 = $i0 >> 24;

        $i0_2 = $i0_1 & 255;

        $b3_3 = (byte) $i0_2;

        $r0[$i1_1] = $b3_3;

        return;
    }

    public java.lang.String generateType1Msg(java.lang.String, java.lang.String) throws ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException
    {
        ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl $r0;
        java.lang.String $r1, $r2, $r2_1;

        $r0 := @this: ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl;

        $r2 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2_1 = virtualinvoke $r0.<ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl: java.lang.String getType1Message(java.lang.String,java.lang.String)>($r1, $r2);

        return $r2_1;
    }

    public java.lang.String generateType3Msg(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException
    {
        ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl $r0;
        java.lang.String $r1, $r2, $r3, $r5, $r6, $r6_1, $r5_1;
        ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl$Type2Message $r4;
        byte[] $r7, $r8;
        int $i0;

        $r0 := @this: ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl;

        $r5 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.lang.String;

        $r6 := @parameter4: java.lang.String;

        $r4 = new ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl$Type2Message;

        specialinvoke $r4.<ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl$Type2Message: void <init>(java.lang.String)>($r6);

        $r7 = virtualinvoke $r4.<ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl$Type2Message: byte[] getChallenge()>();

        $i0 = virtualinvoke $r4.<ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl$Type2Message: int getFlags()>();

        $r6_1 = virtualinvoke $r4.<ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl$Type2Message: java.lang.String getTarget()>();

        $r8 = virtualinvoke $r4.<ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl$Type2Message: byte[] getTargetInfo()>();

        $r5_1 = virtualinvoke $r0.<ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl: java.lang.String getType3Message(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])>($r5, $r1, $r3, $r2, $r7, $i0, $r6_1, $r8);

        return $r5_1;
    }

    java.lang.String getCredentialCharset()
    {
        ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl $r0;
        java.lang.String r1;

        $r0 := @this: ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl;

        r1 = $r0.<ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl: java.lang.String credentialCharset>;

        return r1;
    }

    final java.lang.String getResponseFor(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException
    {
        ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl $r0;
        java.lang.String $r1, $r2, $r3, $r4, $r6, $r7, $r6_1, $r6_2, $r6_3;
        ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl$Type2Message $r5;
        boolean $z0;
        byte[] $r8, $r9;
        int $i0;

        $r0 := @this: ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl;

        $r6 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.lang.String;

        $r4 := @parameter4: java.lang.String;

        if $r6 == null goto label1;

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label2;

     label1:
        $r6_3 = virtualinvoke $r0.<ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl: java.lang.String getType1Message(java.lang.String,java.lang.String)>($r3, $r4);

        return $r6_3;

     label2:
        $r5 = new ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl$Type2Message;

        specialinvoke $r5.<ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl$Type2Message: void <init>(java.lang.String)>($r6);

        $r8 = virtualinvoke $r5.<ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl$Type2Message: byte[] getChallenge()>();

        $i0 = virtualinvoke $r5.<ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl$Type2Message: int getFlags()>();

        $r6_1 = virtualinvoke $r5.<ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl$Type2Message: java.lang.String getTarget()>();

        $r9 = virtualinvoke $r5.<ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl$Type2Message: byte[] getTargetInfo()>();

        $r6_2 = virtualinvoke $r0.<ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl: java.lang.String getType3Message(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])>($r1, $r2, $r3, $r4, $r8, $i0, $r6_1, $r9);

        return $r6_2;
    }

    java.lang.String getType1Message(java.lang.String, java.lang.String) throws ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException
    {
        ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl $r0;
        java.lang.String $r1, $r3, $r3_1;
        ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl$Type1Message $r2;

        $r0 := @this: ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl;

        $r3 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 = new ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl$Type1Message;

        specialinvoke $r2.<ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl$Type1Message: void <init>(java.lang.String,java.lang.String)>($r1, $r3);

        $r3_1 = virtualinvoke $r2.<ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl$Type1Message: java.lang.String getResponse()>();

        return $r3_1;
    }

    java.lang.String getType3Message(java.lang.String, java.lang.String, java.lang.String, java.lang.String, byte[], int, java.lang.String, byte[]) throws ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException
    {
        ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl $r0;
        java.lang.String $r1, $r2, $r3, $r5, $r8, $r8_1;
        byte[] $r4, $r6;
        int $i0;
        ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl$Type3Message $r7;

        $r0 := @this: ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl;

        $r8 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.lang.String;

        $r4 := @parameter4: byte[];

        $i0 := @parameter5: int;

        $r5 := @parameter6: java.lang.String;

        $r6 := @parameter7: byte[];

        $r7 = new ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl$Type3Message;

        specialinvoke $r7.<ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl$Type3Message: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])>($r3, $r2, $r8, $r1, $r4, $i0, $r5, $r6);

        $r8_1 = virtualinvoke $r7.<ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl$Type3Message: java.lang.String getResponse()>();

        return $r8_1;
    }

    void setCredentialCharset(java.lang.String)
    {
        ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl $r0;
        java.lang.String $r1;

        $r0 := @this: ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl;

        $r1 := @parameter0: java.lang.String;

        $r0.<ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl: java.lang.String credentialCharset> = $r1;

        return;
    }
}
