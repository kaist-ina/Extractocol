public final class ch.boye.httpclientandroidlib.auth.AuthSchemeRegistry extends java.lang.Object
{
    private final java.util.concurrent.ConcurrentHashMap registeredSchemes;

    public void <init>()
    {
        ch.boye.httpclientandroidlib.auth.AuthSchemeRegistry $r0;
        java.util.concurrent.ConcurrentHashMap $r1;

        $r0 := @this: ch.boye.httpclientandroidlib.auth.AuthSchemeRegistry;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        $r0.<ch.boye.httpclientandroidlib.auth.AuthSchemeRegistry: java.util.concurrent.ConcurrentHashMap registeredSchemes> = $r1;

        return;
    }

    public ch.boye.httpclientandroidlib.auth.AuthScheme getAuthScheme(java.lang.String, ch.boye.httpclientandroidlib.params.HttpParams) throws java.lang.IllegalStateException
    {
        ch.boye.httpclientandroidlib.auth.AuthSchemeRegistry $r0;
        ch.boye.httpclientandroidlib.params.HttpParams $r1;
        java.lang.IllegalArgumentException $r2;
        java.util.concurrent.ConcurrentHashMap $r3;
        java.util.Locale $r4;
        java.lang.IllegalStateException $r5;
        java.lang.String $r6, $r7, $r6_1;
        java.lang.Object $r8;
        ch.boye.httpclientandroidlib.auth.AuthSchemeFactory $r9;
        ch.boye.httpclientandroidlib.auth.AuthScheme $r10;
        java.lang.StringBuilder $r11, $r11_1, $r11_2;

        $r0 := @this: ch.boye.httpclientandroidlib.auth.AuthSchemeRegistry;

        $r6 := @parameter0: java.lang.String;

        $r1 := @parameter1: ch.boye.httpclientandroidlib.params.HttpParams;

        if $r6 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Name may not be null");

        throw $r2;

     label1:
        $r3 = $r0.<ch.boye.httpclientandroidlib.auth.AuthSchemeRegistry: java.util.concurrent.ConcurrentHashMap registeredSchemes>;

        $r4 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r4);

        $r8 = virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r7);

        $r9 = (ch.boye.httpclientandroidlib.auth.AuthSchemeFactory) $r8;

        if $r9 == null goto label2;

        $r10 = interfaceinvoke $r9.<ch.boye.httpclientandroidlib.auth.AuthSchemeFactory: ch.boye.httpclientandroidlib.auth.AuthScheme newInstance(ch.boye.httpclientandroidlib.params.HttpParams)>($r1);

        return $r10;

     label2:
        $r5 = new java.lang.IllegalStateException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11_1 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported authentication scheme: ");

        $r11_2 = virtualinvoke $r11_1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6_1 = virtualinvoke $r11_2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6_1);

        throw $r5;
    }

    public java.util.List getSchemeNames()
    {
        ch.boye.httpclientandroidlib.auth.AuthSchemeRegistry $r0;
        java.util.ArrayList $r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.util.Set $r3;

        $r0 := @this: ch.boye.httpclientandroidlib.auth.AuthSchemeRegistry;

        $r1 = new java.util.ArrayList;

        $r2 = $r0.<ch.boye.httpclientandroidlib.auth.AuthSchemeRegistry: java.util.concurrent.ConcurrentHashMap registeredSchemes>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.util.Set keySet()>();

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        return $r1;
    }

    public void register(java.lang.String, ch.boye.httpclientandroidlib.auth.AuthSchemeFactory)
    {
        ch.boye.httpclientandroidlib.auth.AuthSchemeRegistry $r0;
        ch.boye.httpclientandroidlib.auth.AuthSchemeFactory $r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.util.Locale $r3;
        java.lang.String $r4, $r4_1;
        java.lang.IllegalArgumentException $r5, $r5_1;

        $r0 := @this: ch.boye.httpclientandroidlib.auth.AuthSchemeRegistry;

        $r4 := @parameter0: java.lang.String;

        $r1 := @parameter1: ch.boye.httpclientandroidlib.auth.AuthSchemeFactory;

        if $r4 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Name may not be null");

        throw $r5;

     label1:
        if $r1 != null goto label2;

        $r5_1 = new java.lang.IllegalArgumentException;

        specialinvoke $r5_1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Authentication scheme factory may not be null");

        throw $r5_1;

     label2:
        $r2 = $r0.<ch.boye.httpclientandroidlib.auth.AuthSchemeRegistry: java.util.concurrent.ConcurrentHashMap registeredSchemes>;

        $r3 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r4_1 = virtualinvoke $r4.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r3);

        virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4_1, $r1);

        return;
    }

    public void setItems(java.util.Map)
    {
        ch.boye.httpclientandroidlib.auth.AuthSchemeRegistry $r0;
        java.util.Map $r1;
        java.util.concurrent.ConcurrentHashMap $r2, $r2_1;

        $r0 := @this: ch.boye.httpclientandroidlib.auth.AuthSchemeRegistry;

        $r1 := @parameter0: java.util.Map;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = $r0.<ch.boye.httpclientandroidlib.auth.AuthSchemeRegistry: java.util.concurrent.ConcurrentHashMap registeredSchemes>;

        virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void clear()>();

        $r2_1 = $r0.<ch.boye.httpclientandroidlib.auth.AuthSchemeRegistry: java.util.concurrent.ConcurrentHashMap registeredSchemes>;

        virtualinvoke $r2_1.<java.util.concurrent.ConcurrentHashMap: void putAll(java.util.Map)>($r1);

        return;
    }

    public void unregister(java.lang.String)
    {
        ch.boye.httpclientandroidlib.auth.AuthSchemeRegistry $r0;
        java.lang.IllegalArgumentException $r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.util.Locale $r3;
        java.lang.String $r4, $r4_1;

        $r0 := @this: ch.boye.httpclientandroidlib.auth.AuthSchemeRegistry;

        $r4 := @parameter0: java.lang.String;

        if $r4 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Name may not be null");

        throw $r1;

     label1:
        $r2 = $r0.<ch.boye.httpclientandroidlib.auth.AuthSchemeRegistry: java.util.concurrent.ConcurrentHashMap registeredSchemes>;

        $r3 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r4_1 = virtualinvoke $r4.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r3);

        virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>($r4_1);

        return;
    }
}
