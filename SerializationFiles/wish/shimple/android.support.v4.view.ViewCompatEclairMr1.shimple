class android.support.v4.view.ViewCompatEclairMr1 extends java.lang.Object
{
    public static final java.lang.String TAG;
    private static java.lang.reflect.Method sChildrenDrawingOrderMethod;

    void <init>()
    {
        android.support.v4.view.ViewCompatEclairMr1 $r0;

        $r0 := @this: android.support.v4.view.ViewCompatEclairMr1;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean isOpaque(android.view.View)
    {
        android.view.View $r0;
        boolean $z0;

        $r0 := @parameter0: android.view.View;

        $z0 = virtualinvoke $r0.<android.view.View: boolean isOpaque()>();

        return $z0;
    }

    public static void setChildrenDrawingOrderEnabled(android.view.ViewGroup, boolean)
    {
        android.view.ViewGroup $r0;
        boolean $z0;
        java.lang.Class $r1, $r3;
        java.lang.Class[] $r2;
        java.lang.Object[] $r4;
        java.lang.NoSuchMethodException $r5;
        java.lang.IllegalAccessException $r6;
        java.lang.IllegalArgumentException $r7;
        java.lang.reflect.InvocationTargetException $r8;
        java.lang.reflect.Method $r9, $r9_1, $r9_2, $r9_3, $r9_4, $r9_5, $r9_6;
        java.lang.Boolean $r10;

        $r0 := @parameter0: android.view.ViewGroup;

        $z0 := @parameter1: boolean;

        $r9 = <android.support.v4.view.ViewCompatEclairMr1: java.lang.reflect.Method sChildrenDrawingOrderMethod>;

(0)     if $r9 != null goto label04;

        $r1 = class "android/view/ViewGroup";

        $r2 = newarray (java.lang.Class)[1];

        $r3 = <java.lang.Boolean: java.lang.Class TYPE>;

(1)     $r2[0] = $r3;

     label01:
(2)     $r9_1 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("setChildrenDrawingOrderEnabled", $r2);

     label02:
(3)     <android.support.v4.view.ViewCompatEclairMr1: java.lang.reflect.Method sChildrenDrawingOrderMethod> = $r9_1;

     label03:
        $r9_2 = Phi($r9_1 #3, $r9_4 #5);

        $r9_3 = <android.support.v4.view.ViewCompatEclairMr1: java.lang.reflect.Method sChildrenDrawingOrderMethod>;

(4)     virtualinvoke $r9_3.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

     label04:
        $r9_5 = Phi($r9 #0, $r9_3 #4);

        $r9_6 = <android.support.v4.view.ViewCompatEclairMr1: java.lang.reflect.Method sChildrenDrawingOrderMethod>;

        $r4 = newarray (java.lang.Object)[1];

     label05:
        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

     label06:
        $r4[0] = $r10;

     label07:
        virtualinvoke $r9_6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r0, $r4);

     label08:
        return;

     label09:
        $r5 := @caughtexception;

        $r9_4 = Phi($r9 #1, $r9_1 #2);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ViewCompat", "Unable to find childrenDrawingOrderEnabled", $r5);

(5)     goto label03;

     label10:
        $r6 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ViewCompat", "Unable to invoke childrenDrawingOrderEnabled", $r6);

        return;

     label11:
        $r7 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ViewCompat", "Unable to invoke childrenDrawingOrderEnabled", $r7);

        return;

     label12:
        $r8 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ViewCompat", "Unable to invoke childrenDrawingOrderEnabled", $r8);

        return;

        catch java.lang.NoSuchMethodException from label01 to label02 with label09;
        catch java.lang.IllegalAccessException from label05 to label06 with label10;
        catch java.lang.IllegalArgumentException from label05 to label06 with label11;
        catch java.lang.reflect.InvocationTargetException from label05 to label06 with label12;
        catch java.lang.IllegalAccessException from label07 to label08 with label10;
        catch java.lang.IllegalArgumentException from label07 to label08 with label11;
        catch java.lang.reflect.InvocationTargetException from label07 to label08 with label12;
    }
}
