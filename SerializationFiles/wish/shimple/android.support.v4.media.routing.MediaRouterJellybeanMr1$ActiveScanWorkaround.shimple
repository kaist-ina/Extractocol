public final class android.support.v4.media.routing.MediaRouterJellybeanMr1$ActiveScanWorkaround extends java.lang.Object implements java.lang.Runnable
{
    private static final int WIFI_DISPLAY_SCAN_INTERVAL;
    private boolean mActivelyScanningWifiDisplays;
    private final android.hardware.display.DisplayManager mDisplayManager;
    private final android.os.Handler mHandler;
    private java.lang.reflect.Method mScanWifiDisplaysMethod;

    public void <init>(android.content.Context, android.os.Handler)
    {
        android.support.v4.media.routing.MediaRouterJellybeanMr1$ActiveScanWorkaround $r0;
        android.content.Context $r1;
        android.os.Handler $r2;
        int $i0;
        java.lang.UnsupportedOperationException $r3;
        java.lang.Class $r4;
        java.lang.Class[] $r5;
        java.lang.NoSuchMethodException $r6;
        java.lang.Object $r7;
        android.hardware.display.DisplayManager $r8;
        java.lang.reflect.Method $r9;

        $r0 := @this: android.support.v4.media.routing.MediaRouterJellybeanMr1$ActiveScanWorkaround;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: android.os.Handler;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 == 17 goto label1;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;

     label1:
        $r7 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("display");

        $r8 = (android.hardware.display.DisplayManager) $r7;

        $r0.<android.support.v4.media.routing.MediaRouterJellybeanMr1$ActiveScanWorkaround: android.hardware.display.DisplayManager mDisplayManager> = $r8;

        $r0.<android.support.v4.media.routing.MediaRouterJellybeanMr1$ActiveScanWorkaround: android.os.Handler mHandler> = $r2;

        $r4 = class "android/hardware/display/DisplayManager";

        $r5 = newarray (java.lang.Class)[0];

     label2:
        $r9 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("scanWifiDisplays", $r5);

     label3:
        $r0.<android.support.v4.media.routing.MediaRouterJellybeanMr1$ActiveScanWorkaround: java.lang.reflect.Method mScanWifiDisplaysMethod> = $r9;

        return;

     label4:
        $r6 := @caughtexception;

        return;

        catch java.lang.NoSuchMethodException from label2 to label3 with label4;
    }

    public void run()
    {
        android.support.v4.media.routing.MediaRouterJellybeanMr1$ActiveScanWorkaround $r0;
        boolean $z0;
        java.lang.reflect.Method $r1;
        android.hardware.display.DisplayManager $r2;
        java.lang.Object[] $r3;
        android.os.Handler $r4;
        java.lang.IllegalAccessException $r5;
        java.lang.reflect.InvocationTargetException $r6;

        $r0 := @this: android.support.v4.media.routing.MediaRouterJellybeanMr1$ActiveScanWorkaround;

        $z0 = $r0.<android.support.v4.media.routing.MediaRouterJellybeanMr1$ActiveScanWorkaround: boolean mActivelyScanningWifiDisplays>;

        if $z0 == 0 goto label5;

        $r1 = $r0.<android.support.v4.media.routing.MediaRouterJellybeanMr1$ActiveScanWorkaround: java.lang.reflect.Method mScanWifiDisplaysMethod>;

        $r2 = $r0.<android.support.v4.media.routing.MediaRouterJellybeanMr1$ActiveScanWorkaround: android.hardware.display.DisplayManager mDisplayManager>;

        $r3 = newarray (java.lang.Object)[0];

     label1:
        virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r2, $r3);

     label2:
        $r4 = $r0.<android.support.v4.media.routing.MediaRouterJellybeanMr1$ActiveScanWorkaround: android.os.Handler mHandler>;

        virtualinvoke $r4.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r0, 15000L);

        return;

     label3:
        $r5 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaRouterJellybeanMr1", "Cannot scan for wifi displays.", $r5);

        goto label2;

     label4:
        $r6 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaRouterJellybeanMr1", "Cannot scan for wifi displays.", $r6);

        goto label2;

     label5:
        return;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label4;
    }

    public void setActiveScanRouteTypes(int)
    {
        android.support.v4.media.routing.MediaRouterJellybeanMr1$ActiveScanWorkaround $r0;
        java.lang.reflect.Method $r1;
        int $i0, $i0_1;
        boolean $z0, $z0_1, $z0_2;
        android.os.Handler $r2, $r2_1, $r2_2;

        $r0 := @this: android.support.v4.media.routing.MediaRouterJellybeanMr1$ActiveScanWorkaround;

        $i0 := @parameter0: int;

        $i0_1 = $i0 & 2;

        if $i0_1 == 0 goto label2;

        $z0 = $r0.<android.support.v4.media.routing.MediaRouterJellybeanMr1$ActiveScanWorkaround: boolean mActivelyScanningWifiDisplays>;

(0)     if $z0 != 0 goto label3;

        $r1 = $r0.<android.support.v4.media.routing.MediaRouterJellybeanMr1$ActiveScanWorkaround: java.lang.reflect.Method mScanWifiDisplaysMethod>;

        if $r1 == null goto label1;

        $r0.<android.support.v4.media.routing.MediaRouterJellybeanMr1$ActiveScanWorkaround: boolean mActivelyScanningWifiDisplays> = 1;

        $r2 = $r0.<android.support.v4.media.routing.MediaRouterJellybeanMr1$ActiveScanWorkaround: android.os.Handler mHandler>;

        virtualinvoke $r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r0);

        return;

     label1:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MediaRouterJellybeanMr1", "Cannot scan for wifi displays because the DisplayManager.scanWifiDisplays() method is not available on this device.");

        return;

     label2:
        $z0_1 = $r0.<android.support.v4.media.routing.MediaRouterJellybeanMr1$ActiveScanWorkaround: boolean mActivelyScanningWifiDisplays>;

(1)     if $z0_1 == 0 goto label3;

        $r0.<android.support.v4.media.routing.MediaRouterJellybeanMr1$ActiveScanWorkaround: boolean mActivelyScanningWifiDisplays> = 0;

        $r2_1 = $r0.<android.support.v4.media.routing.MediaRouterJellybeanMr1$ActiveScanWorkaround: android.os.Handler mHandler>;

(2)     virtualinvoke $r2_1.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r0);

     label3:
        $z0_2 = Phi($z0 #0, $z0_1 #1, $z0_1 #2);

        $r2_2 = Phi($r2 #0, $r2 #1, $r2_1 #2);

        return;
    }
}
