public class com.contextlogic.wish.http.ImageHttpResponseHandler extends com.contextlogic.wish.http.HttpResponseHandler
{
    private boolean allowDensityScaleUp;
    private long cacheExpiry;
    private boolean cacheOnly;
    private boolean canUseCachedResponse;
    private int requestedHeight;
    private int requestedWidth;
    private boolean shouldCacheResponse;

    public void <init>()
    {
        com.contextlogic.wish.http.ImageHttpResponseHandler $r0;

        $r0 := @this: com.contextlogic.wish.http.ImageHttpResponseHandler;

        specialinvoke $r0.<com.contextlogic.wish.http.HttpResponseHandler: void <init>()>();

        $r0.<com.contextlogic.wish.http.ImageHttpResponseHandler: boolean canUseCachedResponse> = 0;

        $r0.<com.contextlogic.wish.http.ImageHttpResponseHandler: boolean shouldCacheResponse> = 0;

        $r0.<com.contextlogic.wish.http.ImageHttpResponseHandler: long cacheExpiry> = -1L;

        $r0.<com.contextlogic.wish.http.ImageHttpResponseHandler: int requestedWidth> = -1;

        $r0.<com.contextlogic.wish.http.ImageHttpResponseHandler: int requestedHeight> = -1;

        $r0.<com.contextlogic.wish.http.ImageHttpResponseHandler: boolean cacheOnly> = 0;

        return;
    }

    private android.graphics.Bitmap preprocessResponse(byte[])
    {
        com.contextlogic.wish.http.ImageHttpResponseHandler $r0;
        byte[] $r1;
        int $i0, $i1;
        android.graphics.Bitmap $r2;
        boolean $z0, $z0_1, $z0_2;

        $r0 := @this: com.contextlogic.wish.http.ImageHttpResponseHandler;

        $r1 := @parameter0: byte[];

(0)     if $r1 == null goto label1;

        $z0 = $r0.<com.contextlogic.wish.http.ImageHttpResponseHandler: boolean cacheOnly>;

(1)     if $z0 != 0 goto label1;

        $i0 = $r0.<com.contextlogic.wish.http.ImageHttpResponseHandler: int requestedWidth>;

        $i1 = $r0.<com.contextlogic.wish.http.ImageHttpResponseHandler: int requestedHeight>;

        $z0_1 = $r0.<com.contextlogic.wish.http.ImageHttpResponseHandler: boolean allowDensityScaleUp>;

        $r2 = staticinvoke <com.contextlogic.wish.util.BitmapUtil: android.graphics.Bitmap decodeBitmap(byte[],int,int,boolean)>($r1, $i0, $i1, $z0_1);

        return $r2;

     label1:
        $z0_2 = Phi($z0 #0, $z0 #1);

        return null;
    }

    public void handleCachedResponse(java.lang.Object)
    {
        com.contextlogic.wish.http.ImageHttpResponseHandler $r0;
        java.lang.Object $r1;
        android.graphics.Bitmap $r2;

        $r0 := @this: com.contextlogic.wish.http.ImageHttpResponseHandler;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (android.graphics.Bitmap) $r1;

        virtualinvoke $r0.<com.contextlogic.wish.http.ImageHttpResponseHandler: void onSuccess(android.graphics.Bitmap)>($r2);

        return;
    }

    public void handleFailure(ch.boye.httpclientandroidlib.client.methods.HttpUriRequest, java.lang.Throwable, java.lang.Object)
    {
        com.contextlogic.wish.http.ImageHttpResponseHandler $r0;
        ch.boye.httpclientandroidlib.client.methods.HttpUriRequest $r1;
        java.lang.Throwable $r2;
        java.lang.Object $r3;
        android.graphics.Bitmap $r4;

        $r0 := @this: com.contextlogic.wish.http.ImageHttpResponseHandler;

        $r1 := @parameter0: ch.boye.httpclientandroidlib.client.methods.HttpUriRequest;

        $r2 := @parameter1: java.lang.Throwable;

        $r3 := @parameter2: java.lang.Object;

        $r4 = (android.graphics.Bitmap) $r3;

        virtualinvoke $r0.<com.contextlogic.wish.http.ImageHttpResponseHandler: void onFailure(java.lang.Throwable,android.graphics.Bitmap)>($r2, $r4);

        return;
    }

    public void handleStart(ch.boye.httpclientandroidlib.client.methods.HttpUriRequest)
    {
        com.contextlogic.wish.http.ImageHttpResponseHandler $r0;
        ch.boye.httpclientandroidlib.client.methods.HttpUriRequest $r1;

        $r0 := @this: com.contextlogic.wish.http.ImageHttpResponseHandler;

        $r1 := @parameter0: ch.boye.httpclientandroidlib.client.methods.HttpUriRequest;

        virtualinvoke $r0.<com.contextlogic.wish.http.ImageHttpResponseHandler: void onStart()>();

        return;
    }

    public void handleSuccess(ch.boye.httpclientandroidlib.client.methods.HttpUriRequest, java.lang.Object)
    {
        com.contextlogic.wish.http.ImageHttpResponseHandler $r0;
        ch.boye.httpclientandroidlib.client.methods.HttpUriRequest $r1;
        java.lang.Object $r2;
        boolean $z0;
        android.graphics.Bitmap $r3, $r3_1;

        $r0 := @this: com.contextlogic.wish.http.ImageHttpResponseHandler;

        $r1 := @parameter0: ch.boye.httpclientandroidlib.client.methods.HttpUriRequest;

        $r2 := @parameter1: java.lang.Object;

        $z0 = $r0.<com.contextlogic.wish.http.ImageHttpResponseHandler: boolean cacheOnly>;

        if $z0 == 0 goto label1;

        virtualinvoke $r0.<com.contextlogic.wish.http.ImageHttpResponseHandler: void onSuccess(android.graphics.Bitmap)>(null);

        return;

     label1:
        if $r2 != null goto label2;

        $r3 = (android.graphics.Bitmap) $r2;

        virtualinvoke $r0.<com.contextlogic.wish.http.ImageHttpResponseHandler: void onFailure(java.lang.Throwable,android.graphics.Bitmap)>(null, $r3);

        return;

     label2:
        $r3_1 = (android.graphics.Bitmap) $r2;

        virtualinvoke $r0.<com.contextlogic.wish.http.ImageHttpResponseHandler: void onSuccess(android.graphics.Bitmap)>($r3_1);

        return;
    }

    public boolean hasCachedResponse(java.lang.String)
    {
        com.contextlogic.wish.http.ImageHttpResponseHandler $r0;
        java.lang.String $r1;
        long $l0;
        boolean $z0, $z0_1;
        com.contextlogic.wish.cache.PersistedCache $r2;

        $r0 := @this: com.contextlogic.wish.http.ImageHttpResponseHandler;

        $r1 := @parameter0: java.lang.String;

        $z0 = $r0.<com.contextlogic.wish.http.ImageHttpResponseHandler: boolean canUseCachedResponse>;

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <com.contextlogic.wish.cache.PersistedCache: com.contextlogic.wish.cache.PersistedCache getInstance()>();

        $l0 = $r0.<com.contextlogic.wish.http.ImageHttpResponseHandler: long cacheExpiry>;

        $z0_1 = virtualinvoke $r2.<com.contextlogic.wish.cache.PersistedCache: boolean hasCachedBitmap(java.lang.String,long,boolean)>($r1, $l0, 0);

        return $z0_1;

     label1:
        return 0;
    }

    public boolean loadResponseFromCache(java.lang.String)
    {
        com.contextlogic.wish.http.ImageHttpResponseHandler $r0;
        java.lang.String $r1;
        boolean $z0, $z0_1, $z0_2, $z0_3, $z0_4, $z0_5, $z0_6;
        long $l0, $l0_1, $l0_2, $l0_3, $l0_4;
        byte $b1, $b1_1;
        com.contextlogic.wish.cache.PersistedCache $r2, $r2_1, $r2_2, $r2_3, $r2_4;
        int $i2, $i3, $i2_1, $i3_1, $i2_2, $i3_2, $i3_3, $i2_3, $i2_4, $i3_4;
        android.graphics.Bitmap $r3, $r3_1, $r3_2, $r3_3, $r3_4;

        $r0 := @this: com.contextlogic.wish.http.ImageHttpResponseHandler;

        $r1 := @parameter0: java.lang.String;

        $z0 = $r0.<com.contextlogic.wish.http.ImageHttpResponseHandler: boolean cacheOnly>;

        if $z0 == 0 goto label4;

        $l0 = $r0.<com.contextlogic.wish.http.ImageHttpResponseHandler: long cacheExpiry>;

        $b1 = $l0 cmp -1L;

        if $b1 != 0 goto label2;

        $r2 = staticinvoke <com.contextlogic.wish.cache.PersistedCache: com.contextlogic.wish.cache.PersistedCache getInstance()>();

        $i2 = $r0.<com.contextlogic.wish.http.ImageHttpResponseHandler: int requestedWidth>;

        $i3 = $r0.<com.contextlogic.wish.http.ImageHttpResponseHandler: int requestedHeight>;

        $z0_1 = $r0.<com.contextlogic.wish.http.ImageHttpResponseHandler: boolean allowDensityScaleUp>;

        $r3 = virtualinvoke $r2.<com.contextlogic.wish.cache.PersistedCache: android.graphics.Bitmap getCachedBitmap(java.lang.String,boolean,boolean,int,int,boolean)>($r1, 0, 0, $i2, $i3, $z0_1);

        if $r3 == null goto label1;

        return 1;

     label1:
        return 0;

     label2:
        $r2_1 = staticinvoke <com.contextlogic.wish.cache.PersistedCache: com.contextlogic.wish.cache.PersistedCache getInstance()>();

        $l0_1 = $r0.<com.contextlogic.wish.http.ImageHttpResponseHandler: long cacheExpiry>;

        $i2_1 = $r0.<com.contextlogic.wish.http.ImageHttpResponseHandler: int requestedWidth>;

        $i3_1 = $r0.<com.contextlogic.wish.http.ImageHttpResponseHandler: int requestedHeight>;

        $z0_2 = $r0.<com.contextlogic.wish.http.ImageHttpResponseHandler: boolean allowDensityScaleUp>;

        $r3_1 = virtualinvoke $r2_1.<com.contextlogic.wish.cache.PersistedCache: android.graphics.Bitmap getCachedBitmap(java.lang.String,long,boolean,boolean,int,int,boolean)>($r1, $l0_1, 0, 0, $i2_1, $i3_1, $z0_2);

        if $r3_1 == null goto label3;

        return 1;

     label3:
        return 0;

     label4:
        $z0_3 = $r0.<com.contextlogic.wish.http.ImageHttpResponseHandler: boolean canUseCachedResponse>;

        if $z0_3 == 0 goto label8;

        $l0_2 = $r0.<com.contextlogic.wish.http.ImageHttpResponseHandler: long cacheExpiry>;

        $b1_1 = $l0_2 cmp -1L;

        if $b1_1 != 0 goto label6;

        $r2_2 = staticinvoke <com.contextlogic.wish.cache.PersistedCache: com.contextlogic.wish.cache.PersistedCache getInstance()>();

        $i2_2 = $r0.<com.contextlogic.wish.http.ImageHttpResponseHandler: int requestedWidth>;

        $i3_2 = $r0.<com.contextlogic.wish.http.ImageHttpResponseHandler: int requestedHeight>;

        $z0_4 = $r0.<com.contextlogic.wish.http.ImageHttpResponseHandler: boolean allowDensityScaleUp>;

(0)     $r3_2 = virtualinvoke $r2_2.<com.contextlogic.wish.cache.PersistedCache: android.graphics.Bitmap getCachedBitmap(java.lang.String,boolean,boolean,int,int,boolean)>($r1, 0, 1, $i2_2, $i3_2, $z0_4);

     label5:
        $l0_3 = Phi($l0_2 #0, $l0_4 #1);

        $i3_3 = Phi($i3_2 #0, $i3_4 #1);

        $r3_3 = Phi($r3_2 #0, $r3_4 #1);

        $z0_5 = Phi($z0_4 #0, $z0_6 #1);

        $i2_3 = Phi($i2_2 #0, $i2_4 #1);

        $r2_3 = Phi($r2_2 #0, $r2_4 #1);

        if $r3_3 == null goto label7;

        virtualinvoke $r0.<com.contextlogic.wish.http.ImageHttpResponseHandler: void responseLoadedFromCache(java.lang.Object)>($r3_3);

        return 1;

     label6:
        $r2_4 = staticinvoke <com.contextlogic.wish.cache.PersistedCache: com.contextlogic.wish.cache.PersistedCache getInstance()>();

        $l0_4 = $r0.<com.contextlogic.wish.http.ImageHttpResponseHandler: long cacheExpiry>;

        $i2_4 = $r0.<com.contextlogic.wish.http.ImageHttpResponseHandler: int requestedWidth>;

        $i3_4 = $r0.<com.contextlogic.wish.http.ImageHttpResponseHandler: int requestedHeight>;

        $z0_6 = $r0.<com.contextlogic.wish.http.ImageHttpResponseHandler: boolean allowDensityScaleUp>;

        $r3_4 = virtualinvoke $r2_4.<com.contextlogic.wish.cache.PersistedCache: android.graphics.Bitmap getCachedBitmap(java.lang.String,long,boolean,boolean,int,int,boolean)>($r1, $l0_4, 0, 1, $i2_4, $i3_4, $z0_6);

(1)     goto label5;

     label7:
        return 0;

     label8:
        return 0;
    }

    public void onFailure(java.lang.Throwable, android.graphics.Bitmap)
    {
        com.contextlogic.wish.http.ImageHttpResponseHandler $r0;
        java.lang.Throwable $r1;
        android.graphics.Bitmap $r2;

        $r0 := @this: com.contextlogic.wish.http.ImageHttpResponseHandler;

        $r1 := @parameter0: java.lang.Throwable;

        $r2 := @parameter1: android.graphics.Bitmap;

        return;
    }

    public void onStart()
    {
        com.contextlogic.wish.http.ImageHttpResponseHandler $r0;

        $r0 := @this: com.contextlogic.wish.http.ImageHttpResponseHandler;

        return;
    }

    public void onSuccess(android.graphics.Bitmap)
    {
        com.contextlogic.wish.http.ImageHttpResponseHandler $r0;
        android.graphics.Bitmap $r1;

        $r0 := @this: com.contextlogic.wish.http.ImageHttpResponseHandler;

        $r1 := @parameter0: android.graphics.Bitmap;

        return;
    }

    public java.lang.Object preprocessFailure(java.lang.Throwable, java.lang.Object)
    {
        com.contextlogic.wish.http.ImageHttpResponseHandler $r0;
        java.lang.Throwable $r1;
        java.lang.Object $r2;
        android.graphics.Bitmap $r3;
        byte[] $r4;

        $r0 := @this: com.contextlogic.wish.http.ImageHttpResponseHandler;

        $r1 := @parameter0: java.lang.Throwable;

        $r2 := @parameter1: java.lang.Object;

        $r4 = (byte[]) $r2;

        $r3 = specialinvoke $r0.<com.contextlogic.wish.http.ImageHttpResponseHandler: android.graphics.Bitmap preprocessResponse(byte[])>($r4);

        return $r3;
    }

    public java.lang.Object preprocessSuccess(java.lang.Object)
    {
        com.contextlogic.wish.http.ImageHttpResponseHandler $r0;
        java.lang.Object $r1;
        android.graphics.Bitmap $r2;
        byte[] $r3;

        $r0 := @this: com.contextlogic.wish.http.ImageHttpResponseHandler;

        $r1 := @parameter0: java.lang.Object;

        $r3 = (byte[]) $r1;

        $r2 = specialinvoke $r0.<com.contextlogic.wish.http.ImageHttpResponseHandler: android.graphics.Bitmap preprocessResponse(byte[])>($r3);

        return $r2;
    }

    public void receiveResponse(ch.boye.httpclientandroidlib.client.methods.HttpUriRequest, ch.boye.httpclientandroidlib.HttpResponse)
    {
        com.contextlogic.wish.http.ImageHttpResponseHandler $r0;
        ch.boye.httpclientandroidlib.client.methods.HttpUriRequest $r1;
        ch.boye.httpclientandroidlib.HttpResponse $r2;
        ch.boye.httpclientandroidlib.client.HttpResponseException $r3;
        java.io.IOException $r4;
        boolean $z0;
        ch.boye.httpclientandroidlib.StatusLine $r5;
        byte[] $r6, $r6_1, $r6_2, $r6_3;
        ch.boye.httpclientandroidlib.HttpEntity $r7;
        int $i0, $i0_1, $i0_2;
        java.lang.String $r8, $r8_1, $r8_2;
        com.contextlogic.wish.cache.PersistedCache $r9;
        java.net.URI $r10;

        $r0 := @this: com.contextlogic.wish.http.ImageHttpResponseHandler;

        $r1 := @parameter0: ch.boye.httpclientandroidlib.client.methods.HttpUriRequest;

        $r2 := @parameter1: ch.boye.httpclientandroidlib.HttpResponse;

        $r5 = interfaceinvoke $r2.<ch.boye.httpclientandroidlib.HttpResponse: ch.boye.httpclientandroidlib.StatusLine getStatusLine()>();

(0)     $r6 = null;

     label1:
        $r7 = interfaceinvoke $r2.<ch.boye.httpclientandroidlib.HttpResponse: ch.boye.httpclientandroidlib.HttpEntity getEntity()>();

     label2:
(1)     if $r7 == null goto label4;

     label3:
(2)     $r6_1 = staticinvoke <ch.boye.httpclientandroidlib.util.EntityUtils: byte[] toByteArray(ch.boye.httpclientandroidlib.HttpEntity)>($r7);

     label4:
        $r6_2 = Phi($r6 #1, $r6_1 #2);

(3)     if $r6_2 == null goto label5;

        $i0 = interfaceinvoke $r5.<ch.boye.httpclientandroidlib.StatusLine: int getStatusCode()>();

(4)     if $i0 == 200 goto label7;

     label5:
        $i0_1 = Phi($i0 #3, $i0 #4);

        $r3 = new ch.boye.httpclientandroidlib.client.HttpResponseException;

        $i0_2 = interfaceinvoke $r5.<ch.boye.httpclientandroidlib.StatusLine: int getStatusCode()>();

        $r8_2 = interfaceinvoke $r5.<ch.boye.httpclientandroidlib.StatusLine: java.lang.String getReasonPhrase()>();

        specialinvoke $r3.<ch.boye.httpclientandroidlib.client.HttpResponseException: void <init>(int,java.lang.String)>($i0_2, $r8_2);

        virtualinvoke $r0.<com.contextlogic.wish.http.ImageHttpResponseHandler: void requestFailed(ch.boye.httpclientandroidlib.client.methods.HttpUriRequest,java.lang.Throwable,java.lang.Object)>($r1, $r3, $r6_2);

        return;

     label6:
        $r4 := @caughtexception;

        $r6_3 = Phi($r6 #0, $r6_1 #2);

        virtualinvoke $r0.<com.contextlogic.wish.http.ImageHttpResponseHandler: void requestFailed(ch.boye.httpclientandroidlib.client.methods.HttpUriRequest,java.lang.Throwable,java.lang.Object)>($r1, $r4, null);

        return;

     label7:
        $z0 = $r0.<com.contextlogic.wish.http.ImageHttpResponseHandler: boolean shouldCacheResponse>;

(5)     if $z0 == 0 goto label8;

        $r9 = staticinvoke <com.contextlogic.wish.cache.PersistedCache: com.contextlogic.wish.cache.PersistedCache getInstance()>();

        $r10 = interfaceinvoke $r1.<ch.boye.httpclientandroidlib.client.methods.HttpUriRequest: java.net.URI getURI()>();

        $r8 = virtualinvoke $r10.<java.net.URI: java.lang.String toString()>();

(6)     virtualinvoke $r9.<com.contextlogic.wish.cache.PersistedCache: void cacheBitmap(java.lang.String,byte[],boolean)>($r8, $r6_2, 0);

     label8:
        $r8_1 = Phi($r8 #5, $r8 #6);

        virtualinvoke $r0.<com.contextlogic.wish.http.ImageHttpResponseHandler: void requestSucceeded(ch.boye.httpclientandroidlib.client.methods.HttpUriRequest,java.lang.Object)>($r1, $r6_2);

        return;

        catch java.io.IOException from label1 to label2 with label6;
        catch java.io.IOException from label3 to label4 with label6;
    }

    public void setAllowDensityScaleUp(boolean)
    {
        com.contextlogic.wish.http.ImageHttpResponseHandler $r0;
        boolean $z0;

        $r0 := @this: com.contextlogic.wish.http.ImageHttpResponseHandler;

        $z0 := @parameter0: boolean;

        $r0.<com.contextlogic.wish.http.ImageHttpResponseHandler: boolean allowDensityScaleUp> = $z0;

        return;
    }

    public void setCacheExpiry(long)
    {
        com.contextlogic.wish.http.ImageHttpResponseHandler $r0;
        long $l0;

        $r0 := @this: com.contextlogic.wish.http.ImageHttpResponseHandler;

        $l0 := @parameter0: long;

        $r0.<com.contextlogic.wish.http.ImageHttpResponseHandler: long cacheExpiry> = $l0;

        return;
    }

    public void setCacheOnly(boolean)
    {
        com.contextlogic.wish.http.ImageHttpResponseHandler $r0;
        boolean $z0;

        $r0 := @this: com.contextlogic.wish.http.ImageHttpResponseHandler;

        $z0 := @parameter0: boolean;

        $r0.<com.contextlogic.wish.http.ImageHttpResponseHandler: boolean cacheOnly> = $z0;

        return;
    }

    public void setCanUseCachedResponse(boolean)
    {
        com.contextlogic.wish.http.ImageHttpResponseHandler $r0;
        boolean $z0;

        $r0 := @this: com.contextlogic.wish.http.ImageHttpResponseHandler;

        $z0 := @parameter0: boolean;

        $r0.<com.contextlogic.wish.http.ImageHttpResponseHandler: boolean canUseCachedResponse> = $z0;

        return;
    }

    public void setRequestedHeight(int)
    {
        com.contextlogic.wish.http.ImageHttpResponseHandler $r0;
        int $i0;

        $r0 := @this: com.contextlogic.wish.http.ImageHttpResponseHandler;

        $i0 := @parameter0: int;

        $r0.<com.contextlogic.wish.http.ImageHttpResponseHandler: int requestedHeight> = $i0;

        return;
    }

    public void setRequestedWidth(int)
    {
        com.contextlogic.wish.http.ImageHttpResponseHandler $r0;
        int $i0;

        $r0 := @this: com.contextlogic.wish.http.ImageHttpResponseHandler;

        $i0 := @parameter0: int;

        $r0.<com.contextlogic.wish.http.ImageHttpResponseHandler: int requestedWidth> = $i0;

        return;
    }

    public void setShouldCacheResponse(boolean)
    {
        com.contextlogic.wish.http.ImageHttpResponseHandler $r0;
        boolean $z0;

        $r0 := @this: com.contextlogic.wish.http.ImageHttpResponseHandler;

        $z0 := @parameter0: boolean;

        $r0.<com.contextlogic.wish.http.ImageHttpResponseHandler: boolean shouldCacheResponse> = $z0;

        return;
    }
}
