class android.support.v4.util.ContainerHelpers extends java.lang.Object
{
    static final int[] EMPTY_INTS;
    static final long[] EMPTY_LONGS;
    static final java.lang.Object[] EMPTY_OBJECTS;

    static void <clinit>()
    {
        int[] $r0;
        long[] $r1;
        java.lang.Object[] $r2;

        $r0 = newarray (int)[0];

        <android.support.v4.util.ContainerHelpers: int[] EMPTY_INTS> = $r0;

        $r1 = newarray (long)[0];

        <android.support.v4.util.ContainerHelpers: long[] EMPTY_LONGS> = $r1;

        $r2 = newarray (java.lang.Object)[0];

        <android.support.v4.util.ContainerHelpers: java.lang.Object[] EMPTY_OBJECTS> = $r2;

        return;
    }

    void <init>()
    {
        android.support.v4.util.ContainerHelpers $r0;

        $r0 := @this: android.support.v4.util.ContainerHelpers;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    static int binarySearch(int[], int, int)
    {
        int[] $r0;
        int $i0, $i1, $i2, $i3, $i4, $i2_1, $i3_1, $i2_2, $i1_1, $i1_2, $i3_2, $i2_3, $i2_4;

        $r0 := @parameter0: int[];

        $i2 := @parameter1: int;

        $i0 := @parameter2: int;

        $i3 = 0;

(0)     $i2_1 = $i2 + -1;

     label1:
        $i3_1 = Phi($i3 #0, $i3_2 #1, $i3_1 #2);

        $i2_2 = Phi($i2_1 #0, $i2_2 #1, $i2_3 #2);

        $i1 = Phi($i1 #0, $i1_2 #1, $i1_2 #2);

        if $i3_1 > $i2_2 goto label3;

        $i1_1 = $i3_1 + $i2_2;

        $i1_2 = $i1_1 >>> 1;

        $i4 = $r0[$i1_2];

        if $i4 >= $i0 goto label2;

        $i3_2 = $i1_2 + 1;

(1)     goto label1;

     label2:
        if $i4 <= $i0 goto label4;

        $i2_3 = $i1_2 + -1;

(2)     goto label1;

     label3:
        $i2_4 = $i3_1 ^ -1;

        return $i2_4;

     label4:
        return $i1_2;
    }

    static int binarySearch(long[], int, long)
    {
        long[] $r0;
        long $l0, $l1;
        int $i2, $i3, $i4, $i2_1, $i3_1, $i2_2, $i4_1, $i4_2, $i3_2, $i2_3, $i2_4;
        byte $b5, $b5_1, $b5_2;

        $r0 := @parameter0: long[];

        $i2 := @parameter1: int;

        $l0 := @parameter2: long;

        $i3 = 0;

(0)     $i2_1 = $i2 + -1;

     label1:
        $i4 = Phi($i4 #0, $i4_2 #1, $i4_2 #2);

        $i3_1 = Phi($i3 #0, $i3_2 #1, $i3_1 #2);

        $i2_2 = Phi($i2_1 #0, $i2_2 #1, $i2_3 #2);

        $b5 = Phi($b5 #0, $b5_1 #1, $b5_2 #2);

        if $i3_1 > $i2_2 goto label3;

        $i4_1 = $i3_1 + $i2_2;

        $i4_2 = $i4_1 >>> 1;

        $l1 = $r0[$i4_2];

        $b5_1 = $l1 cmp $l0;

        if $b5_1 >= 0 goto label2;

        $i3_2 = $i4_2 + 1;

(1)     goto label1;

     label2:
        $b5_2 = $l1 cmp $l0;

        if $b5_2 <= 0 goto label4;

        $i2_3 = $i4_2 + -1;

(2)     goto label1;

     label3:
        $i2_4 = $i3_1 ^ -1;

        return $i2_4;

     label4:
        return $i4_2;
    }

    public static boolean equal(java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        if $r0 == $r1 goto label1;

        if $r0 == null goto label2;

        $z0 = virtualinvoke $r0.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public static int idealByteArraySize(int)
    {
        int $i0, $i1, $i2, $i1_1, $i2_1, $i2_2, $i0_1, $i0_2, $i1_2;

        $i0 := @parameter0: int;

(0)     $i1 = 4;

     label1:
        $i2 = Phi($i2 #0, $i2_2 #1);

        $i1_1 = Phi($i1 #0, $i1_2 #1);

        if $i1_1 >= 32 goto label3;

        $i2_1 = 1 << $i1_1;

        $i2_2 = $i2_1 + -12;

        if $i0 > $i2_2 goto label2;

        $i0_1 = 1 << $i1_1;

        $i0_2 = $i0_1 + -12;

        return $i0_2;

     label2:
        $i1_2 = $i1_1 + 1;

(1)     goto label1;

     label3:
        return $i0;
    }

    public static int idealIntArraySize(int)
    {
        int $i0, $i0_1, $i0_2, $i0_3;

        $i0 := @parameter0: int;

        $i0_1 = $i0 * 4;

        $i0_2 = staticinvoke <android.support.v4.util.ContainerHelpers: int idealByteArraySize(int)>($i0_1);

        $i0_3 = $i0_2 / 4;

        return $i0_3;
    }

    public static int idealLongArraySize(int)
    {
        int $i0, $i0_1, $i0_2, $i0_3;

        $i0 := @parameter0: int;

        $i0_1 = $i0 * 8;

        $i0_2 = staticinvoke <android.support.v4.util.ContainerHelpers: int idealByteArraySize(int)>($i0_1);

        $i0_3 = $i0_2 / 8;

        return $i0_3;
    }
}
