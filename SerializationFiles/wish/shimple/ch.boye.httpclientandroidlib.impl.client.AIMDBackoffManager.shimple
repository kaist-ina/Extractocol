public class ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager extends java.lang.Object implements ch.boye.httpclientandroidlib.client.BackoffManager
{
    private double backoffFactor;
    private int cap;
    private final ch.boye.httpclientandroidlib.impl.client.Clock clock;
    private final ch.boye.httpclientandroidlib.pool.ConnPoolControl connPerRoute;
    private long coolDown;
    private final java.util.Map lastRouteBackoffs;
    private final java.util.Map lastRouteProbes;

    public void <init>(ch.boye.httpclientandroidlib.pool.ConnPoolControl)
    {
        ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager $r0;
        ch.boye.httpclientandroidlib.pool.ConnPoolControl $r1;
        ch.boye.httpclientandroidlib.impl.client.SystemClock $r2;

        $r0 := @this: ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager;

        $r1 := @parameter0: ch.boye.httpclientandroidlib.pool.ConnPoolControl;

        $r2 = new ch.boye.httpclientandroidlib.impl.client.SystemClock;

        specialinvoke $r2.<ch.boye.httpclientandroidlib.impl.client.SystemClock: void <init>()>();

        specialinvoke $r0.<ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager: void <init>(ch.boye.httpclientandroidlib.pool.ConnPoolControl,ch.boye.httpclientandroidlib.impl.client.Clock)>($r1, $r2);

        return;
    }

    void <init>(ch.boye.httpclientandroidlib.pool.ConnPoolControl, ch.boye.httpclientandroidlib.impl.client.Clock)
    {
        ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager $r0;
        ch.boye.httpclientandroidlib.pool.ConnPoolControl $r1;
        ch.boye.httpclientandroidlib.impl.client.Clock $r2;
        java.util.HashMap $r3, $r3_1;

        $r0 := @this: ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager;

        $r1 := @parameter0: ch.boye.httpclientandroidlib.pool.ConnPoolControl;

        $r2 := @parameter1: ch.boye.httpclientandroidlib.impl.client.Clock;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager: long coolDown> = 5000L;

        $r0.<ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager: double backoffFactor> = 0.5;

        $r0.<ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager: int cap> = 2;

        $r0.<ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager: ch.boye.httpclientandroidlib.impl.client.Clock clock> = $r2;

        $r0.<ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager: ch.boye.httpclientandroidlib.pool.ConnPoolControl connPerRoute> = $r1;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        $r0.<ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager: java.util.Map lastRouteProbes> = $r3;

        $r3_1 = new java.util.HashMap;

        specialinvoke $r3_1.<java.util.HashMap: void <init>()>();

        $r0.<ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager: java.util.Map lastRouteBackoffs> = $r3_1;

        return;
    }

    private int getBackedOffPoolSize(int)
    {
        ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager $r0;
        double $d0, $d1, $d0_1, $d0_2;
        int $i0, $i0_1;

        $r0 := @this: ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager;

        $i0 := @parameter0: int;

        if $i0 > 1 goto label1;

        return 1;

     label1:
        $d0 = $r0.<ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager: double backoffFactor>;

        $d1 = (double) $i0;

        $d0_1 = $d0 * $d1;

        $d0_2 = staticinvoke <java.lang.Math: double floor(double)>($d0_1);

        $i0_1 = (int) $d0_2;

        return $i0_1;
    }

    private java.lang.Long getLastUpdate(java.util.Map, ch.boye.httpclientandroidlib.conn.routing.HttpRoute)
    {
        ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager $r0;
        java.util.Map $r1;
        ch.boye.httpclientandroidlib.conn.routing.HttpRoute $r2;
        java.lang.Object $r3;
        java.lang.Long $r4, $r4_1, $r4_2;

        $r0 := @this: ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager;

        $r1 := @parameter0: java.util.Map;

        $r2 := @parameter1: ch.boye.httpclientandroidlib.conn.routing.HttpRoute;

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r4 = (java.lang.Long) $r3;

(0)     if $r4 != null goto label1;

(1)     $r4_1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(0L);

     label1:
        $r4_2 = Phi($r4 #0, $r4_1 #1);

        return $r4_2;
    }

    public void backOff(ch.boye.httpclientandroidlib.conn.routing.HttpRoute)
    {
        ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager $r0;
        ch.boye.httpclientandroidlib.conn.routing.HttpRoute $r1;
        ch.boye.httpclientandroidlib.pool.ConnPoolControl $r2, $r5, $r5_1, $r5_2;
        ch.boye.httpclientandroidlib.impl.client.Clock $r3;
        long $l0, $l3, $l4, $l0_1, $l0_2;
        byte $b1;
        java.lang.Throwable $r4;
        int $i2, $i2_1, $i2_2;
        java.util.Map $r6, $r6_1, $r6_2;
        java.lang.Long $r7, $r7_1, $r7_2;

        $r0 := @this: ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager;

        $r1 := @parameter0: ch.boye.httpclientandroidlib.conn.routing.HttpRoute;

        $r2 = $r0.<ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager: ch.boye.httpclientandroidlib.pool.ConnPoolControl connPerRoute>;

(0)     entermonitor $r2;

     label1:
        $r5 = $r0.<ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager: ch.boye.httpclientandroidlib.pool.ConnPoolControl connPerRoute>;

        $i2 = interfaceinvoke $r5.<ch.boye.httpclientandroidlib.pool.ConnPoolControl: int getMaxPerRoute(java.lang.Object)>($r1);

        $r6 = $r0.<ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager: java.util.Map lastRouteBackoffs>;

        $r7 = specialinvoke $r0.<ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager: java.lang.Long getLastUpdate(java.util.Map,ch.boye.httpclientandroidlib.conn.routing.HttpRoute)>($r6, $r1);

        $r3 = $r0.<ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager: ch.boye.httpclientandroidlib.impl.client.Clock clock>;

        $l3 = interfaceinvoke $r3.<ch.boye.httpclientandroidlib.impl.client.Clock: long getCurrentTime()>();

        $l0 = virtualinvoke $r7.<java.lang.Long: long longValue()>();

(1)     $l0_1 = $l3 - $l0;

        $l4 = $r0.<ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager: long coolDown>;

        $b1 = $l0_1 cmp $l4;

        if $b1 >= 0 goto label3;

        exitmonitor $r2;

     label2:
        return;

     label3:
(2)     $r5_1 = $r0.<ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager: ch.boye.httpclientandroidlib.pool.ConnPoolControl connPerRoute>;

(3)     $i2_1 = specialinvoke $r0.<ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager: int getBackedOffPoolSize(int)>($i2);

        interfaceinvoke $r5_1.<ch.boye.httpclientandroidlib.pool.ConnPoolControl: void setMaxPerRoute(java.lang.Object,int)>($r1, $i2_1);

(4)     $r6_1 = $r0.<ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager: java.util.Map lastRouteBackoffs>;

(5)     $r7_1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        interfaceinvoke $r6_1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r7_1);

        exitmonitor $r2;

     label4:
        return;

     label5:
        $r4 := @caughtexception;

        $r5_2 = Phi($r5 #0, $r5_1 #2, $r5_2 #6);

        $r6_2 = Phi($r6 #0, $r6_1 #4, $r6_2 #6);

        $i2_2 = Phi($i2 #0, $i2_1 #3, $i2_2 #6);

        $r7_2 = Phi($r7 #0, $r7_1 #5, $r7_2 #6);

(6)     $l0_2 = Phi($l0 #0, $l0_1 #1, $l0_2 #6);

        exitmonitor $r2;

     label6:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void probe(ch.boye.httpclientandroidlib.conn.routing.HttpRoute)
    {
        ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager $r0;
        ch.boye.httpclientandroidlib.conn.routing.HttpRoute $r1;
        ch.boye.httpclientandroidlib.pool.ConnPoolControl $r2, $r5, $r5_1, $r5_2;
        int $i0, $i1, $i0_1, $i0_2, $i0_3, $i0_4;
        ch.boye.httpclientandroidlib.impl.client.Clock $r3;
        java.lang.Throwable $r4;
        java.util.Map $r6, $r6_1, $r6_2, $r6_3;
        java.lang.Long $r7, $r8, $r7_1, $r7_2;
        long $l2, $l3, $l4, $l3_1, $l3_2, $l3_3, $l4_1, $l4_2, $l3_4, $l4_3, $l3_5;
        byte $b5, $b5_1, $b5_2, $b5_3;

        $r0 := @this: ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager;

        $r1 := @parameter0: ch.boye.httpclientandroidlib.conn.routing.HttpRoute;

        $r2 = $r0.<ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager: ch.boye.httpclientandroidlib.pool.ConnPoolControl connPerRoute>;

(0)     entermonitor $r2;

     label1:
        $r5 = $r0.<ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager: ch.boye.httpclientandroidlib.pool.ConnPoolControl connPerRoute>;

        $i1 = interfaceinvoke $r5.<ch.boye.httpclientandroidlib.pool.ConnPoolControl: int getMaxPerRoute(java.lang.Object)>($r1);

        $i0 = $r0.<ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager: int cap>;

        if $i1 < $i0 goto label5;

(1)     $i0_1 = $r0.<ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager: int cap>;

     label2:
        $i0_2 = Phi($i0_1 #1, $i0_3 #13);

(2)     $r6 = $r0.<ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager: java.util.Map lastRouteProbes>;

        $r7 = specialinvoke $r0.<ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager: java.lang.Long getLastUpdate(java.util.Map,ch.boye.httpclientandroidlib.conn.routing.HttpRoute)>($r6, $r1);

(3)     $r6_1 = $r0.<ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager: java.util.Map lastRouteBackoffs>;

        $r8 = specialinvoke $r0.<ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager: java.lang.Long getLastUpdate(java.util.Map,ch.boye.httpclientandroidlib.conn.routing.HttpRoute)>($r6_1, $r1);

        $r3 = $r0.<ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager: ch.boye.httpclientandroidlib.impl.client.Clock clock>;

        $l2 = interfaceinvoke $r3.<ch.boye.httpclientandroidlib.impl.client.Clock: long getCurrentTime()>();

        $l3 = virtualinvoke $r7.<java.lang.Long: long longValue()>();

(4)     $l3_1 = $l2 - $l3;

        $l4 = $r0.<ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager: long coolDown>;

        $b5 = $l3_1 cmp $l4;

(5)     if $b5 < 0 goto label3;

(6)     $l3_2 = virtualinvoke $r8.<java.lang.Long: long longValue()>();

(7)     $l3_3 = $l2 - $l3_2;

(8)     $l4_1 = $r0.<ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager: long coolDown>;

(9)     $b5_1 = $l3_3 cmp $l4_1;

(10)    if $b5_1 >= 0 goto label6;

     label3:
        $l4_2 = Phi($l4 #5, $l4_1 #10);

        $b5_2 = Phi($b5 #5, $b5_1 #10);

        $l3_4 = Phi($l3_1 #5, $l3_3 #10);

(11)    exitmonitor $r2;

     label4:
        return;

     label5:
(12)    $i0_3 = $i1 + 1;

(13)    goto label2;

     label6:
(14)    $r5_1 = $r0.<ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager: ch.boye.httpclientandroidlib.pool.ConnPoolControl connPerRoute>;

        interfaceinvoke $r5_1.<ch.boye.httpclientandroidlib.pool.ConnPoolControl: void setMaxPerRoute(java.lang.Object,int)>($r1, $i0_2);

(15)    $r6_2 = $r0.<ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager: java.util.Map lastRouteProbes>;

(16)    $r7_1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        interfaceinvoke $r6_2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r7_1);

        exitmonitor $r2;

     label7:
        return;

     label8:
        $r4 := @caughtexception;

        $l4_3 = Phi($l4 #0, $l4_1 #8, $l4_2 #11, $l4_3 #17);

        $b5_3 = Phi($b5 #0, $b5_1 #9, $b5_2 #11, $b5_3 #17);

        $r7_2 = Phi($r7 #0, $r7_1 #16, $r7_2 #17);

        $l3_5 = Phi($l3 #0, $l3_1 #4, $l3_2 #6, $l3_3 #7, $l3_4 #11, $l3_5 #17);

        $r5_2 = Phi($r5 #0, $r5_1 #14, $r5_2 #17);

        $r6_3 = Phi($r6 #0, $r6_1 #3, $r6_2 #15, $r6_3 #17);

(17)    $i0_4 = Phi($i0 #0, $i0_1 #1, $i0_2 #2, $i0_3 #12, $i0_4 #17);

        exitmonitor $r2;

     label9:
        throw $r4;

        catch java.lang.Throwable from label1 to label4 with label8;
        catch java.lang.Throwable from label5 to label7 with label8;
        catch java.lang.Throwable from label8 to label9 with label8;
    }

    public void setBackoffFactor(double)
    {
        ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager $r0;
        double $d0;
        java.lang.IllegalArgumentException $r1;
        byte $b0, $b0_1, $b0_2;

        $r0 := @this: ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager;

        $d0 := @parameter0: double;

        $b0 = $d0 cmpg 0.0;

(0)     if $b0 <= 0 goto label1;

        $b0_1 = $d0 cmpl 1.0;

(1)     if $b0_1 < 0 goto label2;

     label1:
        $b0_2 = Phi($b0 #0, $b0_1 #1);

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("backoffFactor must be 0.0 < f < 1.0");

        throw $r1;

     label2:
        $r0.<ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager: double backoffFactor> = $d0;

        return;
    }

    public void setCooldownMillis(long)
    {
        ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager $r0;
        long $l0, $l1;
        byte $b2;
        java.lang.IllegalArgumentException $r1;

        $r0 := @this: ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager;

        $l0 := @parameter0: long;

        $l1 = $r0.<ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager: long coolDown>;

        $b2 = $l1 cmp 0L;

        if $b2 > 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cooldownMillis must be positive");

        throw $r1;

     label1:
        $r0.<ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager: long coolDown> = $l0;

        return;
    }

    public void setPerHostConnectionCap(int)
    {
        ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager $r0;
        int $i0;
        java.lang.IllegalArgumentException $r1;

        $r0 := @this: ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager;

        $i0 := @parameter0: int;

        if $i0 >= 1 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("perHostConnectionCap must be >= 1");

        throw $r1;

     label1:
        $r0.<ch.boye.httpclientandroidlib.impl.client.AIMDBackoffManager: int cap> = $i0;

        return;
    }
}
