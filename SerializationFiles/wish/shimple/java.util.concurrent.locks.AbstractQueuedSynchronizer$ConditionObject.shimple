public class java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject extends java.lang.Object implements java.util.concurrent.locks.Condition, java.io.Serializable
{
    final java.util.concurrent.locks.AbstractQueuedSynchronizer this$0;

    public void <init>(java.util.concurrent.locks.AbstractQueuedSynchronizer)
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject r0;
        java.util.concurrent.locks.AbstractQueuedSynchronizer r1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;

        r1 := @parameter0: java.util.concurrent.locks.AbstractQueuedSynchronizer;

        r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public final void signal()
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public final void signalAll()
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public final void awaitUninterruptibly()
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public final void await() throws java.lang.InterruptedException
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public final long awaitNanos(long) throws java.lang.InterruptedException
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject r0;
        long l0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;

        l0 := @parameter0: long;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public final boolean awaitUntil(java.util.Date) throws java.lang.InterruptedException
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject r0;
        java.util.Date r1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;

        r1 := @parameter0: java.util.Date;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public final boolean await(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject r0;
        long l0;
        java.util.concurrent.TimeUnit r1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    protected final boolean hasWaiters()
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    protected final int getWaitQueueLength()
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    protected final java.util.Collection getWaitingThreads()
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }
}
