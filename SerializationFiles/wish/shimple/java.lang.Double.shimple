public final class java.lang.Double extends java.lang.Number implements java.lang.Comparable
{
    public static final int MAX_EXPONENT;
    public static final double MAX_VALUE;
    public static final int MIN_EXPONENT;
    public static final double MIN_NORMAL;
    public static final double MIN_VALUE;
    public static final double NEGATIVE_INFINITY;
    public static final double NaN;
    public static final double POSITIVE_INFINITY;
    public static final int SIZE;
    public static final java.lang.Class TYPE;

    public void <init>(double)
    {
        java.lang.Double r0;
        double d0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.lang.Double;

        d0 := @parameter0: double;

        specialinvoke r0.<java.lang.Number: void <init>()>();

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public void <init>(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.Double r0;
        java.lang.String r1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.lang.Double;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Number: void <init>()>();

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public int compareTo(java.lang.Double)
    {
        java.lang.Double r0, r1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.lang.Double;

        r1 := @parameter0: java.lang.Double;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public byte byteValue()
    {
        java.lang.Double r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.lang.Double;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public static long doubleToLongBits(double)
    {
        double d0;
        java.lang.RuntimeException $r0;

        d0 := @parameter0: double;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static native long doubleToRawLongBits(double);

    public double doubleValue()
    {
        java.lang.Double r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.lang.Double;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Double r0;
        java.lang.Object r1;
        java.lang.RuntimeException $r2;

        r0 := @this: java.lang.Double;

        r1 := @parameter0: java.lang.Object;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r2;
    }

    public float floatValue()
    {
        java.lang.Double r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.lang.Double;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public int hashCode()
    {
        java.lang.Double r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.lang.Double;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public int intValue()
    {
        java.lang.Double r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.lang.Double;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public boolean isInfinite()
    {
        java.lang.Double r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.lang.Double;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public static boolean isInfinite(double)
    {
        double d0;
        java.lang.RuntimeException $r0;

        d0 := @parameter0: double;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public boolean isNaN()
    {
        java.lang.Double r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.lang.Double;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public static boolean isNaN(double)
    {
        double d0;
        java.lang.RuntimeException $r0;

        d0 := @parameter0: double;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static native double longBitsToDouble(long);

    public long longValue()
    {
        java.lang.Double r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.lang.Double;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public static double parseDouble(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.String r0;
        java.lang.RuntimeException $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public short shortValue()
    {
        java.lang.Double r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.lang.Double;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public java.lang.String toString()
    {
        java.lang.Double r0;
        java.lang.RuntimeException $r1;

        r0 := @this: java.lang.Double;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public static java.lang.String toString(double)
    {
        double d0;
        java.lang.RuntimeException $r0;

        d0 := @parameter0: double;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static java.lang.Double valueOf(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.String r0;
        java.lang.RuntimeException $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r1;
    }

    public static int compare(double, double)
    {
        double d0, d1;
        java.lang.RuntimeException $r0;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static java.lang.Double valueOf(double)
    {
        double d0;
        java.lang.RuntimeException $r0;

        d0 := @parameter0: double;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public static java.lang.String toHexString(double)
    {
        double d0;
        java.lang.RuntimeException $r0;

        d0 := @parameter0: double;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!");

        throw $r0;
    }

    public volatile int compareTo(java.lang.Object)
    {
        java.lang.Double r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: java.lang.Double;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Double) r1;

        $i0 = virtualinvoke r0.<java.lang.Double: int compareTo(java.lang.Double)>($r2);

        return $i0;
    }

    static void <clinit>()
    {
        <java.lang.Double: java.lang.Class TYPE> = null;

        return;
    }
}
