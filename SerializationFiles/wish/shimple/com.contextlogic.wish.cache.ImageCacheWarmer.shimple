public class com.contextlogic.wish.cache.ImageCacheWarmer extends java.lang.Object implements com.contextlogic.wish.cache.CachedImageFetcherCallback
{
    private java.util.HashMap pausedRequests;
    private java.util.concurrent.ConcurrentHashMap requestTagUrlMap;
    private java.util.concurrent.ConcurrentHashMap urlFetcherMap;
    private java.util.concurrent.ConcurrentHashMap urlRequestTagMap;

    public void <init>()
    {
        com.contextlogic.wish.cache.ImageCacheWarmer $r0;
        java.util.HashMap $r1;
        java.util.concurrent.ConcurrentHashMap $r2, $r2_1, $r2_2;

        $r0 := @this: com.contextlogic.wish.cache.ImageCacheWarmer;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        $r0.<com.contextlogic.wish.cache.ImageCacheWarmer: java.util.concurrent.ConcurrentHashMap urlRequestTagMap> = $r2;

        $r2_1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r2_1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        $r0.<com.contextlogic.wish.cache.ImageCacheWarmer: java.util.concurrent.ConcurrentHashMap requestTagUrlMap> = $r2_1;

        $r2_2 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r2_2.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        $r0.<com.contextlogic.wish.cache.ImageCacheWarmer: java.util.concurrent.ConcurrentHashMap urlFetcherMap> = $r2_2;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        $r0.<com.contextlogic.wish.cache.ImageCacheWarmer: java.util.HashMap pausedRequests> = $r1;

        return;
    }

    public void cancel(java.lang.String)
    {
        com.contextlogic.wish.cache.ImageCacheWarmer $r0;
        java.lang.String $r1;
        java.util.concurrent.ConcurrentHashMap $r2, $r2_1, $r2_2, $r2_3, $r2_4, $r2_5, $r2_6;
        java.lang.Object $r3, $r3_1;
        com.contextlogic.wish.cache.CachedImageFetcher $r4;

        $r0 := @this: com.contextlogic.wish.cache.ImageCacheWarmer;

        $r1 := @parameter0: java.lang.String;

        $r2 = $r0.<com.contextlogic.wish.cache.ImageCacheWarmer: java.util.concurrent.ConcurrentHashMap urlRequestTagMap>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r1);

(0)     if $r3 == null goto label1;

        $r2_1 = $r0.<com.contextlogic.wish.cache.ImageCacheWarmer: java.util.concurrent.ConcurrentHashMap requestTagUrlMap>;

        virtualinvoke $r2_1.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>($r3);

        $r2_2 = $r0.<com.contextlogic.wish.cache.ImageCacheWarmer: java.util.concurrent.ConcurrentHashMap urlRequestTagMap>;

(1)     virtualinvoke $r2_2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>($r1);

     label1:
        $r2_3 = Phi($r2 #0, $r2_2 #1);

        $r2_4 = $r0.<com.contextlogic.wish.cache.ImageCacheWarmer: java.util.concurrent.ConcurrentHashMap urlFetcherMap>;

        $r3_1 = virtualinvoke $r2_4.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (com.contextlogic.wish.cache.CachedImageFetcher) $r3_1;

(2)     if $r4 == null goto label2;

        virtualinvoke $r4.<com.contextlogic.wish.cache.CachedImageFetcher: void cancel()>();

        $r2_5 = $r0.<com.contextlogic.wish.cache.ImageCacheWarmer: java.util.concurrent.ConcurrentHashMap urlFetcherMap>;

(3)     virtualinvoke $r2_5.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>($r1);

     label2:
        $r2_6 = Phi($r2_4 #2, $r2_5 #3);

        return;
    }

    public void cancelAll()
    {
        com.contextlogic.wish.cache.ImageCacheWarmer $r0;
        java.util.concurrent.ConcurrentHashMap $r1, $r1_1, $r1_2, $r1_3, $r1_4;
        java.util.Set $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4, $r4_1, $r4_2, $r4_3;
        java.util.Map$Entry $r5;
        java.lang.String $r6;
        com.contextlogic.wish.cache.CachedImageFetcher $r7;

        $r0 := @this: com.contextlogic.wish.cache.ImageCacheWarmer;

        $r1 = $r0.<com.contextlogic.wish.cache.ImageCacheWarmer: java.util.concurrent.ConcurrentHashMap urlFetcherMap>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: java.util.Set entrySet()>();

(0)     $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $r1_1 = Phi($r1 #0, $r1_2 #1);

        $r4 = Phi($r4 #0, $r4_3 #1);

        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4_1 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.util.Map$Entry) $r4_1;

        $r4_2 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r6 = (java.lang.String) $r4_2;

        $r4_3 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r7 = (com.contextlogic.wish.cache.CachedImageFetcher) $r4_3;

        virtualinvoke $r7.<com.contextlogic.wish.cache.CachedImageFetcher: void cancel()>();

        $r1_2 = $r0.<com.contextlogic.wish.cache.ImageCacheWarmer: java.util.concurrent.ConcurrentHashMap urlRequestTagMap>;

        virtualinvoke $r1_2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>($r6);

(1)     goto label1;

     label2:
        $r1_3 = $r0.<com.contextlogic.wish.cache.ImageCacheWarmer: java.util.concurrent.ConcurrentHashMap urlFetcherMap>;

        virtualinvoke $r1_3.<java.util.concurrent.ConcurrentHashMap: void clear()>();

        $r1_4 = $r0.<com.contextlogic.wish.cache.ImageCacheWarmer: java.util.concurrent.ConcurrentHashMap requestTagUrlMap>;

        virtualinvoke $r1_4.<java.util.concurrent.ConcurrentHashMap: void clear()>();

        return;
    }

    public void onImageLoadFailed(java.lang.Object)
    {
        com.contextlogic.wish.cache.ImageCacheWarmer $r0;
        java.lang.Object $r1, $r2;
        java.util.concurrent.ConcurrentHashMap $r3, $r3_1, $r3_2, $r3_3, $r3_4;
        java.lang.String $r4;

        $r0 := @this: com.contextlogic.wish.cache.ImageCacheWarmer;

        $r1 := @parameter0: java.lang.Object;

        $r3 = $r0.<com.contextlogic.wish.cache.ImageCacheWarmer: java.util.concurrent.ConcurrentHashMap requestTagUrlMap>;

        $r2 = virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (java.lang.String) $r2;

(0)     if $r4 == null goto label1;

        $r3_1 = $r0.<com.contextlogic.wish.cache.ImageCacheWarmer: java.util.concurrent.ConcurrentHashMap requestTagUrlMap>;

        virtualinvoke $r3_1.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>($r1);

        $r3_2 = $r0.<com.contextlogic.wish.cache.ImageCacheWarmer: java.util.concurrent.ConcurrentHashMap urlRequestTagMap>;

        virtualinvoke $r3_2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>($r4);

        $r3_3 = $r0.<com.contextlogic.wish.cache.ImageCacheWarmer: java.util.concurrent.ConcurrentHashMap urlFetcherMap>;

(1)     virtualinvoke $r3_3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>($r4);

     label1:
        $r3_4 = Phi($r3 #0, $r3_3 #1);

        return;
    }

    public void onImageLoaded(java.lang.Object, android.graphics.Bitmap)
    {
        com.contextlogic.wish.cache.ImageCacheWarmer $r0;
        java.lang.Object $r1, $r3;
        android.graphics.Bitmap $r2;
        java.util.concurrent.ConcurrentHashMap $r4, $r4_1, $r4_2, $r4_3;
        java.lang.String $r5;

        $r0 := @this: com.contextlogic.wish.cache.ImageCacheWarmer;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: android.graphics.Bitmap;

        $r4 = $r0.<com.contextlogic.wish.cache.ImageCacheWarmer: java.util.concurrent.ConcurrentHashMap requestTagUrlMap>;

        $r3 = virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r1);

        $r5 = (java.lang.String) $r3;

(0)     if $r5 == null goto label1;

        $r4_1 = $r0.<com.contextlogic.wish.cache.ImageCacheWarmer: java.util.concurrent.ConcurrentHashMap requestTagUrlMap>;

        virtualinvoke $r4_1.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>($r1);

        $r4_2 = $r0.<com.contextlogic.wish.cache.ImageCacheWarmer: java.util.concurrent.ConcurrentHashMap urlFetcherMap>;

(1)     virtualinvoke $r4_2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>($r5);

     label1:
        $r4_3 = Phi($r4 #0, $r4_2 #1);

        return;
    }

    public void pause()
    {
        android.util.Pair $r0;
        com.contextlogic.wish.cache.ImageCacheWarmer $r1;
        java.util.concurrent.ConcurrentHashMap $r2, $r2_1, $r2_2, $r2_3, $r2_4;
        java.util.Set $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5, $r5_1, $r5_2, $r5_3;
        java.util.Map$Entry $r6;
        java.lang.String $r7;
        com.contextlogic.wish.cache.CachedImageFetcher $r8;
        int $i0, $i0_1, $i0_2;
        java.lang.Integer $r9, $r10;
        java.util.HashMap $r11;

        $r1 := @this: com.contextlogic.wish.cache.ImageCacheWarmer;

        $r2 = $r1.<com.contextlogic.wish.cache.ImageCacheWarmer: java.util.concurrent.ConcurrentHashMap urlFetcherMap>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.util.Set entrySet()>();

(0)     $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $r2_1 = Phi($r2 #0, $r2_2 #1);

        $i0 = Phi($i0 #0, $i0_2 #1);

        $r5 = Phi($r5 #0, $r5_3 #1);

        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5_1 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.util.Map$Entry) $r5_1;

        $r5_2 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = (java.lang.String) $r5_2;

        $r5_3 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r8 = (com.contextlogic.wish.cache.CachedImageFetcher) $r5_3;

        virtualinvoke $r8.<com.contextlogic.wish.cache.CachedImageFetcher: void cancel()>();

        $r0 = new android.util.Pair;

        $i0_1 = virtualinvoke $r8.<com.contextlogic.wish.cache.CachedImageFetcher: int getRequestedImageWidth()>();

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0_1);

        $i0_2 = virtualinvoke $r8.<com.contextlogic.wish.cache.CachedImageFetcher: int getRequestedImageHeight()>();

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0_2);

        specialinvoke $r0.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r9, $r10);

        $r11 = $r1.<com.contextlogic.wish.cache.ImageCacheWarmer: java.util.HashMap pausedRequests>;

        virtualinvoke $r11.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r0);

        $r2_2 = $r1.<com.contextlogic.wish.cache.ImageCacheWarmer: java.util.concurrent.ConcurrentHashMap urlRequestTagMap>;

        virtualinvoke $r2_2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>($r7);

(1)     goto label1;

     label2:
        $r2_3 = $r1.<com.contextlogic.wish.cache.ImageCacheWarmer: java.util.concurrent.ConcurrentHashMap urlFetcherMap>;

        virtualinvoke $r2_3.<java.util.concurrent.ConcurrentHashMap: void clear()>();

        $r2_4 = $r1.<com.contextlogic.wish.cache.ImageCacheWarmer: java.util.concurrent.ConcurrentHashMap requestTagUrlMap>;

        virtualinvoke $r2_4.<java.util.concurrent.ConcurrentHashMap: void clear()>();

        return;
    }

    public void resume()
    {
        com.contextlogic.wish.cache.ImageCacheWarmer $r0;
        java.util.HashMap $r1, $r1_1;
        java.util.Set $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4, $r4_1, $r4_2, $r4_3, $r4_4, $r4_5;
        java.util.Map$Entry $r5;
        android.util.Pair $r6;
        java.lang.String $r7;
        java.lang.Integer $r8, $r8_1, $r8_2;
        int $i0, $i1;

        $r0 := @this: com.contextlogic.wish.cache.ImageCacheWarmer;

        $r1 = $r0.<com.contextlogic.wish.cache.ImageCacheWarmer: java.util.HashMap pausedRequests>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.util.Set entrySet()>();

(0)     $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $r8 = Phi($r8 #0, $r8_2 #1);

        $r4 = Phi($r4 #0, $r4_5 #1);

        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4_1 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.util.Map$Entry) $r4_1;

        $r4_2 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r6 = (android.util.Pair) $r4_2;

        $r4_3 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = (java.lang.String) $r4_3;

        $r4_4 = $r6.<android.util.Pair: java.lang.Object first>;

        $r8_1 = (java.lang.Integer) $r4_4;

        $i0 = virtualinvoke $r8_1.<java.lang.Integer: int intValue()>();

        $r4_5 = $r6.<android.util.Pair: java.lang.Object second>;

        $r8_2 = (java.lang.Integer) $r4_5;

        $i1 = virtualinvoke $r8_2.<java.lang.Integer: int intValue()>();

        virtualinvoke $r0.<com.contextlogic.wish.cache.ImageCacheWarmer: void warmCache(java.lang.String,int,int)>($r7, $i0, $i1);

(1)     goto label1;

     label2:
        $r1_1 = $r0.<com.contextlogic.wish.cache.ImageCacheWarmer: java.util.HashMap pausedRequests>;

        virtualinvoke $r1_1.<java.util.HashMap: void clear()>();

        return;
    }

    public void warmCache(java.lang.String, int, int)
    {
        com.contextlogic.wish.cache.ImageCacheWarmer $r0;
        java.lang.String $r1;
        int $i0, $i1;

        $r0 := @this: com.contextlogic.wish.cache.ImageCacheWarmer;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        virtualinvoke $r0.<com.contextlogic.wish.cache.ImageCacheWarmer: void warmCache(java.lang.String,int,int,int)>($r1, $i0, $i1, -1);

        return;
    }

    public void warmCache(java.lang.String, int, int, int)
    {
        com.contextlogic.wish.cache.ImageCacheWarmer $r0;
        java.lang.String $r1;
        int $i0, $i1, $i2, $i3;
        com.contextlogic.wish.cache.CachedImageFetcher $r2;
        com.contextlogic.wish.http.WishHttpClient$RequestPool $r3;
        java.util.concurrent.ConcurrentHashMap $r4, $r4_1, $r4_2, $r4_3, $r4_4, $r4_5;
        java.lang.Object $r5, $r5_1, $r5_2;

        $r0 := @this: com.contextlogic.wish.cache.ImageCacheWarmer;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

(0)     if $r1 == null goto label3;

        $r4 = $r0.<com.contextlogic.wish.cache.ImageCacheWarmer: java.util.concurrent.ConcurrentHashMap urlFetcherMap>;

        $i3 = virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap: int size()>();

        if $i3 <= 30 goto label1;

        return;

     label1:
        $r4_1 = $r0.<com.contextlogic.wish.cache.ImageCacheWarmer: java.util.concurrent.ConcurrentHashMap urlRequestTagMap>;

        $r5 = virtualinvoke $r4_1.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r1);

(1)     if $r5 != null goto label3;

        $r5_1 = new java.lang.Object;

        specialinvoke $r5_1.<java.lang.Object: void <init>()>();

        $r4_2 = $r0.<com.contextlogic.wish.cache.ImageCacheWarmer: java.util.concurrent.ConcurrentHashMap urlRequestTagMap>;

        virtualinvoke $r4_2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r5_1);

        $r4_3 = $r0.<com.contextlogic.wish.cache.ImageCacheWarmer: java.util.concurrent.ConcurrentHashMap requestTagUrlMap>;

        virtualinvoke $r4_3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5_1, $r1);

        $r2 = new com.contextlogic.wish.cache.CachedImageFetcher;

        specialinvoke $r2.<com.contextlogic.wish.cache.CachedImageFetcher: void <init>(com.contextlogic.wish.cache.CachedImageFetcherCallback)>($r0);

        virtualinvoke $r2.<com.contextlogic.wish.cache.CachedImageFetcher: void setCacheOnly(boolean)>(1);

        virtualinvoke $r2.<com.contextlogic.wish.cache.CachedImageFetcher: void setRequestedImageHeight(int)>($i1);

        virtualinvoke $r2.<com.contextlogic.wish.cache.CachedImageFetcher: void setRequestedImageWidth(int)>($i0);

        if $i2 == -1 goto label2;

        virtualinvoke $r2.<com.contextlogic.wish.cache.CachedImageFetcher: void setMode(int)>($i2);

     label2:
        $r3 = <com.contextlogic.wish.http.WishHttpClient$RequestPool: com.contextlogic.wish.http.WishHttpClient$RequestPool ImagePrefetch>;

        virtualinvoke $r2.<com.contextlogic.wish.cache.CachedImageFetcher: void fetchImage(java.lang.String,java.lang.Object,com.contextlogic.wish.http.WishHttpClient$RequestPool)>($r1, $r5_1, $r3);

        $r4_4 = $r0.<com.contextlogic.wish.cache.ImageCacheWarmer: java.util.concurrent.ConcurrentHashMap urlFetcherMap>;

(2)     virtualinvoke $r4_4.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

     label3:
        $r4_5 = Phi($r4 #0, $r4_1 #1, $r4_4 #2);

        $r5_2 = Phi($r5 #0, $r5 #1, $r5_1 #2);

        return;
    }
}
