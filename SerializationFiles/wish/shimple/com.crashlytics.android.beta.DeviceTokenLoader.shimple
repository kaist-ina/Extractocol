public class com.crashlytics.android.beta.DeviceTokenLoader extends java.lang.Object implements io.fabric.sdk.android.services.cache.ValueLoader
{
    private static final java.lang.String DIRFACTOR_DEVICE_TOKEN_PREFIX;

    public void <init>()
    {
        com.crashlytics.android.beta.DeviceTokenLoader $r0;

        $r0 := @this: com.crashlytics.android.beta.DeviceTokenLoader;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    java.lang.String determineDeviceToken(java.util.zip.ZipInputStream) throws java.io.IOException
    {
        com.crashlytics.android.beta.DeviceTokenLoader $r0;
        java.util.zip.ZipInputStream $r1;
        java.lang.String $r2, $r4, $r2_1;
        java.util.zip.ZipEntry $r3;
        boolean $z0;
        int $i0, $i1, $i1_1;

        $r0 := @this: com.crashlytics.android.beta.DeviceTokenLoader;

        $r1 := @parameter0: java.util.zip.ZipInputStream;

     label1:
        $r3 = virtualinvoke $r1.<java.util.zip.ZipInputStream: java.util.zip.ZipEntry getNextEntry()>();

        if $r3 == null goto label2;

        $r4 = virtualinvoke $r3.<java.util.zip.ZipEntry: java.lang.String getName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>("assets/com.crashlytics.android.beta/dirfactor-device-token=");

        if $z0 == 0 goto label1;

        $r2 = "assets/com.crashlytics.android.beta/dirfactor-device-token=";

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i1 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i1_1 = $i1 + -1;

        $r2_1 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>($i0, $i1_1);

        return $r2_1;

     label2:
        return "";
    }

    java.util.zip.ZipInputStream getZipInputStreamOfAppApkFrom(android.content.Context) throws android.content.pm.PackageManager$NameNotFoundException, java.io.FileNotFoundException
    {
        com.crashlytics.android.beta.DeviceTokenLoader $r0;
        android.content.Context $r1;
        java.util.zip.ZipInputStream $r2;
        java.io.FileInputStream $r3;
        android.content.pm.PackageManager $r4;
        java.lang.String $r5, $r5_1;
        android.content.pm.ApplicationInfo $r6;

        $r0 := @this: com.crashlytics.android.beta.DeviceTokenLoader;

        $r1 := @parameter0: android.content.Context;

        $r4 = virtualinvoke $r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r5 = virtualinvoke $r1.<android.content.Context: java.lang.String getPackageName()>();

        $r6 = virtualinvoke $r4.<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>($r5, 0);

        $r2 = new java.util.zip.ZipInputStream;

        $r3 = new java.io.FileInputStream;

        $r5_1 = $r6.<android.content.pm.ApplicationInfo: java.lang.String sourceDir>;

        specialinvoke $r3.<java.io.FileInputStream: void <init>(java.lang.String)>($r5_1);

        specialinvoke $r2.<java.util.zip.ZipInputStream: void <init>(java.io.InputStream)>($r3);

        return $r2;
    }

    public volatile java.lang.Object load(android.content.Context) throws java.lang.Exception
    {
        com.crashlytics.android.beta.DeviceTokenLoader $r0;
        android.content.Context $r1;
        java.lang.String $r2;

        $r0 := @this: com.crashlytics.android.beta.DeviceTokenLoader;

        $r1 := @parameter0: android.content.Context;

        $r2 = virtualinvoke $r0.<com.crashlytics.android.beta.DeviceTokenLoader: java.lang.String load(android.content.Context)>($r1);

        return $r2;
    }

    public java.lang.String load(android.content.Context) throws java.lang.Exception
    {
        com.crashlytics.android.beta.DeviceTokenLoader $r0;
        android.content.Context $r1;
        java.io.IOException $r2, $r4, $r6, $r7, $r8, $r10;
        android.content.pm.PackageManager$NameNotFoundException $r3;
        java.io.FileNotFoundException $r5;
        java.lang.Throwable $r9;
        long $l0, $l1, $l0_1;
        java.lang.String $r11, $r16, $r11_1, $r11_2, $r11_3, $r11_4, $r11_5, $r11_6;
        java.util.zip.ZipInputStream $r12, $r13, $r12_1, $r12_2, $r12_3, $r12_4, $r12_5, $r12_6;
        double $d0, $d0_1;
        io.fabric.sdk.android.Logger $r14, $r14_1, $r14_2, $r14_3, $r14_4, $r14_5, $r14_6, $r14_7, $r14_8, $r14_9, $r14_10, $r14_11;
        java.lang.StringBuilder $r15, $r15_1, $r15_2, $r15_3;

        $r0 := @this: com.crashlytics.android.beta.DeviceTokenLoader;

        $r1 := @parameter0: android.content.Context;

        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

        $r11 = "";

(0)     $r12 = null;

     label01:
        $r13 = virtualinvoke $r0.<com.crashlytics.android.beta.DeviceTokenLoader: java.util.zip.ZipInputStream getZipInputStreamOfAppApkFrom(android.content.Context)>($r1);

     label02:
(1)     $r12_1 = $r13;

     label03:
(2)     $r11_1 = virtualinvoke $r0.<com.crashlytics.android.beta.DeviceTokenLoader: java.lang.String determineDeviceToken(java.util.zip.ZipInputStream)>($r13);

     label04:
(3)     if $r13 == null goto label06;

     label05:
(4)     virtualinvoke $r13.<java.util.zip.ZipInputStream: void close()>();

     label06:
        $r11_2 = Phi($r11_1 #3, $r11_1 #4, $r11_1 #5, $r11_3 #8, $r11_3 #9, $r11_3 #10, $r11_4 #13, $r11_4 #14, $r11_4 #15, $r11_5 #18, $r11_5 #19, $r11_5 #20);

        $r12_2 = Phi($r12_1 #3, $r12_1 #4, $r12_1 #5, $r12_3 #8, $r12_3 #9, $r12_3 #10, $r12_4 #13, $r12_4 #14, $r12_4 #15, $r12_5 #18, $r12_5 #19, $r12_5 #20);

        $r14_1 = Phi($r14 #3, $r14 #4, $r14 #5, $r14_3 #8, $r14_3 #9, $r14_4 #10, $r14_5 #13, $r14_5 #14, $r14_6 #15, $r14_7 #18, $r14_7 #19, $r14_8 #20);

        $l1 = staticinvoke <java.lang.System: long nanoTime()>();

        $l0_1 = $l1 - $l0;

        $d0 = (double) $l0_1;

        $d0_1 = $d0 / 1000000.0;

        $r14_2 = staticinvoke <io.fabric.sdk.android.Fabric: io.fabric.sdk.android.Logger getLogger()>();

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r15_1 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Beta device token load took ");

        $r15_2 = virtualinvoke $r15_1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0_1);

        $r15_3 = virtualinvoke $r15_2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms");

        $r16 = virtualinvoke $r15_3.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r14_2.<io.fabric.sdk.android.Logger: void d(java.lang.String,java.lang.String)>("Beta", $r16);

        return $r11_2;

     label07:
        $r2 := @caughtexception;

        $r14 = staticinvoke <io.fabric.sdk.android.Fabric: io.fabric.sdk.android.Logger getLogger()>();

        interfaceinvoke $r14.<io.fabric.sdk.android.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>("Beta", "Failed to close the APK file", $r2);

(5)     goto label06;

     label08:
        $r3 := @caughtexception;

        $r11_3 = Phi($r11 #0, $r11_1 #2);

(6)     $r12_3 = Phi($r12 #0, $r12_1 #1);

     label09:
(7)     $r14_3 = staticinvoke <io.fabric.sdk.android.Fabric: io.fabric.sdk.android.Logger getLogger()>();

        interfaceinvoke $r14_3.<io.fabric.sdk.android.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>("Beta", "Failed to find this app in the PackageManager", $r3);

     label10:
(8)     if $r12_3 == null goto label06;

     label11:
        virtualinvoke $r12_3.<java.util.zip.ZipInputStream: void close()>();

     label12:
(9)     goto label06;

     label13:
        $r4 := @caughtexception;

        $r14_4 = staticinvoke <io.fabric.sdk.android.Fabric: io.fabric.sdk.android.Logger getLogger()>();

        interfaceinvoke $r14_4.<io.fabric.sdk.android.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>("Beta", "Failed to close the APK file", $r4);

(10)    goto label06;

     label14:
        $r5 := @caughtexception;

        $r11_4 = Phi($r11 #0, $r11_1 #2);

(11)    $r12_4 = Phi($r12 #0, $r12_1 #1);

     label15:
(12)    $r14_5 = staticinvoke <io.fabric.sdk.android.Fabric: io.fabric.sdk.android.Logger getLogger()>();

        interfaceinvoke $r14_5.<io.fabric.sdk.android.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>("Beta", "Failed to find the APK file", $r5);

     label16:
(13)    if $r12_4 == null goto label06;

     label17:
        virtualinvoke $r12_4.<java.util.zip.ZipInputStream: void close()>();

     label18:
(14)    goto label06;

     label19:
        $r6 := @caughtexception;

        $r14_6 = staticinvoke <io.fabric.sdk.android.Fabric: io.fabric.sdk.android.Logger getLogger()>();

        interfaceinvoke $r14_6.<io.fabric.sdk.android.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>("Beta", "Failed to close the APK file", $r6);

(15)    goto label06;

     label20:
        $r7 := @caughtexception;

        $r11_5 = Phi($r11 #0, $r11_1 #2);

(16)    $r12_5 = Phi($r12 #0, $r12_1 #1);

     label21:
(17)    $r14_7 = staticinvoke <io.fabric.sdk.android.Fabric: io.fabric.sdk.android.Logger getLogger()>();

        interfaceinvoke $r14_7.<io.fabric.sdk.android.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>("Beta", "Failed to read the APK file", $r7);

     label22:
(18)    if $r12_5 == null goto label06;

     label23:
        virtualinvoke $r12_5.<java.util.zip.ZipInputStream: void close()>();

     label24:
(19)    goto label06;

     label25:
        $r8 := @caughtexception;

        $r14_8 = staticinvoke <io.fabric.sdk.android.Fabric: io.fabric.sdk.android.Logger getLogger()>();

        interfaceinvoke $r14_8.<io.fabric.sdk.android.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>("Beta", "Failed to close the APK file", $r8);

(20)    goto label06;

     label26:
        $r9 := @caughtexception;

        $r11_6 = Phi($r11 #0, $r11_1 #2, $r11_3 #6, $r11_4 #11, $r11_5 #16);

        $r12_6 = Phi($r12 #0, $r12_1 #1, $r12_3 #6, $r12_4 #11, $r12_5 #16);

        $r14_9 = Phi($r14 #0, $r14_3 #7, $r14_5 #12, $r14_7 #17);

(21)    if $r12_6 == null goto label28;

     label27:
(22)    virtualinvoke $r12_6.<java.util.zip.ZipInputStream: void close()>();

     label28:
        $r14_10 = Phi($r14_9 #21, $r14_9 #22, $r14_11 #23);

        throw $r9;

     label29:
        $r10 := @caughtexception;

        $r14_11 = staticinvoke <io.fabric.sdk.android.Fabric: io.fabric.sdk.android.Logger getLogger()>();

        interfaceinvoke $r14_11.<io.fabric.sdk.android.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>("Beta", "Failed to close the APK file", $r10);

(23)    goto label28;

        catch android.content.pm.PackageManager$NameNotFoundException from label01 to label02 with label08;
        catch java.io.FileNotFoundException from label01 to label02 with label14;
        catch java.io.IOException from label01 to label02 with label20;
        catch java.lang.Throwable from label01 to label02 with label26;
        catch android.content.pm.PackageManager$NameNotFoundException from label03 to label04 with label08;
        catch java.io.FileNotFoundException from label03 to label04 with label14;
        catch java.io.IOException from label03 to label04 with label20;
        catch java.lang.Throwable from label03 to label04 with label26;
        catch java.io.IOException from label05 to label06 with label07;
        catch java.lang.Throwable from label09 to label10 with label26;
        catch java.io.IOException from label11 to label12 with label13;
        catch java.lang.Throwable from label15 to label16 with label26;
        catch java.io.IOException from label17 to label18 with label19;
        catch java.lang.Throwable from label21 to label22 with label26;
        catch java.io.IOException from label23 to label24 with label25;
        catch java.io.IOException from label27 to label28 with label29;
    }
}
